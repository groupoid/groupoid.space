module lambek where
-- typechecker primitive
Path (A : U) (a b : A) : U = PathP (<i> A) a b
-- unitial unit algebra
data Unit = unit
-- initial list algebra
data list (A: U) = nil | cons (a: A) (xs: list A)
-- objects in category of list algebras
listAlg (A : U) : U
    = (X: U)
    * (nil: Unit -> X)
    * (cons: A -> X -> X)
    * Unit
-- morphisms in category of list algebras
listMor (A: U) (x1 x2: listAlg A) : U
    = (map: x1.1 -> x2.1)
    * (mapNil: Path x2.1 (map (x1.2.1 unit)) (x2.2.1 unit))
    * (mapCons: (a:A) (x: x1.1) -> Path x2.1 (map (x1.2.2.1 a x)) (x2.2.2.1 a (map x)))
    * Unit
-- the instances of lists are connected!
listPoint (A: U) : U
    = (point: (x: listAlg A) -> x.1)
    * (map: (x1 x2: listAlg A)
            (m: listMor A x1 x2) ->
            Path x2.1 (m.1 (point x1)) (point x2))
    * Unit
