%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.6 (Build 17G65) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 749 375
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 749 375
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: SWJUSA+Geometria-Light
%!FontType1-1.0: SWJUSA+Geometria-Light 001.001%%CreationDate: 10/10/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.001) readonly def/FullName (Geometria Light) readonly def/FamilyName (Geometria Light) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -75 def/UnderlineThickness 50 defend readonly def/FontName /SWJUSA+Geometria-Light def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /S putdup 34 /U putdup 35 /B putdup 36 /C putdup 37 /R putdup 38 /I putdup 39 /E putdup 40 /space putdup 41 /A putdup 42 /N putdup 43 /T putdup 44 /slash putdup 45 /O putdup 46 /M putdup 47 /u putdup 48 /l putdup 49 /t putdup 50 /i putdup 51 /c putdup 52 /r putdup 53 /s putdup 54 /o putdup 55 /m putdup 56 /p putdup 57 /e putdup 58 /n putdup 59 /a putdup 60 /f putdup 61 /parenleft putdup 62 /P putdup 63 /parenright putdup 64 /Q putdup 65 /g putdup 66 /d putdup 67 /h putdup 68 /L putdup 69 /y putdup 70 /eight putdup 71 /K putdup 72 /numbersign putdup 73 /one putdup 74 /two putdup 75 /four putdup 76 /five putdup 77 /three putdup 78 /F putreadonly def/FontBBox {-412 -220 1438 923} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF1D53D6B91070844A9B74E43083EFDBF34C5770D328A6B574F14FE01D76EF86C53820A66FC19E082B068B33DABAD55F1C291FAFFA23ECB9F8EC0605C0A9E3B85544AA0CCDCC141DB39B406D85EB4F2360D566193F2E4304400A6D429C392CC8F67A0EA0F770FC6BBFBA1FE0DC4B2CCF7B9E36939F6213CBD9A315109B45B3091B384BEA5A47014A2251E509D4D739D949CD8FF6A2D0AAA50CBB2DF70AB1AF2D690BEE8CD1EA67A213BBCB1A9C57AED5B7D838409580D19207BAD2DC663A48E88F7C6E17A0025278F0405846D8AD3917CD695ABD9ECDCFE9388A58E529E9A93F37FBF1227FC2072DA48F2A5F31C39995BADB5A87D269011036574C925530BBE3226885E9D99B3F93478CB75E9321538D721117E0A089412DA8B005FC3AF2202B2A2FD54FF131CBCB943AF1C970F3DC145CD6BFFD9AFDE174D7BD5E7D0E479B0E77B2100C2D5E422B61B283B2A57CA9BF34C2F625C90F35222BA07D238F445A9B58A5854C27A8EDA066F35F20C41022D8F93424D89E8E9901EE6DFEC6CE807EF022E3CB6D16D563BE808DE64EE6407B9D5E5D5FE57D5585AC7F0B830D9F8D6122A2B107C4FBF10ACCEA3806597ABD5FB9B0FF9A2866E6B89283E06449107023782FD7CEC7D7F35B42A0D09B3A8ED2642F006A2C7C9F3101FF7382FA894C4BA1DF6843E0D1B56C6A97A070BE5BE672D65F852A979C0D40DF44F5C1E6A26D5AD434B03AC82FA3616C69D117B1E2275967675DA21D50D273ED980F682273177C404164F941D034EF23B86E62781A610947BB447654EC51FCD2E773ECB9500D63419B82261525DC078648856F7B90929BA453776ECCB2FAF28873AC0918F376A43C9ACEE3275325302C24E28A0D3AD4D86ED5554972695179D55EE1CDCA15400ADE9E7597EAA6AA248FEA0205DA8FA0B80DDB3434FCE1E45C87B10C4039759BF648571B3EAC88F401A62397B71F305F33DCD83B92ED4473F8EADBA526FD009E527F19970BBCC4E877E5419C4455E69C47FA1BE75FC09D8A5047F94B01CC6124D7C9D8B8DC7FE0994D75547CA26014E5DC02A62A721DD845E076E33DBB2181F43631B49D8F52CE2B2B7D58F418E1FA3C2C80FBAFAE2ADB52FAFFDA55283EF33161E8BB3ACBBA792EF4C3E122D4EBBD9DE6E03334C27742E48C0EB23AC6BE63886FABE5F61C2B1516A7BC72E2B3881A69E029E672001F9836F6D16F2A49E887BD21302FFB58F88874A3AB27DC26EC1123DBF9E8464FA5AC612A5865E25405DAE116DFA0886923787BC96B6F19C973B4B6B67CF8382FF52CD579248C06215F22045F015EE66D2FA73DB4841247F023C06D64B8C2A41D634668E5B741FF1073454EF992AB85E28B409971B39B8B3F0AD0A240CC890739DADAACC2F4D3153C183EFD4D1CE515508CAC76EAC281BF61C46D54FE452D43F700EF89E7E3F61069C36341ABA36EAB667C27EFF4CBE60EA3D00A0899FC68F9187ADC720D8AD15C4C2DEE5654E0D246D34515B408A5B580E54B11C6B2B3B6F0F283549C79F5885D6C79986B756E2D5233967C1CD79DF1B497261E4EB90473D74A63303628F4530033AC16AE9ED1731F7F6C24973B1DC5B7F74529AC8D96D665AF24E0301DCF5B8BB3282239C026BDAA56EA0C790564C3A31CE860B46F643D5D7801667DF3720301A4657947B917A9B695DAE33011CD9DB550917B741B931C3E6CE8CCA93F365A0C2F2A4948AEE2B51336A87CDBD7CE7DAB04C443AB3CA48D93A5AED3065158F26FD4D19274FB30243375A36D7342098BAFA285C3F453C415A58446DC087BF763A392B1CAF8677A29E2BB9C793F5692DB647318BA2411F83166A368F6ECCE1DAECE46F4D2321F52C86EBEB2A7EFF72F73A3BDC8CCDE7E61625D98EFB2143837F5F57A061660BB0267083D89051AF8A460A5FC8AC3893712B7D4C0B98808608B318CA523EAA4D60EB93A2A66D2446A17ECAC95CA0419D9896155A26BC02E08256762A052E6DDC48C0D2B9674FB15A8412F7BB5C5351EEFDFF617638AB8F256C12E71C6FFD33034726F0A9ACEF05F055A5EA3DEAB7A271113BA695B53593096C32A6990696898BBB11AD2794D6A8CE270B84CCF26F80D48A9A9CCA90398A939F500D2D45D1F69C9B4A173503547E7AEBD8D1677F77BEDA5033230B44BBD1622C1E42B6BC4E8CF81862456A7757BC62CACDF01B488E134274269D0851D759710304B43604BF5D625DF67FE06F72AD125E23BCE8FD66DB4AC67B59046A616FE407931154C9919530405E119BE8E3D2B065226EE94B09D7D38B5C05E7FAB97105A236B7EBEABDC1C6E3422F15D71D87F253C6CD4A917924A6EB7BAA9F68C330141E50113FA304C60824FB59623A7D7F0CAD08772B1C50B64288F1D5BE930842321D15CAF8D63AC3C6DEFE93509A4E92D54D7023493660263A36BCB1AAC905BD57480E80350D78DDD87E89B60191CD36E6B7A96CF1BC9C27E7D35AC32532C3C55DEAB0BFD5DE3D3C4CBD27694DD8E2E2A66ABC9FD75A71F3D0754DCFCB636DAB8CEADB01E504633360A4C17C986615EAFFB8FB141F31AE828829CF3F41895B06C3A5A896812BB8DC599CD90846988A9101CE334CE76AAADED44D97D9D78D5681AC294B45E7F43FBACA6A4CE1A5C68EC3E1D1B5A1F20E8E5A77847C6C18DC023D011E7FA60A734CB37A5330B11648B36FBF49DE737A5A50346C155E58B8D7AA26F4327B8D9FD5F71F8684A220B673F6A07531766D5A4FF176558007B4D280F7A5DFD33571053F8A527B58C79FCF1D55D720B6CD599C072095AF124551410E8CBDFD5DC70ED20C2390BB322B9FB0A1785A9582339FF030E210A331E0EA3E8083EB5796A81A0F399AA489ADFE4A2C0AB9684BC10E32C10A118F9C6EB102DD70997D41FF12D7D038B2E2BBBAA8D13AC0CA8E6A4B9DDDD0F720D620EADE33FECF3E33071D47C5AC7413A059F6B60C56B51C33773E130E0D4E2B1CFBC53AA72A61EEF3E9DC5A9E6F824E15E573949C6ECB58727942666EA817606E5BA57C4A611937F0761373A6D14D38B2117FA1540F03E748E8F3B92F3D7890AE1C1AF39744C29EE17F74D5B11A88123789EC0DF28D3ADDD5DB98BA12D6378E3E0D21156DB04757D113B7DBFD80055F7F4DF3D30F2FDB72E9CB04C3E47A683C5A4A410CEEB7F46E4F84D50DE717FA7C4E88125E26F9C4FF767E5EF88601497A45DC842B3A275E1B48EB1F076C02887FBFB7ADB96C5388B7CE2A3AF123D2B1491F96ECF22D7F8321BE1DC5952F790E0FBFD26DADD637965DD7993C09CDBAED400695EE476102872FAD3148C339CC3B1A986556D7DF58A04C90EBF86FE22DD93E163C80C44A3ECA2793CCCB53AF67BAB798B960618AB5BD015ED237B8C1758635F32B4F8CA4164D06E64065023F7F6D8DBB82D1E6E788B0C1C1F15289AB45F4BCC7A7FDF89650A648C511C9F9C5A7FEAEEC8AAC29D680CFA56E8F7D137466CD755744BA286820673CF28E53AA0D10BEFAB60D27AFB27C7EF2D42F57E61BF6DB6B1E90A8B71D1FB0DFC2F3FC663C3397F0149652A092466A22F7F5D6D81358C9F686090C2B1461A531D9644BD0163D1C02E8236659C0400B87797E571B00BF2AADD0EB0820EBE325AB3BE5A8D01D56F1B9ED875E9A1E99E724F409FDBF2A0F808FA8357494B1DEC414D66F7C1648A10CEF75F5585B28CC7421BB32DAEA7794B3148E32B20349714A4C7A1CE880210740883F789CE58AE42657B924890379D5471A9F94B303E6E890DBFB3A714240DB8C0D5029E58C6F9F474924A0698D48CDEF800965533833FDBE8EB59F6C44B848547BC28E1AF56E052E2B0E7F37B089ABEBE84AC580F91F0FD09439B5776CD2CAB63D33AA1466B42B785D88BC2AC8F954B6D1F292F1C6F689721F803334169756BD09A02A92DF5230D1689D5EF33031F93633BBFA8EB89025570B9C226299BF1CDBAF8EF68710CF6E7802C1AEC889CFA1E93771A27ADCBA3C9B7EFE6CEBBCB035AD6DC845C456ABE6C727DA41E4B74056466DD26EEEA6BC47DE66ACCDF1FFA65090F3830AF44234439F84348F55AC87BBC97CAF17E7D27B49044C048B811B1087D14C600B440D9166D322BC32E701683FF234BEC210699D65251BA6E9D593D24C6A1F4C938067DD19BC5AFBF361531172B649327B2F4CA41C6C2DD6AB56D6704AF787B3AB0B046F6CA69FC1FB262D0568DC5E00408F7CA039FF31267774846C3B8C31F42E549F4C951CA9768E4C65EA6B741E5F649525E53F72747B529BE47FD0431B5179A455A4BF8291E69A566F5C652215C23C52018EF6E5E6BA2E23889195CCB5789F1CCDEF0CC971A3093749ED776731EA5FC978FFEDADE007241B5D8E54BA43469CD11EE0C33B687F18B8696B260E8976E8BA45A565B01A0D93FE3E1A70AAF6EC578B5838D844C10B444632FD597DF84A09039E7420FEE21679550C9A66DB10C8543751799861C62D946302EADCC1933D3114B0D9D6178DBB9E478D864AA3867111470053D536D7735FE529D2E2C498CF5F19205B491EDE0448D9CF6FFAEBC19DD70DBE48F2D6715907358A83A25C552831CC98EED755E5B418BA03E6A1E6595BFE5EC276C008F267D0C58D1BEEF4FD42555F90F8C559B8B060BD927E0F0B8E9676D05542D0E55DC27DFABD22ED98098E352F95DC56A7F019F95C20FDC8D1968488BA4C1E482B6951D31F3B531E4E9965D004AEA7F3CE67E94FD12D4F07EF6E347DC06EBE24229E609200EA0F0A44DA02F1ADCE7F5A9F73515DBCB6A54B25CD3A1989E05FB8ED10C645AC820B0F87DABF38BF09AC2443FC62336ED161FF55B983D5A8555D643E420C565F748C543EB112D7F62325900F1DF44922C9B8F209930D6E44393BB06A995E571EE20D13FE7ECBF42DBB1A9AF6C68E4219B8150AC9C3EDB502C7C1C8942778CD1C57FB41FF099C0EF63D89AD68C7A1AFB26B8B51C14A06137DD7BD87574DEFC425594A22D444AF034A95D25A98CA88B3E2166A62D9B6D05225A5182C066997BEBB9644C8C3C0DDBD9EDE5074896B2FD8A4BCD7102D7C895C2F3063953BD2F34431DA0649C62EAF5F9010B4789B59B5B2447A2B57A36F28C96D0FD951968541A4584A89BD235ADB26332DB72F5EA502D25B0B45EE919A37F73811EA1CFBA5E8D1406DFCB233C0AA4AF91929DB9AE8DF83A154AC7721782867CD0102C4C4045E56A68BBFDE2B396F0749EF974A88D7D961B62B9B0E2CE301DDDB95C0342BC5FDF87538D53247E4216D5BA50C4AB8749240891CFEEBA27933C9552F4803D10F3F8836E405657D25DDDAAF69C13BB8795039625753FB0847E59358718410AD603A36FC2FEA5610C26BF84B23646F60AB787D3A36A9B2C36549B9BE9BA3C9E0005635F565A4AC97E4252C61DDAD790327E0CC368F867531813B2117394096222C23136C690C460B09F384CDA54E438B992A1FBA5B38016D6DC01FC86A162FDCC59C596C658FD743CCF72B4A998ED2E89433B9455D09F2D466E259EF2E51ECF8425C980500DA912D06C0088A3F66266327466990990C451E70017FE8126DF2BB8945D55F11AFA922EB36AACE926BD8F5F095EEF3DB1AD12E1F8B70507FEC8723CDDC20BA36459DD98EF3AC8E75ABF29C83326BB04B3602C0038AC25AF55A8E05F5966EB72C00B939B30D44EEDF1DDA94BBF401BEBB8A49D4C2EE99019942125EDFB2A94CEB247E2A41704FBD304A01B63D50E883D469D5D59C84F60C906263B3F2A6CC52899DB544659A5646ADF32724B93E5B45D706B45CCCAEA0E38E91D023B342263F12C3B694BEBFFFB031D6D6BB6535278E2D21E9B60CB399C85844C47BAF4EDF16B4EB8E084AAFED59E9DBB3052DC7B4970DA07AAB6822ED9880FE68A4D3725E95A496E197A56B9E25FE109B7F4E940EA1AD28A539823CBA9DC2E6677B64A9262FAE474B951FB250A6D02E638F39427F93DD21D3DD6736908041994632F92ECFCC9BEDABF7979E77105A6726EABA5ED79FD4C29F86A5C930EED3AEA4DA779D17B5592F36271D5180778FA8E5B3C44A173FEACE2D2C17435A56025A9E001AABD08B73EE6AF76DA088301570348C0EB1EE3528BC05623D665DCF59B17C55F9C95CE7E37D2357610E2AF8AEC0AE804FD1AAAA586839FD41D4914BB34D2805DEFB1B1741E2337F722C9A57A81BB016BF303076E1BDC56F82A3EE50D433E435924F81E8DBD5BCAD5BE5A42D9B1259B949F24C91AF6209CC0799C965468F2E69362F29262C97755312E4D099E2F4140A1F650E4BB1439275B6E5331F00633CC8E1BF00FBD6DDCFA40262BC73E44D014B87300BB41802E50D3EB98CC9C0520FCC1B36F6F353CC50705003EBE5C5C6B0ABBA6DCBAF3B9585FC40989B9E69A9CE97B117EF3DF597F4DC43BC5A812518E08C7FC6C68BDF0A95A4F237EA93CE882681CF7C8314200BD52A4BB197A4A6D39388D3B0D51350BAD627260F520B2C2C2500CD75B8953EE34921242BC6033E4CE74463DDA87484FFC8FE36523B2BD07FE95D36E7313CC62260C1040AFFADCFA35151B35C18495B2873574E6B3494D4C56622715DD6C939356518E5C65E330523E9DB3A08CB35BB7A791C061367B5FA5B6CBAE764AE46F2AD5A1E9B44501D0650C0A20CF69A8F6A1DD73B3021E4560133CE02C075AF3DB84B5CCBAA8A2BAAE3E4624C759C883243A4E5FF6904AC0FA5A7D8109ED0C9A4272F3F0FACB6718D5FB2C599CE4F599DBE81DBE3D540A4A99A3FF184133C876FE68077663F23E810B953DA16F154F71FB420D2E4327F8D1D869EFD9338CEE76FCE535F3D9A8582731979F4CA7058E489B4CABBE2F39A374415B62C1F5F8E31E006D6ABC736057910A3729AC60360CEE1B2C8D9F773363ED24C0C6998832D2AA521B5271CDB860D4729F7061A1D2AF9901E59AABD01F27D909693AA4AAFA7C32509E95153571E50E5D2B6A05A6E4E139D5B5A12562E6BE814317D05251A9C0E892142F201432A7D07FB389A85017F4BF99E1C416B3BE9FA157D9703D7DE43A5B3D3A3190C3E827417CAA761070C63E7790F8054CBC2A8CB5ECFAB8CBD74A2208974A2425BA2411922DF658CB27533813108DB1DED21A8419480CAC94DA3320A0E826F84268987D6EB437620D356887766733551E13F764F626792D19EFBB9C1A5DE550C906552E7FB9D5AE6CE5E4214B294124F6A1E9688EC72B3A09EB135A6AD579CB0407C5EEBACEF81CDF1F69BAFD3A941CF98563B94FD47B3B1F3FE4A6D118BEF294537E6EB19662FDC8E94D081C2F2A56D68878D180134EA44FCCA5EB7341460B6EFC27E5D12ACB5973643B1693322A5B170DE76962533EF1700DC171A478F1938803B8735A1DE230078C1A8DC319877083AAEC7C0C7CB70951ECEF42A4A67EFFB6A65C4585338A3F0DF11234EFD29617D1FD5C913B1B383D3C4C1C94CCB3568BCF705B97D9C535E217B04A43121737F373B4EFDF08768D68F34D1DB92CC01F32B0450AED0EAA60F72C198F51D1BD6DCD7D5BF3205A3817121F3D3B99CB5B82A904F55EB2E83AD5914BC0ECC61613DE2702BB541C92D8CCFAF99D5C52E3CCA2F11840594A83F3C4BCE01A99D5F09CD446CD6591849A1ED676EFA66373C7F0F7204F537189D9BF639723047C552B31067387535FBF511E344A272393B4C5D066D8C35DC8E43680F2D37B1155DEDE033E446F1A44621E8830D2F362301804DB8FC7F06D0325A43BB68902037C7B2D2170CBAD191B95DE101DD9151FD106684F84BB44A8A259C41E39C6C544FD2CC0725BE1F6E65A3AC872F9A5155A6E427646AB2013AFA59AC793E356178FF7C9F1ED545CF56F4A016E1FD576F2B17F03819138BFA8DB09A7043DA1D8F612DD74224766183ABBE7DAEF9717081010D335C97A58FEAC121EA7678871CC51BE0EA84A55599770732EBB5A4C75472552E4933F29DAD06E09E5C9B20DE36DCC0F40361EC44FBC02E44B7B3158AD00039AA54A2C113C8D2D5BC6FD512165E6A7718B33550D3CEB6B5C0E9A7B5EDA261865707C2A385AA68EC7A69A8821E04DBF2DBF167A6703E140C1FDA7D24A3FDC8216852704E811B552610CE1F55597B2E85E0C6147171E6E644EE933DA666723A6DA2B83EA1BC0A15AB6F0C9348D7B3F2780653B7C5FE96A597A5EE33CE4B2955A9C7950EF05D82543186510164C8934A4AB6B57583E1D6A6161789D298A7D3A42D0D06F3F9F0970D438CB3CE09A44D92A37D189152C821F96A9C0E2DEDA20E8759E9198902CF27ED6F775D854930D07E7AB1A059E1B1D86A02F181D96939E37559A4BA866A9FEDFF16685E1D15A087DE5528E0DB91DF38BDFD391799C3B910BFBDCA0157EEDED6DABBC4FFA1DDC0CBF07DA24EE48854C19F0DA2C981CA203F55D710D52F2CE3DEAD3B4A63B688788DA3F7319A626CDFC31AF82047C67E36FDFE287F094865A8AEAD329A8ACF5B524A45651802EA3FE4E53C5C8F41591936483B6FFEDFE85CBED626E3B7D13E1D084A53E9068280D676A5C68BC80C59E1197737A6939961BECDA6139FEFC0A3D8978F49FB9FCD4BF9CB0E726F01716FBFF5C974006E03C799EA79011A486E746F10F233B465871426CC3D304ABBA87863C7066D48253D0E7BFCDB4B15370F4ED6F72728028BD850A15EE3A1298A8BB5A1665F73BD6F46CEA6715443B8FD323798CD44746B1A1BF069BD994E789D63046C888F64AE73855E0C550D62DE4356998662A5E78A847454A6739C6B5B8E5040E815031010F405F281D194E2F99292EEF5277CF7A09B65EA5FA4EFED018B3F1408AF0E5790DDD47146155E91F1C6D5F9A8BB59A81346C4376AA3F8E9C79C0076220924B4B473A02F762A552A8CF062A54AB6F2B533D5B0F0C39F4EE0D5F2297FAAD10BC264D61ABD3FD70824D984210DCF753ACC26945B9E9966F4428B8850AF712438DADB342B1199933F8FB48C73592B4463ABCE864936DAC90B38B24371D9C891473D14F62605F5E65CE3937CA3CF15DDC85ACD1E20FE34EFEB10F1B89439FC50A390BDD257CB874A4F79F505FC80042726237124F83E31F208E0896DA315C546D37CBEB7F6711E376A7C546D0335DADA6460C4EB0C4B91110B1AD8A2EE23482EF10EBFE763DEE48258EA743D330D1FC99339860CFFD2E36619B9788CA2DA5F91005BECAE185DB9916298FEC011BE5763AA6AFC03E96D10AC4C19F01692C46596D0E6AC780255291EEA4C3728DB99EF752F9C158912E69B137C4EE23852149AE9201A8C1F48247126C0FAE9062B70E269F88E4110BC05A3626D74E26AE5DAF736EEB4C6BAA6825975EA74B650C192D7F77C4C2F9A67F378804CF9B8A554A505E07194A199CFC60FF813E3BE03324AF6E98C50CA2834A64BC65ED777C4372A17C4A15D195D54EA25A3A2CCE981BC3096FFFA847652D4CE4DFA799BB4567CDCD45F75EB9CB719550AC9E4819A84C777B8D117FE779659B59E4DCACF59ABDC30CF9725C7E724867A9AEC0395D1B77ECAC37DEF7CCE71E4AD412D70F105EBCDE74BFAA51A8960C10373A81886943517EFCE4997C4A2BF27100D4ACED036D689F93D7CCEAAB637D1E56B6C522EA21288F049BE08B9B331927DDBB4DF394533DBCF64171312CB76CAB5142DE76F3B402FC382F0EB8F6B91F5C8565173F968EC15D00709BD0C6338234B3E361D1B36BB1142612515BBBD019019EDFD17A64356CE4414282D74AE31059EEEE095644143AEC4C68B8AACB200E61EAA055310B2048BC8AD2227AA5730CB2FCC9FDEB76E63B6CADA22FA90AB2293E76E0F90F643669D318446F59CC50604183CA7EE3168F7FBE41F4EF6A89CAF006B80BBAE22C06ECA6587E57E7CF8B004A442004EEF0E32378BE0DC64348D3EF9AB8AAC3E4F96E27B502972F8423314A188631863E20655022F93EBA1485CB4FF79F008500120FC88956A0216612D894A99C15B28F1C3C4563F802F8C2137C1BED53EC84A94A019572784A48A43C77CCBFBEE19BFF02D2437CA59E731C229BDC0279470A207675CA5B8030FC4B0DC4E26D7556EDCF70F4E0622E27CF3FB70F7913CA7C98829542C5FDDED0D5C987C2D51F8B54E7DC82AC808A9D9E4E8A02F55EE3509287F57B95C1206F8BC6F0CC3904405F8A7813644AB33A58C24DD1D669358E0863FE8B890A1E44F0F76F3DEF6BEFD9E46F818463B335C3D2FFD0A2FED709AF5ED1875E8AABD6FFBABC13EBC5A68679917CE72D2EAFC631BC42F70F661294499F79752C08204E578F12A6E749901865084802EC9C18800ADA55815398EC0299E0F5AD539C66D820DF58D2BA304532BA2EA8FD5E3C77A313FAC51136BB0C87DFAFAC86D5500CC68CA2798FBEC97E71BFD1CEA79BDBD321DCED72A7A866F7D92DECE94735DE5AE074EF1A30071A2F5AA1CED76BBDFF67ECD266EF8D26070BE9B47E6CA2882881D93113FD69EF5BBAB3C9FADB212100A3ED3E231124795736BCD5DE0838FB8478B1B1484D2177767955EB0E2C3F506495272DBFBE0FCADA6B1ABF4273D76052CCCE39866FD27265B73F7D1CA87A32729CE89B10EE92018DEF77C15D614F15EA3850042B7BC78B7452C008D2CD2ACC4DEBB158C213A27C1B05B632B2C401C298D36B574EE26CCC390DBB87D6FC5F980154D9032A44649C549705DF27405D1B6EA3CF6E9A199C038D782A23E43F9859E6AAD8DFBF6268E5F670443E6FD7B251F2351C51B194E299412F51D8C79F8DA266F89F3200D6FCBA489691C3D4036B825954DDCB334BF189BB0103BDB39C2F4132C40E1F32B8BB7F38650AAE0BF09A319FAEBDE62EF499C091D2164D0DBD5FF07CE05015842E96930704B2144025BBD00A48DB969045CCE6AD6408A4CEA6222820852EFA7CB7B09B62D9A55441DDF9EC90EF5319792BBEF724019CC96BB576976FB7D1D48358ED56E3D2474E3A4886556444DAFF17983B4E9EF5EDB4DE0783B1A4B6D1CBDEBF9405AF13F5FD04C97B6FA41FD2EED18C15936B31CFFC7513609D327CEF89DD6661AEE8296A616533A8BE1080729D8EFC82192F16091713B12F4006396C8B47C4D2B34417B00F737B7DF180656B99A6547CD53271643E8A46B6F0C8A3D8565FE78AAD1353B6EC2AC8D9307EC49E8E4F4B943703D57D1C015C36CE9692B6E2E09C444BD8679E1CEE36B7FF9806BF834F31F5B146761631DD8FB7A7F90CC693374507079E92A20E6711A9A0BF7DC63B7F8F9ED676D14E3EF95D1732D44189982CCB3C0F4376FAB1152022C98EB54CEABDCBC829D28CC9DA5B257760936505C3CD5860D818F31FF664964C3640508284E90CA8AE53B811C300B995E8562B37C8568B3769303B134083D59B9EEB378FEEA16A6E11DF3C1959240AAD58063521AC8869526C924B3E5A99258C58BED11A7E4B561A2D2C8D94B597D71723E28D1C33242C7A3191FCD6CBAF15DFAE5501FAF70D500A12751F659520744DF697AE96B09E3B97BA380CE9D4605797DB63AAEA6303BF866E28A6C84E19410A83252385D5C725F234D50FF02CEC55C7DD652D15C8B2276F22C9D3DC9CE01BCEBE74DB026C9099B1BCA1CA3426303F4B99812C040010BFAB5B3C06FE2713E2FBB6C34B905E6559BB8E9664C7A8C79C79BEEC9BDB8A2ADFCA38F5C012E82A487E60E2C29BD6B41D518B11F098126C37DCF676F9E57291EDF678A14AA0975FFDABE2D13A5D7741CC7E03E011FEAC5326427A2EB60922C9D7CB51E2211583907860A73D0B03AA04A5BD7104E20B86A6693CC2CB67D4A5A8A51FDCE69D1121E5A9197867F0421DBB4CB593AF50F76646D42CF1930880D739A28AEBDABCA8AA37D01977BB9ECC5750DE4DFB4C59524FADA4573E16B447583570086AB2CDA6AB5DB39285E29FD756BE486814A61431841B88856A38A3158C5145938AC7188CFFFC0A9EB4769AB80B9B48ED2CC25C950D9D25491ABEFB1A68DE6E3D2647E0B7CDA3F1953D1E62487EAAE34DC8908263092D553C3B623974BE4B61CA1A2AB4CDCB12057F85784B2C2B2B9E2DC22B0CB9C05670233E176C078370D615767D46BF51EAAD12D260B6F4E13F34A1B7EC866F2DA28EFB8DC46D637BABD08EB882A2FB2E1F0901AC5EC44FFD21495FA2618CDE7D05FD06C48428907DDAA002BB25B53A2FE19C7DED64FCC46E8728C97F121DEA2F4143DF602BBA6E6651F398A5741B514A947BBD964370DC8473B540139BDDE9E669728B2E418912F47C469B50113820019A03A456FFDF2BE3006A7DDC6BCC53E665061EFE5A2CA3C66B722E9444F08A89CEB62FB4480EC40E826232F920A75344D0A5215A7E5747F92104986A3FC06D633606AB64167D9DB8F592AF0E1C3E7642AFAB1658502788A0A723DA614D48C39E69301CA2A8CB30EB0FB23E866F385AEDF2293A6DA85CFB8C8AD2785EF8D5B0789E3CBA9B04BBD21E693A86E3004BDB20C5CE008180940DF1FE31E18374ECFEE52DA0F05255FA54B76FD4CD6B86A43FCCEE1317099C162D661BB7054AFFAF8DEBA4736054046FB46D863D6FD999DA5E86C29770F3FCE908E5A6CFE2AA46382D4809FE23FEA4515C7ADA4FF6600A0B0519C4665834D0AF596BDC1BC90AB26491D6C01DFEC98E71C97B6CDA99B9E2FEEB41FA42952D94CA3D1025C75F9F78709EA4D9B6DE786D99826E48731AF57ACDE21D72F7EB9E2504E1FC15BA011A51DBC620159FB76F6F08257CC38E17A989732F7F315DC77E210B1BF4DB1C063E933CBE87044483E2E18600AE5B79BA20FB005E9737681D1D7C658CCB41C0AEC4811F6DA34D7EF3F2D9555A9F7BCCCBA214CED3F28112DA20C54B691274F7B85695F5FA0588DE1632DB4EE601537938B618A0163C7537C54B9F98604D59641C0F28473511662B8B9541A0BFF5B61ACD3285092850C5B4FF27F016ADAF299798F7707CDC329CACA034665C5B1911C4EF5AE2B8E0E1F6A0B5DE165789B2CCBE6C271254E800922F5925A65CFDF49164F405BB913D069E4126743C7C4B27A9EE09D3EE724FCD08652BF143C21315E5038985A731B216D204C30A4B767E5757DF8A97259424895C2AB9B9D9F6DCC745F26A1BBFC68EF3BB63EC5EE7938975DCD22250AF7D1AD7597D10D02D966F340812A143B802D3951360B82832F6C5EACA687BA712FB04244D04C06D3ED06E9727A9FE49D614AB7B20748CD2B254AB97726704CAB1C65E5BFC6E8DD82BB7C402D34C645032C1066FB10DF29047C43909EC6AB80CC46632BE25D8C82059A9869EA72044BA5E34A1C258001598FD59EB46146580AF9901BE69D6BFAF5304DAFFD60BA54F6C3A3581AD3A2D12E27381B1AA546FB10A0C30E230A0EC8CE0CA02CAFB3B432594799357E3AAE581E539AC323B528758CFB1061A65DF3EF4B2A570B7DCB2FBFF37A20C61D2316F96691AF41AD1BCF595125912F12D48DD4E3DC5DDB09EC7AC7F70B0C922C55A09F090286D5DB55A485147FFF7CE3ED2EA576DB5A48A94836778F1084A3521A0AD8DF5A3C3545F5D915C9F6F950E4126FF29D19AB79C48A8BC8730BD47AB30EED807CBA4792B24564E51C9E97B3DD23B8917BA9A5A628F3550AC37D47B59D182C7838287028808CF3836EE92450F93250302A26B8441EED3378D3DB3C6B4843C2E859CCCA57B9DB66F8EC99549B5A8B5106311C28BA6C2F2D351E9D566EA091936715BA8DF54FE30072E9F94E89F84DFAC4C77E78145710D33DF3C73048242011A5AA3A109608FF37BA97F44AA5A527F83976DB2CE58233578D8AF46020B0211E3A4AFDB7509A19F5B5157F00E638DDC85163819F1F0B5DF7F37EFC7FB469CEE239931E9C8E1DB1458C0859166D6BD26434B4F525599F75D6CE5E53EA447D90EA496DA62EB866C08903611C56B7F52B8C4D21CFFDE39F803D79892FF637A3DD39A2B9E73605EA63F1D86A7ABFB9AEF0FC674A856980152ECA93CC6CA4DF6525443F2E65A975B3A1D7777FD61D695632F261CF6F5AE4C45D6027A522D8CD45F56CD06585F27FDE2A1274935D606430A1D4D4DE7E683DB68A1C3F21873653DBF31D74D42C5562F2D515E50ED7DB8A7D7A53A85086C155954642196A58DE94607C8FDA62CC8CF2B40DB6111F8047FFB3878FD1331F16DFD64AEEF39CF2DFF49E3A1A07FBF9466D32DE896E810836098171421095D1342B5CBAA7AD6A1B53ACEBE5E8859CE7AEF191F99AADC801E2994FE72E104922C9E395C1F753CDD7890C312DE8BF098FDBA1766036D00988FB06C31AA30960E8D78E8EECACFE11E1C5DE72DC62454217CB82BA0F84E021CC22FC36BB940835B49463E3683018F1EBFA4E29FCEFF768E17FED84C7A221BF85BFE2A217B22F2E077F43E5A77AC16D1478798E1115C22719159FC79A232C1D7A550B341087172950448853E12515901C36F2DC3BB5166F26A51005BFEF6ECF73A2E17CC22E32E0D2F71FCB97CD463EF0A035F4AD2191B9D0333DB778E87BB3409C9C824D2125630C49A41451F38AF2EE08D75DD055D8F8B523B7CAB5F7FC1766736349638D9FB6F519CCEAE7F0B1F407BB2D39143272A803B810D830A06B149FBC9736B84CEF4D6E07B98CA9909BEE07776F2733D4953F2A5FD4AFB909836E4C2F581199E65B1D8E5FD9A288700F8CC706FB5023E43F822448C30F658C88AC77F3152378D806227390EDF49C6F2B082B779FC42088BE9F7E14C3128748EA43144F42C71E8D4EF2A8E461385E63BB5B09DEA2B48896A8A6EDDB87F7815A9B979BE077603CACFE75C776D0369408F0FC1712DFB78FC63B6B4DD379053E3C6D20B40CDED1AA5C985A191A571D045772AD88DD91F498A8E816D8E910D56E8303DEF8C1C3EF22AF443039AE138B825F66EC64A98E364B5F1FDC0E290A7CDA67FE4F7A7F98C036E6B169ECDEEF504940DC5BAC179DDE7E7583C4D95740DA4CF1AEE0B143AD814537706610BE7C02F62EFA828BA00E685D9E59B2E3A19438107A8F0720E3B6BC6EDACBC28C81800AC478752FEAB516523F6F2F196282830E5C7F93FAC07F4B53871A9D3ACA6753611380C8EF40FE7FA7F4EF64AD047078F78B9BC050C199322010950F09F9A374F4BC65DC892A367F2E55271F51595CBF0D1B25D85E499ADE715FBEDE44F56BC0E12CEEF4D1A77011CD5B86C533DE0041DE806F28C3A2D1DDD407310BF81AFD2768CA92F04C2E439220AC01E3AED4F288D51A80B693AD9A709948CF044125317A8D8DDE34504C1311F8825C600402C36191FE45F0D8D3E78F052F2D7B7EB0D7A1613E96C2491D404106EC2245ABEB8EE655CE8464ACC43D628951C25667E51AC563E039CF9BFF3762A79C4BCE90CC0C83F9C54E4CD5110D6C4B63029C65B2327B6B6BA82809FEEFC2799F2C28B71E819F2B8E6C6B2A96FA15A9A95850EF37B38FB8875D7087DF019E66AF659B58B1525011A28E8D58C07241F18D71A16E82DD12115F9170151C16ADC670DD94465840D06810371BFCA121F593336E167395F4E7CCBF00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/SWJUSA+Geometria-Light cguidfix
/F1.1/SWJUSA+Geometria-Light renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
2 w
0.60000002 i
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
0 375 m
749 375 l
749 0 l
0 0 l
0 375 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 0 375 cm
0 0 m
1498 0 l
1498 750 l
0 750 l
0 0 l
h
S
Q
q
36.451332 348 m
262.14999 348 l
262.14999 291 l
36.451332 291 l
36.451332 348 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 36.451332 348 cm
0 0 m
451.39734 0 l
451.39734 114 l
0 114 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 65.412666 331.08099 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(!"#!$%&#'%\($\)!')[ 22.464000 26.892000 25.920000 22.104000 24.948000 26.496000 9.756000 25.920000 22.932000 26.496000 9.612000 24.948000 26.784000 22.464000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
317.57599 58.5 m
424.43332 58.5 l
424.43332 18.5 l
317.57599 18.5 l
317.57599 58.5 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 317.57599 58.5 cm
0 0 m
213.71466 0 l
213.71466 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 340.04599 50.581001 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(*'+\(&,-)[ 27.900000 22.932000 20.556000 9.612000 9.756000 16.668000 0.000000 ] xS
0.5 0 0 -0.5 288.61465 341.5 cm
0 34 m
(./0123/4564\(&780979:1;126:\(6<\(!"#\(=.>!$?)[ 30.492000 21.852000 10.116000 15.228000 9.180000 18.864000 21.852000 12.528000 18.036000 22.212000 12.528000 9.612000 9.756000 32.904000 22.716000 10.116000 20.448000 32.904000 20.448000 21.780000 15.228000 21.240000 15.228000 9.180000 22.212000 21.780000 9.612000 22.212000 13.536000 9.612000 22.464000 26.892000 25.920000 9.612000 12.708000 30.492000 23.940000 22.104000 24.948000 0.000000 ] xS
0 79 m
(<64\(&:194$649\(@/9/9\(.2A4;126:5\(;:B\($;3C9\(D63;021E)[ 12.888000 22.212000 12.528000 9.612000 9.756000 21.780000 14.868000 20.448000 12.528000 24.948000 22.212000 12.528000 20.448000 9.612000 30.456000 21.852000 20.448000 21.852000 20.448000 9.612000 30.492000 9.180000 22.716000 12.528000 21.240000 15.228000 9.180000 22.212000 21.780000 18.036000 9.612000 21.240000 21.780000 22.752000 9.612000 24.948000 21.240000 18.864000 21.780000 20.448000 9.612000 21.060000 22.212000 18.864000 21.240000 10.116000 9.180000 15.228000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
617.67535 85.5 m
724.53265 85.5 l
724.53265 45.5 l
617.67535 45.5 l
617.67535 85.5 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 617.67535 85.5 cm
0 0 m
213.71466 0 l
213.71466 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 640.14532 77.581001 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(*'+\(&,-)[ 27.900000 22.932000 20.556000 9.612000 9.756000 16.668000 0.000000 ] xS
0.5 0 0 -0.5 723 24 cm
/F1.1[ 24 0 0 -24 0 0]sf
20.496 23 m
(F)s
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
494.34 259.5 m
587.216 259.5 l
587.216 219.5 l
494.34 219.5 l
494.34 259.5 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 494.34 259.5 cm
0 0 m
185.752 0 l
185.752 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 520.05566 252.08099 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(D&*G)[ 21.348000 9.756000 27.900000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
494.34 199.5 m
587.216 199.5 l
587.216 159.5 l
494.34 159.5 l
494.34 199.5 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 494.34 199.5 cm
0 0 m
185.752 0 l
185.752 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 520.05566 192.08099 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(D&*G)[ 21.348000 9.756000 27.900000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
494.34 139.5 m
587.216 139.5 l
587.216 99.5 l
494.34 99.5 l
494.34 139.5 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 494.34 139.5 cm
0 0 m
185.752 0 l
185.752 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 520.05566 132.08099 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(D&*G)[ 21.348000 9.756000 27.900000 0.000000 ] xS
1 w
2 J
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
0.5 0 0 -0.5 671.104 239.5 cm
1.498 0.5 m
1.498 307.5 l
S
0.5 0 0 -0.5 587.71533 241.08099 cm
169.274 1.5 m
0.49933332 1.5 l
S
0.5 0 0 -0.5 587.71533 180.08099 cm
169.274 1.5 m
0.49933332 1.5 l
S
0.5 0 0 -0.5 587.216 121.081 cm
0.49933332 1.5 m
171.27133 1.5 l
S
/Cs2 SC
0 sc
0.5 0 0 -0.5 308.08865 253 cm
0 34 m
(D&*G,$-%'\(HI)[ 21.348000 9.756000 27.900000 23.076000 16.668000 24.588000 30.456000 26.496000 22.932000 9.612000 25.704000 0.000000 ] xS
0.5 0 0 -0.5 344.54001 150 cm
0 34 m
(D&*G,$-%'\(HJ)[ 21.348000 9.756000 27.900000 23.076000 16.668000 24.588000 30.456000 26.496000 22.932000 9.612000 25.704000 0.000000 ] xS
0.5 0 0 -0.5 36.451332 150 cm
0 34 m
(D&*G,)[ 21.348000 9.756000 27.900000 23.076000 0.000000 ] xS
0 79 m
($-%'\(HK)[ 24.588000 30.456000 26.496000 22.932000 9.612000 25.704000 0.000000 ] xS
0.5 0 0 -0.5 51.431332 255 cm
0 34 m
(D&*G,)[ 21.348000 9.756000 27.900000 23.076000 0.000000 ] xS
0 79 m
($-%'\(HL)[ 24.588000 30.456000 26.496000 22.932000 9.612000 25.704000 0.000000 ] xS
0 J
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
0.5 0 0 -0.5 275.60147 231.80739 cm
110.95007 184.22955 m
111.92689 176.09869 112.42955 167.82173 112.42955 159.42723 c
112.42955 95.102837 82.915024 37.681141 36.706718 0 c
0 41.02961 l
35.013748 68.583969 57.502884 111.37578 57.502884 159.42723 c
57.502884 164.61646 57.240604 169.74434 56.728596 174.79832 c
110.95007 184.22955 l
h
S
0.5 0 0 -0.5 126.33134 255 cm
408.9725 230.30232 m
396.74255 332.10138 310.18588 411 205.226 411 c
91.882812 411 0 318.99451 0 205.5 c
0 92.005486 91.882812 0 205.226 0 c
254.33057 0 299.40714 17.268978 334.72916 46.072773 c
298.02246 87.102386 l
272.46982 66.993523 240.24666 55 205.226 55 c
122.21797 55 54.926666 122.38114 54.926666 205.5 c
54.926666 288.61887 122.21797 356 205.226 356 c
283.05173 356 347.06189 296.76962 354.75104 220.87109 c
408.9725 230.30232 l
h
S
2 J
0.5 0 0 -0.5 129.32733 132 cm
0.49933332 13.5 m
54.427334 0.5 l
S
0.5 0 0 -0.5 147.80267 215.5 cm
0.49933332 0.5 m
45.439335 33.5 l
S
/Cs2 SC
0 sc
0.5 0 0 -0.5 344.54001 201 cm
0 34 m
(DJ,DM\(N&+)[ 21.348000 20.592000 18.036000 21.348000 20.412000 9.612000 22.248000 9.756000 0.000000 ] xS
0.5 0 0 -0.5 494.34 80.5 cm
0 34 m
($\)!\(>6002:A)[ 24.948000 26.784000 22.464000 9.612000 22.860000 22.212000 10.116000 10.116000 9.180000 21.780000 0.000000 ] xS
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
0.5 0 0 -0.5 382.48932 64.5 cm
0.49933332 11.5 m
8.4886665 0.5 l
S
0.5 0 0 -0.5 381.49066 66.5 cm
1.498 16.5 m
1.498 0.5 l
S
0 J
0.5 0 0 -0.5 326.06467 119.5 cm
0 0 m
158.53271 43.874294 111.2383 123 111.2383 123 c
S
ep
end
