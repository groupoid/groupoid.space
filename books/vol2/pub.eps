%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.6 (Build 17G65) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 750 375
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 750 375
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: LNNBPC+Geometria-Light
%!FontType1-1.0: LNNBPC+Geometria-Light 001.001%%CreationDate: 10/10/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.001) readonly def/FullName (Geometria Light) readonly def/FamilyName (Geometria Light) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -75 def/UnderlineThickness 50 defend readonly def/FontName /LNNBPC+Geometria-Light def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /P putdup 34 /U putdup 35 /B putdup 36 /L putdup 37 /I putdup 38 /S putdup 39 /H putdup 40 /E putdup 41 /R putdup 42 /space putdup 43 /C putdup 44 /A putdup 45 /N putdup 46 /T putdup 47 /slash putdup 48 /O putdup 49 /m putdup 50 /p putdup 51 /l putdup 52 /e putdup 53 /n putdup 54 /t putdup 55 /a putdup 56 /i putdup 57 /o putdup 58 /f putdup 59 /r putdup 60 /Z putdup 61 /hyphen putdup 62 /y putdup 63 /M putdup 64 /u putdup 65 /s putdup 66 /b putdup 67 /h putdup 68 /g putdup 69 /parenleft putdup 70 /parenright putdup 71 /K putdup 72 /seven putdup 73 /numbersign putdup 74 /one putdup 75 /two putdup 76 /three putreadonly def/FontBBox {-412 -220 1438 923} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF1D53D6B91070844A9B74E43083EFDBF34C5770D328A6B574F14FE01D76EF86C53820A66FC19E082B068B33DABAD55F1C291FAFFA23ECB9F8EC0605C0A9E3B85544AA0CCDCC141DB39B406D85EB4F2360D566193F2E4304400A6D429C392CC8F67A0EA0F770FC6BBFBA1FE0DC4B2CCF7B9E36939F6213CBD9A315109B45B3091B384BEA5A47014A2251E509D4D739D949CD8FF6A2D0AAA50CBB2DF70AB1AF2D690BEE8CD1EA67A213BBCB1A9C57AED5B7D838409580D19207BAD2DC663A48E88F7C6E17A0025278F0405846D8AD3917CD695ABD9ECDCFE9388A58E529E9A93F37FBF1227FC2072DA48F2A5F31C39995BADB5A87D269011036574C925530BBE3226885E9D99B3F93478CB75E9321538D721117E0A089412DA8B005FC3AF2202B2A2FD54FF131CBCB943AF1C970F3DC145CD6BFFD9AFDE174D7BD5E7D0E479B0E77B2100C2D5E422B61B283B2A57CA9BF34C2F625C90F35222BA07D238F445A9B58A5854C27A8EDA066F35F20C41022D8F93424D89E8E9901EE6DFEC6CE807EF022E3CB6D16D563BE808DE64EE6407B9D5E5D5FE57D5585AC7F0B830D9F8D6122A2B107C4FBF10ACCEA3806597ABD5FB9B0FF9A2866E6B89283E06449107023782FD7CEC7D7F35B42A0D09B3A8ED2642F006A2C7C9F3101FF7382FA894C4BA1DF6843E0D1B56C6A97A070BE5BE672D65F852A979C0D40DF44F5C1E6A26D5AD434B03AC82FA3616C69D117B1E2275967675DA21D50D273ED980F682273177C404164F941D034EF23B86E62781A610947BB447654EC51FCD2E773ECB9500D63419B82261525DC078648856F7B90929BA453776ECCB2FAF28873AC0918F376A43C9ACEE3275325302C24E28A0D3AD4D86ED5554972695179D55EE1CDCA15400ADE9E7597EAA6AA248FEA0205DA8FA0B80DDB3434FCE1E45C87B10C4039759BF648571B3EAC88F401A62397B71F305F33DCD83B92ED4473F8EADBA526FD009E527F19970BBCC4E877E5419C4455E69C47FA1BE75FC09D8A5047F94B01CC6124D7C9D8B8DC7FE0994D75547CA26014E5DC02A62A721DD845E076E33DBB2181F43631B49D8F52CE2B2B7D58F418E1FA3C2C80FBAFAE2ADB52FAFFDA55283EF33161E8BB3ACBBA792EF4C3E122D4EBBD9DE6E03334C27742E48C0EB23AC6BE63886FABE5F61C2B1516A7BC72E2B3881A69E029E672001F9836F6D16F2A49E887BD21302FFB58F88874A3AB27DC26EC1123DBF9E8464FA5AC612A5865E25405DAE116DFA0886923787BC96B6F19C973B4B6B67CF8382FF52CD579248C06215F22045F015EE66D2FA73DB4841247F023C06D64B8C2A41D634668E5B741FF1073454EF992AB85E28B409971B39B8B3F0AD0A240CC890739DADAACC2F4D3153C183EFD4D1CE515508CAC76EAC281BF61C46D54FE452D43F700EF89E7E3F61069C36341ABA36EAB667C27EFF4CBE60EA3D00A0899FC68F9187ADC720D8AD15C4C2DEE5654E0D246D34515B408A5B580E54B11C6B2B3B6F0F283549C79F5885D6C79986B756E2D5233967C1CD79DF1B497261E4EB90473D74A63303628F4530033AC16AE9ED1731F7F6C24973B1DC5B7F74529AC8D96D665AF24E0301DCF5B8BB3282239C026BDAA56EA0C790564C3A31CE860B46F643D5D7801667DF3720301A4657947B917A9B695DAE33011CD9DB550917B741B931C3E6CE8CCA93F365A0C2F2A4948AEE2B51336A87CDBD7CE7DAB04C443AB3CA48D93A5AED3065158F26FD4D19274FB30243375A36D7342098BAFA285C3F453C415A58446DC087BF763A392B1CAF8677A29E2BB9C793F5692DB647318BA2411F83166A368F6ECCE1DAECE46F4D2321F52C86EBEB2A7EFF72F73A3BDC8CCDE7E61625D98EFB2143837F5F57A061660BB0267083D89051AF8A460A5FC8AC3893712B7D4C0B98808608B318CA523EAA4D60EB93A2A66D2446A17ECAC95CA0419D9896155A26BC02E08256762A052E6DDC48C0D2B9674FB15A8412F7BB5C5351EEFDFF617638AB8F256C12E71C6FFD33034726F0A9ACEF05F055A5EA3DEAB7A271113BA695B53593096C32A6990696898BBB11AD2794D6A8CE270B84CCF26F80D48A9A9CCA90398A939F500D2D45D1F69C9B4A173503547E7AEBD8D1677F77BEDA5033230B44BBD1622C1E42B6BC4E8CF81862456A7757BC62CACDF01B488E134274269D0851D759710304B43604BF5D625DF67FE06F72AD125E23BCE8FD66DB4AC67B59046A616FE407931154C9919530405E119BE8E3D2B065226EE94B09D7D38B5C05E7FAB97105A236B7EBEABDC1C6E3422F15D71D87F253C6CD4A917924A6EB7BAA9F68C330141E50113FA304C60824FB59623A7D7F0CAD08772B1C50B64288F1D5BE930842321D15CAF8D63AC3C6DEFE93509A4E92D54D7023493660263A36BCB1AAC905BD57480E80350D78DDD87E89B60191CD36E6B7A96CF1BC9C27E7D35AC32532C3C55DEAB0BFD5DE3D3C4CBD27694DD8E2E2A66ABC9FD75A71F3D0754DCFCB636DAB8CEADB01E504633360A4C17C986615EAFFB8FB141F31AE828829CF3F41895B06C3A5A896812BB8DC599CD90846988A9101CE334CE76AAADED44D97D9D78D5681AC294B45E7F43FBACA6A4CE1A5C68EC3E1D1B5A1F20E8E5A77847C6C18DC023D011E7FA60A734CB37A5330B11648B36FBF49DE737A5A50346C155E58B8D7AA26F4327B8D9FD5F71F8684A220B673F6A07531766D5A4FF176558007B4D280F7A5DFD33571053F8A527B58C79FCF1D55D720B6CD599C072095AF124551410E8CBDFD5DC70ED20C2390BB322B9FB0A1785A9582339FF030E210A331E0EA3E8083EB5796A81A0F399AA489ADFE4A2C0AB9684BC10E32C10A118F9C6EB102DD70997D41FF12D7D038B2E2BBBAA8D13AC0CA8E6A4B9DDDD0F720D620EADE33FECF3E33071D47C5AC7413A059F6B60C56B51C33773E130E0D4E2B1CFBC53AA72A61EEF3E9DC5A9E6F824E15E573949C6ECB58727942666EA817606E5BA57C4A611937F0761373A6D14D38B2117FA1540F03E748E8F3B92F3D7890AE1C1AF39744C29EE17F74D5B11A88123789EC0DF28D3ADDD5DB98BA12D6378E3E0D21156DB04757D113B7DBFD80055F7F4DF3D30F2FDB72E9CB04C3E47A683C5A4A410CEEB7F46E4F84D50DE717FA7C4E88125E26F9C4FF767E5EF88601497A45DC842B3A275E1B48EB1F076C02887FBFB7ADB96C5388B7CE2A3AF123D2B1491F96ECF22D7F8321BE1DC5952F790E0FBFD26DADD637965DD7993C09CDBAED400695EE476102872FAD3148C339CC3B1A986556D7DF58A04C90EBF86FE22DD93E163C80C44A3ECA2793CCCB53AF67BAB798B960618AB5BD015ED237B8C1758635F32B4F8CA4164D06E64065023F7F6D8DBB82D1E6E788B0C1C1F15289AB45F4BCC7A7FDF89650A648C511C9F9C5A7FEAEEC8AAC29D680CFA56E8F7D137466CD755744BA286820673CF28E53AA0D10BEFAB60D27AFB27C7EF2D42F57E61BF6DB6B1E90A8B71D1FB0DFC2F3FC663C3397F0149652A092466A22F7F5D6D81358C9F686090C2B1461A531D9644BD0163D1C02E8236659C0400B87797E571B00BF2AADD0EB0820EBE325AB3BE5A8D01D56F1B9ED875E9A1E99E724F409FDBF2A0F808FA8357494B1DEC414D66F7C1648A10CEF75F5585B28CC7421BB32DAEA7794B3148E32B20349714A4C7A1CE880210740883F789CE58AE42657B924890379D5471A9F94B303E6E890DBFB3A714240DB8C0D5029E58C6F9F474924A0698D48CDEF800965533833FDBE8EB59F6C44B848547BC28E1AF56E052E2B0E7F37B089ABEBE84AC580F91F0FD09439B5776CD2CAB63D33AA1466B42B785D88BC2AC8F954B6D1F292F1C6F689721F803334169756BD09A02A92DF5230D1689D5EF33031F93633BBFA8EB89025570B9C226299BF1CDBAF8EF68710CF6E7802C1AEC889CFA1E93771A27ADCBA3C9B7EFE6CEBBCB035AD6DC845C456ABE6C727DA41E4B74056466DD26EEEA6BC47DE66ACCDF1FFA65090F3830AF44234439F84348F55AC87BBC97CAF17E7D27B49044C048B811B1087D14C600B440D9166D322BC32E701683FF234BEC210699D65251BA6E9D593D24C6A1F4C938067DD19BC5AFBF361531172B649327B2F4CA41C6C2DD6AB56D6704AF787B3AB0B046F6CA69FC1FB262D0568DC5E00408F7CA039FF31267774846C3B8C31F42E549F4C951CA9768E4C65EA6B741E5F649525E53F72747B529BE47FD0431B5179A455A4BF8291E69A566F5C652215C23C52018EF6E5E6BA2E23889195CCB5789F1CCDEF0CC971A3093749ED776731EA5FC978FFEDADE007241B5D8E54BA43469CD11EE0C33B687F18B8696B260E8976E8BA45A565B01A0D93FE3E1A70AAF6EC578B5838D844C10B444632FD597DF84A09039E7420FEE21679550C9A66DB10C8543751799861C62D946302EADCC1933D3114B0D9D6178DBB9E478D864AA3867111470053D536D7735FE529D2E2C498CF5F19205B491EDE0448D9CF6FFAEBC19DD70DBE48F2D6715907358A83A25C552831CC98EED755E5B418BA03E6A1E6595BFE5EC276C008F267D0C58D1BEEF4FD42555F90F8C559B8B060BD927E0F0B8E9676D05542D0E55DC27DFABD22ED98098E352F95DC56A7F019F95C20FDC8D1968488BA4C1E482B6951D31F3B531E4E9965D004AEA7F3CE67E94FD12D4F07EF6E347DC06EBE24229E609200EA0F0A44DA02F1ADCE7F5A9F73515DBCB6A54B25CD3A1989E05FB8ED10C645AC820B0F87DABF38BF09AC2443FC62336ED161FF55B983D5A8555D643E420C565F748C543EB112D7F62325900F1DF44922C9B8F209930D6E44393BB06A995E571EE20D13FE7ECBF42DBB1A9AF6C68E4219B8150AC9C3EDB502C7C1C8942778CD1C57FB41FF099C0EF63D89AD68C7A1AFB26B8B51C14A06137DD7BD87574DEFC425594A22D444AF034A95D25A98CA88B3E2166A62D9B6D05225A5182C066997BEBB9644C8C3C0DDBD9EDE5074896B2FD8A4BCD7102D7C895C2F3063953BD2F34431DA0649C62EAF5F9010B4789B59B5B2447A2B57A36F28C96D0FD951968541A4584A89BD235ADB26332DB72F5EA502D25B0B45EE919A37F73811EA1CFBA5E8D1406DFCB233C0AA4AF91929DB9AE8DF83A154AC7721782867CD0102C4C4045E56A68BBFDE2B396F0749EF974A88D7D961B62B9B0E2CE301DDDB95C0342BC5FDF87538D53247E4216D5BA50C4AB8749240891CFEEBA27933C9552F4803D10F3F8836E405657D25DDDAAF69C13BB8795039625753FB0847E59358718410AD603A36FC2FEA5610C26BF84B23646F60AB787D3A36A9B2C36549B9BE9BA3C9E0005635F565A4AC97E4252C61DDAD790327E0CC368F867531813B2117394096222C23136C690C460B09F384CDA54E438B992A1FBA5B38016D6DC01FC86A162FDCC59C596C658FD743CCF72B4A998ED2E89433B9455D09F2D466E259EF2E51ECF8425C980500DA912D06C0088A3F66266327466990990C451E70017FE8126DF2BB8945D55F11AFA922EB36AACE926BD8F5F095EEF3DB1AD12E1F8B70507FEC8723CDDC20BA36459DD98EF3AC8E75ABF29C83326BB04B3602C0038AC25AF55A8E05F5966EB72C00B939B30D44EEDF1DDA94BBF401BEBB8A49D4C2EE99019942125EDFB2A94CEB247E2A41704FBD304A01B63D50E883D469D5D59C84F60C906263B3F2A6CC52899DB544659A5646ADF32724B93E5B45D706B45CCCAEA0E38E91D023B342263F12C3B694BEBFFFB031D6D6BB6535278E2D21E9B60CB399C85844C47BAF4EDF16B4EB8E084AAFED59E9DBB3052DC7B4970DA07AAB6822ED9880FE68A4D3725E95A496E197A56B9E25FE109B7F4E940EA1AD28A539823CBA9DC2E6677B64A9262FAE474B951FB250A6D02E638F39427F93DD21D3DD6736908041994632F92ECFCC9BEDABF7979E77105A6726EABA5ED79FD4C29F86A5C930EED3AEA4DA779D17B5592F36271D5180778FA8E5B3C44A173FEACE2D2C17435A56025A9E001AABD08B73EE6AF76DA088301570348C0EB1EE3528BC05623D665DCF59B17C55F9C95CE7E37D2357610E2AF8AEC0AE804FD1AAAA586839FD41D4914BB34D2805DEFB1B1741E2337F722C9A57A81BB016BF303076E1BDC56F82A3EE50D433E435924F81E8DBD5BCAD5BE5A42D9B1259B949F24C91AF6209CC0799C965468F2E69362F29262C97755312E4D099E2F4140A1F650E4BB1439275B6E5331F00633CC8E1BF00FBD6DDCFA40262BC73E44D014B87300BB41802E50D3EB98CC9C0520FCC1B36F6F353CC50705003EBE5C5C6B0ABBA6DCBAF3B9585FC40989B9E69A9CE97B117EF3DF597F4DC43BC5A812518E08C7FC6C68BDF0A95A4F237EA93CE882681CF7C8314200BD52A4BB197A4A6D39388D3B0D51350BAD627260F520B2C2C2500CD75B8953EE34921242BC6033E4CE74463DDA87484FFC8FE36523B2BD07FE95D36E7313CC62260C1040AFFADCFA35151B35C18495B2873574E6B3494D4C56622715DD6C939356518E5C65E330523E9DB3A08CB35BB7A791C061367B5FA5B6CBAE764AE46F2AD5A1E9B44501D0650C0A20CF69A8F6A1DD73B3021E4560133CE02C075AF3DB84B5CCBAA8A2BAAE3E4624C759C883243A4E5FF6904AC0FA5A7D8109ED0C9A4272F3F0FACB6718D5FB2C599CE4F599DBE81DBE3D540A4A99A3FF184133C876FE68077663F23E810B953DA16F154F71FB420D2E4327F8D1D869EFD9338CEE76FCE535F3D9A8582731979F4CA7058E489B4CABBE2F39A374415B62C1F5F8E31E006D6ABC736057910A3729AC60360CEE1B2C8D9F773363ED24C0C6998832D2AA521B5271CDB860D4729F7061A1D2AF9901E59AABD01F27D909693AA4AAFA7C32509E95153571E50E5D2B6A05A6E4E139D5B5A12562E6BE814317D05251A9C0E892142F201432A7D07FB389A85017F4BF99E1C416B3BE9FA157D9703D7DE43A5B3D3A3190C3E827417CAA761070C63E7790F8054CBC2A8CB5ECFAB8CBD74A2208974A2425BA2411922DF658CB27533813108DB1DED21A8419480CAC94DA3320A0E826F84268987D6EB437620D356887766733551E13F764F626792D19EFBB9C1A5DE550C906552E7FB9D5AE6CE5E4214B294124F6A1E9688EC72B3A09EB135A6AD579CB0407C5EEBACEF81CDF1F69BAFD3A941CF98563B94FD47B3B1F3FE4A6D118BEF294537E6EB19662FDC8E94D081C2F2A56D68878D180134EA44FCCA5EB7341460B6EFC27E5D12ACB5973643B1693322A5B170DE76962533EF1700DC171A478F1938803B8735A1DE230078C1A8DC319877083AAEC7C0C7CB70951ECEF42A4A67EFFB6A65C4585338A3F0DF11234EFD29617D1FD5C913B1B383D3C4C1C94CCB3568BCF705B97D9C535E217B04A43121737F373B4EFDF08768D68F34D1DB92CC01F32B0450AED0EAA60F72C198F51D1BD6DCD7D5BF3205A3817121F3D3B99CB5B82A904F55EB2E83AD5914BC0ECC61613DE2702BB541C92D8CCFAF99D5C52E3CCA2F11840594A83F3C4BCE01A99D5F09CD446CD6591849A1ED676EFA66373C7F0F7204F537189D9BF639723047C552B31067387535FBF511E344A272393B4C5D066D8C35DC8E43680F2D37B1155DEDE033E446F1A44621E8830D2F362301804DB8FC7F06D0325A43BB68902037C7B2D2170CBAD191B95DE101DD9151FD106684F84BB44A8A259C41E39C6C544FD2CC0725BE1F6E65A3AC872F9A5155A6E427646AB2013AFA59AC793E356178FF7C9F1ED545CF56F4A016E1FD576F2B17F03819138BFA8DB09A7043DA1D8F612DD74224766183ABBE7DAEF9717081010D335C97A58FEAC121EA7678871CC51BE0EA84A55599770732EBB5A4C75472552E4933F29DAD06E09E5C9B20DE36DCC0F40361EC44FBC02E44B7B3158AD00039AA54A2C113C8D2D5BC6FD512165E6A7718B33550D3CEB6B5C0E9A7B5EDA261865707C2A385AA68EC7A69A8821E04DBF2DBF167A6703E140C1FDA7D24A3FDC8216852704E811B5528ED777C42E00C0DCDF73422EF3A85097A551ADE468B7BFD3942F40315901081B98FF32C399D5B5CD777139A9F0D16B894F1EC1DF9A7083494C099987BC6A149642DAC62631E67C406E169893B08D55EE10BFD7D82B3F4011A322FF661C577C64DB966ACA309AC40C1571646D1BA54F00BDB7FA8AECA95ACF1FC875CBE58DD3E5A75A745F93941758D856B4B5F957AF6757B08E6C473183F3AC9A817E3F22BF6B1329332DDE666A13DCDABB57DAD779FF48FA8BFC2984CB5B7FF9931ACB5FBABDB0D8F9223020E630CDBFE001879EB06B0180574DD6B5B38926A15C2531DA2832DA0B273913B134544EF2DCF7D137694E1FC7E62FF08802B9930E77FFDFB22B80B360DF259A925E4F3C64ABF38CFD07D710A041451067D305D6E086AC1011657F62AC7F98C08CCA78B9EAF34677699669B4E04E473A246226D0FA4DA2E4E67C7C007C9D8FC83BCB26A2996950C7E033E093253C67DAACA9AE5CD1C27F87B0DE5B1B12E0E479D3FEF85C0093170E9D4933501461FF2136853388960313448CE4EE5DB0F442A606924DB922BB6AE9795B73342C6E3CCC0402B06FE87BD4D483D45C6C9A91DCD4741C4E6D86B8576E3B4FC18267B74F5BD2E08C95D4F34251759F4F1124070149F6BFCE1F9708BD9FE2F5615DEA846519BDF5CE65B2E1A2E7194A12BE4723088A08D91BF384032FDFF5F9C602EB47F95F057DC82DFAD06421DD534F735EC4A07C65A1D622D18E66B9D18F8D91B3FF8D4ED4BCABE6334AD7CCA653EEB60C0CB5E77D7A2EED4DA6A40A7FB8166E25A5F5C5E63A8C70DBE28EF227AB55B24DD1EE0C8CCB22170ED501A57873AF3B0F6FB93A096E8DC711F38BF1184E8FD3E037B1115A50D188E37437455EF9112421221CBD48D0F79378F5957496AC747E56A9870969D3D746A808146A5F75B23E57E53E2EADB087505FCEF1F9B01923F73665B1F2319FB3C3E668D50DAABEA90DA4932CB16174497F7898678945C070F95168C7DDF013A7E62104CB6E63F2B9813C32833515CBB87C60F6CB2B1AC0C93EF90ED507C9167682F249AA69301980A671D627D4D54C2DBDE6FBDA21B8793772F6989E90D6A874B10F1FC9EE1C0F3C8BCB7A0026F0478A8ED1B58B93E148EAB2FB3E1B648DFD5E9E842E06CE3A7D0D021B1560B30D6CB3742F4F6ADAA6463CD2D68CB9EC68CED1C857FC7F0772FB577C30BE2C7486BBE20AF14D6E01839732725C78AF2DC35E108481E853CC710149AAE804FCF1DD40A520A50FFA4A2DE95CD6C258B763A5DFF0B1395F800FC56C5A429613D665E96396F9C71635104974EA68221DE59F644AD8B0778ECFB4E28185521CDAB7514BAF5C9F6914BDB5DA39AEB38C142F12998848810964FF5E53F25A87B0D9FC2EA7FD5C089F313CE2962141C7F56C27BC5CACE47F612FE9693960BB73E5A99981124862DDE144352C4DEBB230468DF9E43C882FF245B603DE081AD8CDF9333AFE49C8ADD595935A9C17D0311E471D0429748597EFF4E17390520517DFF65D936C7A143647D045FF1D8E90B72F48F40FB5B4F86CFCB74FBED92F3A3859487A7CC64FA693BB446A8618F7BDC0667E3B4214C45A34F38EB4BB5C248DA65CA2EB4A4D5A8B3819032CEED6912DE0B405805F4261124DC587C5DEFEFCF4435BAE31C3C6A06B626D52C90D02DEB286D56E0F2D73C4E0FE2CC8D60A9094E5B3C9B02B3C9436346A9357642AE1E2EC8F7A7608D1046A8BF3E3EF3F6546E7A9BA003692F25C5211EF4D33642F5BC6ACA58299A878B10A0232D31E69FD6BEEDB0B7D8AE9925C9AF8F7913C514E182D6A143527EA4EE7A36CA0C7AEDE1FF6DF341A828BB7968270D76CFC8F598FA44D009EF5B18F4060B3D925F75C04E66D30D2D785CF4F1E840D5695D70DCCC2752DEECAE5F8F2000874FCCA37DFC34422DFA97F997630B14DCF6E5B882E3380369587D9FA5B2EA6C20FB29CEC62B4805ADBF494C0A982A8B1CE3452EE4244F51014203021E489DCCDF4F607F16D1757668291893ACBB96058C5BF189BFE4B8DFBBAB5DF7DC3E7EA2D12722F23B4F3088E7E6AB1F516349BB0ACBE33AEF290EEAEB54DB3A08227BDDB7450DEA27AC29C5E6F753A4E80429A8AFA3267BC65DAAADE6CB0EE0DDB7C7DED88593B76A1C2B0861CBE8A9827B3F1E4F942122918B7719522167148E69E84A67C1F453839E632C87895691BAB3E5B27FA259E619F970D602FB6D02F57F18864DA201A6307C769312F2A5AD8EA53304D2FD0F69A53329EB192EDB2311FF24B7304D494F888D0C2A2DF0ADF856CE797871B5EC64674D7BEDBCE03C4CA8ECC435F4BDFE33D392A2C3DFB701F122902180EBEAF2F5A8B8B735C214614FC1029B7E11AB5889A0FBE783F5E3BF99F874C2E7B53EB8B39CA3205034A6712EE1C07DFEF29F318A5D042A20640E12FE5FA50C45A06E44F6C22F7AF9CD111CA5FCCCDC969E8E612828F73F92E08F666B266105587661F59DDD2303549043EF81E4BD35B98D4945EF74C5EDD4758B4676C9561B269BDBADF9B44AA6CE0190B7FE000C0B2EE79347DA4123C8E7DF73A560A9D9402C124764278EB97546CAA0E6E8A60B0D35D7EEA4892E6FEC03A14D2F8B98B1F3280F90A2FA781FC83D63D4C236B0511E6712DDB7DBC59A40C7BCA9D2D10CD9F0E9333269157D65B91AA124C80B19D88A080749C8E1A17F4684F01F6D81823F1A3C0D430143A12BBAB53C25F48FB1C2D92B13A6C83A6AC4DA10BF5DD105C8A8E706CF23050374D37EA91400A07E240AE478D54953DF6C9D65C6E58F3E690CA022E0215F665BC57249CECBF21601EF10DBD185539DB9743C93FCB57098A0F2CDD0C929B55A135C3B1A2D96B937941CF7FEFD8CCACE51D39A3E17B165587D76B4B2CB9369704CE85FDEE043C3D1834DF69084C706E598718E3EB8A4CF0F45609E621CD057D0D88F7C0742CB6BB699BDB75A9C0F68783523A47F6D2C374EE37057E1D66D1DFDBBAFA29C5F3ADA289703AE2BE97045FAAEE5ACFF5C847E7D933DC9E1D94E7D51F38FC4E12554BA8D03E07F965945FCC46D2A7E42652461A861A53AA574308A7B0C7D7784EB868C4987222ADCCFA019A2A76C5122300402FA2DE2BA36A6147DADF2B286B4238D55DF08CCAE51C1668F945E33792493416A9FF49F08EA3961649C03094FCEDE86CE7C4D0A07DB5B7453B0E5DA4760259D52B2013AAA57784AD076C98C7A472EF027DD3A90DC433399F4852F4347D9DDF081D30C0347691CE10EF53BF08D0ADF738BBB690E54045EC0E3B5A24EB9D51D7CF582120472F0B9F48894B6DFBC249050A837021BE0F46093F955333E261B60AADACB6BD5FDF199F7B67730E477929B072141D1D57060116B2F99BCF4E4F25B4CCA825DCC6DC5F8000F7B6C0570B734914411A2F60B6542A04921725C2A40F5B3175F4A2BB60E07027EF863F471545C3CB492467E36660800838A9F957DEAEEDB1FAB1A59991A6310A1B10D96E3FDB4E0080A239BC543466333B9E8D177464B42B797340046FD5BDCA3C2B1044A0DC4E68923E55B85A7B4ADA6D791D2116EE9D4F3CA1422B7C0DBCF24A2A073B92E024D2BAAB2F8654C3E965B0208C68B828685B25AFEF0572582EE8C7B8665C70473820E372369B5ABB31012D03381E0450AC93E09CD74CA8ABA75081797A9C0717CF73F4CB339B9CA52B4FB2F65E648A1D63C0483DC3646539C99E64926B0934F3BAE47482CC12E3CEE4D455323F8D14F563AE63191013B12818C05A9F344C9C6D57B5790B64C0DC3816F4C2574AB2D5AB137D71C2BEEDC41776B9A4C4D13C47D8C0747E5E387DB35AD0C2869CEA5B9CC930831FE67ACA4ECEF0D673573A14D3402AC38B56E5D777323E4D0546D36DCE476C0B715ED2A6E1166F691D68CB2FBD751726395EE40417F0C38B778B3B5A83FAFC3DF61CF9E53C45147883E11F37FE897DE4A40061770E2E2B1A5CBF45AEAC96665829CE1EA6285DC5D91AC0ECC4CFC1AF131EC34F7F3F7D9B179F8C21B811F4AF82BEA8ADEC846FD57F135249B3077C7B9CCCE141D4117203030E474DC155F9603AB5C28DFAA3D32E3EF1E8784AF5329F7176C35E6ACC19EF577183A480D7C30B66851C8EAB9CAC127B59DA207B4B17105F6B0CEF23968410AE9C1A0F24587C879B520640AFB8AA6A6DBCD4A577AACFADF1EA0A5C0723F0ACAF7E6B02DAB6CA14F1654ACCFEC0F6F08FA234481A9331788181B3E90512B71003C92D47522C257560CAA0698C2C2943E07A6A5A941CCA0AAE7FA092881059979BE231636EEC5F0DDC9623DFA52013BACE344798217F126C88E154529372065A1DCAD700DE77A3E533C712AF8A1A2EB9C0F301D72BBA33157BB90259FBC334EE9C5AA9CF46338A1F03B209295FCDE6BFDCE8111BFE6D5657BF1063DBB3F0AF2872E93C3AF3ED69B6BB29A3D3DE8E89D50B115DD4146364CF831F50260F34FDB08BF2C9AE188060E15C64D47695B01B06FB589456DEF5567D53F5FECE2BD41CE3BD4249C9D042A723889302B58451DF1AD1ACF634CCF42F3139E9C5947A520EB80B55055D4714B1264BE6F2A59DBE8CCC5EE0311E3185434F67436D3F428EED11A7881544644E71A78C315E0697EF89A709699A599568E81857507538EBF861621B7ACD563B816D66EA2A34DF24DA2204E3EECEC68D6823E999D90FC714CDEB3AC569096B22DDE170E2EE8016724CB9C1E61FE9800A0EA113521CC1BF6171B606BC0E3981A764DD87672765FDBC0A6315652BA482A25B812D66D799CB8195D75C1F4AE53D58E0CA2C001DAB5AA5EA3C442D0F7F87BAD562AADCCFE77FD947DDED42F25F7D31CE4F00D76308604A200B5D5882F227F5E7E9DE22039341AD4F1B14F8ABA962DB6A886B3D817C3BD0321FA6E2AC80E2506A2BE403236C64E86026BD366DC2A4D7F35DE8126E2343A12AC64FB849608DF6ED625501EF4133A8E448871C5EE35398B1A691F340847B8D9CF79AD496167568C681845DE37F9ED3174071DE946371A98F9495B41B6D93121B7A3DF8E2C263C293449AEB91677C370401271B9682CE60E17947EFEB57B9343B4DC8E1F164306381B05D9B75DFD9FEAFCFFB194AA0341F35FB724BE836138158D2B2DBDDF697652F2DE545F1A806F83C45F94AA3DE1EE492077A5310DC531F4C223957A61680458D1968C28FA5A8BAFD86487E4D798D9F2E2DAE85D8EA07DBF8F5B64B73CAC81114857E6DA62639A86AE60EC852BF3DFC83F1B8168D98DFD29223272540A0523CE11A952B3B6A5C3DADEBAD8A270135C0D5CF8FD5BCC97099A445BC8C12A83AFA471315E487C4D76AF5F75C3A54EAE11F8A34BC28991D520827A8B965A1F20F8B814796F85BB143648DFFC4BDC887976C918E9A9A2E5DE0C5B72DD42496D1D22A65320F461D013B62A8637C9F8B28D13401176C9D0DFDB24045C2CE7A5E1F6E3A4DD637DD7DE08C337A8B94891CA0120C528066295D296C1B6648C9E8B52B7C62A889DF965BD8246AA6662ED7385C302747838B1584C9025CB9F71762C9301F430E415C20D2D2CA899140E9BA22C1D84E33FAD2CBFB293670F995FBA1356E5B463649E058E90674BEC069693A0899FFED1249AC0B8E72C4B5954A435A30E7D0F71559E8CE8A3D6A59044D8665A381D03C6F37575C5A95F4B430BBEDAA9C4532832A04711BA089B0833FD671DE591719782172C810C4C4BA5C346DB41590B75247342E577D8D8751E925DF6515CFE9E99F2CBB7E7F338F2A7710AB82B6BD0017B990FB42B423E88B8C746B0FBB8D8EBCF92608CC7E9BAFD3BBDBB0DE28C19E5549F88A8F4CD97BEA221D37346E7F50D59E71829E3801EB2417DD14D3484B11169E9F570C8EDF0185B12BDB058ECDE8D312A610AE06E3F48B380F04AAE905FFBD8D7C8B04632620DD8CF20B5B3AD2DE629D35C470D14779D841E5A96EEF29BF0C88307DD3536BFA210B6BE87D1A06239CF19781361BB76552F7C3D821696AE7142444B13B230A951A86B2ECF67205C418198AE94E562C3F27F36583E9FB9CBB367186007BF28E5CD535C7A62C80DD2DDC399C49FF3393834DF78DE635F15D38829C86883FED7E5F3207561B3738112C9B9A1825AEC09C7CA73E404A378A165B0EA23B804EF84CC017386EB0C9E4399279123C0280413CE6DD5F54DE76B2B93A4E12112F8D1B2431433D7672831E0A90B23313AD387612BDE7D47E4F15184ABDC8945713A34574246C7B96A1C717A7261E9580932C1CCFF398584C78D5E48D7EEAE5B8AF4E0FA1048FE3F7499B15DDACBAC1620BCE6C1F302DDB7746DAB9A0AD993CF19EED5DF77CC5FFE3ED22821B1AB429F34BB2713AD73DE5127AECBA4BB9158E4981C11A105224C6F8FCBE58D38AE88F9B3733DF683D13C629BBBE717A2186288EB4177B31ED3D7EE633BC95A8E62E984780B6AD8C5E6EB0BB36AB687EA0FCC081A15006EA15C5F296AADF1655F330DB34063E512E39C19B3E957B701556B59C0080146DC9CEB1DE1D346A51D8C4357EC91BDFEC067D69D9C753A07CDA5A3E4C0010F068009676F0FED02313474734F0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/LNNBPC+Geometria-Light cguidfix
/F1.1/LNNBPC+Geometria-Light renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
2 w
0.60000002 i
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
0 375 m
750 375 l
750 0 l
0 0 l
0 375 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 0 375 cm
0 0 m
1500 0 l
1500 750 l
0 750 l
0 0 l
h
S
Q
q
36.5 348 m
262.5 348 l
262.5 291 l
36.5 291 l
36.5 348 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 36.5 348 cm
0 0 m
452 0 l
452 114 l
0 114 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 750 375 rc
0.5 0 0 -0.5 76.5 332.08099 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(!"#$%&'\(\)*+,&\()[ 23.940000 26.892000 25.920000 21.348000 9.756000 22.464000 27.360000 22.932000 26.496000 9.612000 24.948000 26.784000 22.464000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
38.5 68 m
145.5 68 l
145.5 28 l
38.5 28 l
38.5 68 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 38.5 68 cm
0 0 m
214 0 l
214 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 750 375 rc
0.5 0 0 -0.5 61 60.081001 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(-\(.*%/0)[ 27.900000 22.932000 20.556000 9.612000 9.756000 16.668000 0.000000 ] xS
0.5 0 0 -0.5 289 341.5 cm
0 34 m
(!"#*)[ 23.940000 26.892000 25.920000 0.000000 ] xS
86.363998 34 m
(%1234145676895)[ 9.756000 32.904000 22.716000 10.116000 20.448000 32.904000 20.448000 21.780000 15.228000 21.240000 15.228000 9.180000 22.212000 0.000000 ] xS
362.30399 34 m
(*:9;*<4;9=+92>*)[ 9.612000 12.888000 22.212000 12.528000 9.612000 21.816000 20.448000 12.528000 22.212000 17.172000 24.948000 22.212000 22.716000 19.584000 0.000000 ] xS
0 79 m
(?@368234*+95A@14;*!@B38AC85D*E&!?+F)[ 30.492000 21.852000 10.116000 15.228000 9.180000 22.716000 10.116000 20.448000 9.612000 24.948000 22.212000 21.780000 18.036000 21.852000 32.904000 20.448000 12.528000 9.612000 23.940000 21.852000 22.716000 10.116000 9.180000 18.036000 21.780000 9.180000 21.780000 22.716000 9.612000 12.708000 22.464000 23.940000 30.492000 24.948000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
460.5 251.91901 m
567.5 251.91901 l
567.5 211.91901 l
460.5 211.91901 l
460.5 251.91901 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 460.5 251.91901 cm
0 0 m
214 0 l
214 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 750 375 rc
0.5 0 0 -0.5 483 244 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(-\(.*%/0)[ 27.900000 22.932000 20.556000 9.612000 9.756000 16.668000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
597 196.91901 m
690 196.91901 l
690 156.91901 l
597 156.91901 l
597 196.91901 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 597 196.91901 cm
0 0 m
186 0 l
186 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 750 375 rc
0.5 0 0 -0.5 622.75 189.5 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
($%-G)[ 21.348000 9.756000 27.900000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
597 136.91901 m
690 136.91901 l
690 96.918999 l
597 96.918999 l
597 136.91901 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 597 136.91901 cm
0 0 m
186 0 l
186 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 750 375 rc
0.5 0 0 -0.5 622.75 129.5 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
($%-G)[ 21.348000 9.756000 27.900000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
597 76.918999 m
690 76.918999 l
690 36.918999 l
597 36.918999 l
597 76.918999 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 597 76.918999 cm
0 0 m
186 0 l
186 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 750 375 rc
0.5 0 0 -0.5 622.75 69.5 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
($%-G)[ 21.348000 9.756000 27.900000 0.000000 ] xS
0.5 0 0 -0.5 723 24 cm
/F1.1[ 24 0 0 -24 0 0]sf
22.92 23 m
(H)s
1 w
2 J
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
0.5 0 0 -0.5 511.5 211.5 cm
1.5 0.5 m
1.5 307.5 l
S
0.5 0 0 -0.5 512.5 178.5 cm
169.5 1.5 m
0.5 1.5 l
S
0.5 0 0 -0.5 512.5 117.5 cm
169.5 1.5 m
0.5 1.5 l
S
0.5 0 0 -0.5 512 58.5 cm
0.5 1.5 m
171.5 1.5 l
S
/Cs2 SC
0 sc
0.5 0 0 -0.5 308.5 253 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
($%-G/+0\)\(*IJ)[ 21.348000 9.756000 27.900000 23.076000 16.668000 24.588000 30.456000 26.496000 22.932000 9.612000 25.704000 0.000000 ] xS
0.5 0 0 -0.5 345 150 cm
0 34 m
($%-G/+0\)\(*IK)[ 21.348000 9.756000 27.900000 23.076000 16.668000 24.588000 30.456000 26.496000 22.932000 9.612000 25.704000 0.000000 ] xS
0.5 0 0 -0.5 332.5 109 cm
0 34 m
($%-G/+0\)\(*IL)[ 21.348000 9.756000 27.900000 23.076000 16.668000 24.588000 30.456000 26.496000 22.932000 9.612000 25.704000 0.000000 ] xS
0.5 0 0 -0.5 597 252 cm
0 34 m
(+,&*+@;A9;)[ 24.948000 26.784000 22.464000 9.612000 24.948000 21.852000 12.528000 18.036000 22.212000 0.000000 ] xS
0 79 m
(&C8:685D)[ 22.464000 21.780000 9.180000 13.536000 15.228000 9.180000 21.780000 0.000000 ] xS
0 J
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
0.5 0 0 -0.5 275.96945 231.80739 cm
111.09819 184.22955 m
112.07632 176.09869 112.57966 167.82173 112.57966 159.42723 c
112.57966 95.102837 83.025726 37.681141 36.755726 0 c
0 41.02961 l
35.060497 68.583969 57.579659 111.37578 57.579659 159.42723 c
57.579659 164.61646 57.317028 169.74434 56.804333 174.79832 c
111.09819 184.22955 l
h
S
0.5 0 0 -0.5 126.5 255 cm
409.51852 230.30232 m
397.27225 332.10138 310.60001 411 205.5 411 c
92.005486 411 0 318.99451 0 205.5 c
0 92.005486 92.005486 0 205.5 0 c
254.67014 0 299.80688 17.268978 335.17606 46.072773 c
298.42035 87.102386 l
272.83359 66.993523 240.56741 55 205.5 55 c
122.38114 55 55 122.38114 55 205.5 c
55 288.61887 122.38114 356 205.5 356 c
283.42963 356 347.52527 296.76962 355.22467 220.87109 c
409.51852 230.30232 l
h
S
0.5 0 0 -0.5 72.916977 159.11328 cm
12.462923 181.09375 m
-43.458954 24.914062 106.93948 0 106.93948 0 c
S
2 J
0.5 0 0 -0.5 119 159.5 cm
0.5 11.5 m
15.5 0.5 l
S
0.5 0 0 -0.5 116.5 160.5 cm
0.060911085 1.5 m
18.5 1.5 l
S
0.5 0 0 -0.5 295.5 118 cm
0.5 0.5 m
50.5 26.5 l
S
ep
end
