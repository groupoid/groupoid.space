%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.6 (Build 17G65) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 749 375
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 749 375
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: FDIBDL+Geometria-Light
%!FontType1-1.0: FDIBDL+Geometria-Light 001.001%%CreationDate: 10/10/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.001) readonly def/FullName (Geometria Light) readonly def/FamilyName (Geometria Light) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -75 def/UnderlineThickness 50 defend readonly def/FontName /FDIBDL+Geometria-Light def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /R putdup 34 /E putdup 35 /A putdup 36 /D putdup 37 /I putdup 38 /N putdup 39 /S putdup 40 /L putdup 41 /C putdup 42 /T putdup 43 /O putdup 44 /colon putdup 45 /space putdup 46 /P putdup 47 /W putdup 48 /V putdup 49 /Y putdup 50 /three putdup 51 /K putdup 52 /numbersign putdup 53 /one putdup 54 /two putdup 55 /M putdup 56 /c putdup 57 /o putdup 58 /m putdup 59 /p putdup 60 /a putdup 61 /t putdup 62 /i putdup 63 /b putdup 64 /l putdup 65 /e putdup 66 /n putdup 67 /g putdup 68 /s putdup 69 /d putdup 70 /Q putdup 71 /u putreadonly def/FontBBox {-412 -220 1438 923} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF1D53D6B91070844A9B74E43083EFDBF34C5770D328A6B574F14FE01D76EF86C53820A66FC19E082B068B33DABAD55F1C291FAFFA23ECB9F8EC0605C0A9E3B85544AA0CCDCC141DB39B406D85EB4F2360D566193F2E4304400A6D429C392CC8F67A0EA0F770FC6BBFBA1FE0DC4B2CCF7B9E36939F6213CBD9A315109B45B3091B384BEA5A47014A2251E509D4D739D949CD8FF6A2D0AAA50CBB2DF70AB1AF2D690BEE8CD1EA67A213BBCB1A9C57AED5B7D838409580D19207BAD2DC663A48E88F7C6E17A0025278F0405846D8AD3917CD695ABD9ECDCFE9388A58E529E9A93F37FBF1227FC2072DA48F2A5F31C39995BADB5A87D269011036574C925530BBE3226885E9D99B3F93478CB75E9321538D721117E0A089412DA8B005FC3AF2202B2A2FD54FF131CBCB943AF1C970F3DC145CD6BFFD9AFDE174D7BD5E7D0E479B0E77B2100C2D5E422B61B283B2A57CA9BF34C2F625C90F35222BA07D238F445A9B58A5854C27A8EDA066F35F20C41022D8F93424D89E8E9901EE6DFEC6CE807EF022E3CB6D16D563BE808DE64EE6407B9D5E5D5FE57D5585AC7F0B830D9F8D6122A2B107C4FBF10ACCEA3806597ABD5FB9B0FF9A2866E6B89283E06449107023782FD7CEC7D7F35B42A0D09B3A8ED2642F006A2C7C9F3101FF7382FA894C4BA1DF6843E0D1B56C6A97A070BE5BE672D65F852A979C0D40DF44F5C1E6A26D5AD434B03AC82FA3616C69D117B1E2275967675DA21D50D273ED980F682273177C404164F941D034EF23B86E62781A610947BB447654EC51FCD2E773ECB9500D63419B82261525DC078648856F7B90929BA453776ECCB2FAF28873AC0918F376A43C9ACEE3275325302C24E28A0D3AD4D86ED5554972695179D55EE1CDCA15400ADE9E7597EAA6AA248FEA0205DA8FA0B80DDB3434FCE1E45C87B10C4039759BF648571B3EAC88F401A62397B71F305F33DCD83B92ED4473F8EADBA526FD009E527F19970BBCC4E877E5419C4455E69C47FA1BE75FC09D8A5047F94B01CC6124D7C9D8B8DC7FE0994D75547CA26014E5DC02A62A721DD845E076E33DBB2181F43631B49D8F52CE2B2B7D58F418E1FA3C2C80FBAFAE2ADB52FAFFDA55283EF33161E8BB3ACBBA792EF4C3E122D4EBBD9DE6E03334C27742E48C0EB23AC6BE63886FABE5F61C2B1516A7BC72E2B3881A69E029E672001F9836F6D16F2A49E887BD21302FFB58F88874A3AB27DC26EC1123DBF9E8464FA5AC612A5865E25405DAE116DFA0886923787BC96B6F19C973B4B6B67CF8382FF52CD579248C06215F22045F015EE66D2FA73DB4841247F023C06D64B8C2A41D634668E5B741FF1073454EF992AB85E28B409971B39B8B3F0AD0A240CC890739DADAACC2F4D3153C183EFD4D1CE515508CAC76EAC281BF61C46D54FE452D43F700EF89E7E3F61069C36341ABA36EAB667C27EFF4CBE60EA3D00A0899FC68F9187ADC720D8AD15C4C2DEE5654E0D246D34515B408A5B580E54B11C6B2B3B6F0F283549C79F5885D6C79986B756E2D5233967C1CD79DF1B497261E4EB90473D74A63303628F4530033AC16AE9ED1731F7F6C24973B1DC5B7F74529AC8D96D665AF24E0301DCF5B8BB3282239C026BDAA56EA0C790564C3A31CE860B46F643D5D7801667DF3720301A4657947B917A9B695DAE33011CD9DB550917B741B931C3E6CE8CCA93F365A0C2F2A4948AEE2B51336A87CDBD7CE7DAB04C443AB3CA48D93A5AED3065158F26FD4D19274FB30243375A36D7342098BAFA285C3F453C415A58446DC087BF763A392B1CAF8677A29E2BB9C793F5692DB647318BA2411F83166A368F6ECCE1DAECE46F4D2321F52C86EBEB2A7EFF72F73A3BDC8CCDE7E61625D98EFB2143837F5F57A061660BB0267083D89051AF8A460A5FC8AC3893712B7D4C0B98808608B318CA523EAA4D60EB93A2A66D2446A17ECAC95CA0419D9896155A26BC02E08256762A052E6DDC48C0D2B9674FB15A8412F7BB5C5351EEFDFF617638AB8F256C12E71C6FFD33034726F0A9ACEF05F055A5EA3DEAB7A271113BA695B53593096C32A6990696898BBB11AD2794D6A8CE270B84CCF26F80D48A9A9CCA90398A939F500D2D45D1F69C9B4A173503547E7AEBD8D1677F77BEDA5033230B44BBD1622C1E42B6BC4E8CF81862456A7757BC62CACDF01B488E134274269D0851D759710304B43604BF5D625DF67FE06F72AD125E23BCE8FD66DB4AC67B59046A616FE407931154C9919530405E119BE8E3D2B065226EE94B09D7D38B5C05E7FAB97105A236B7EBEABDC1C6E3422F15D71D87F253C6CD4A917924A6EB7BAA9F68C330141E50113FA304C60824FB59623A7D7F0CAD08772B1C50B64288F1D5BE930842321D15CAF8D63AC3C6DEFE93509A4E92D54D7023493660263A36BCB1AAC905BD57480E80350D78DDD87E89B60191CD36E6B7A96CF1BC9C27E7D35AC32532C3C55DEAB0BFD5DE3D3C4CBD27694DD8E2E2A66ABC9FD75A71F3D0754DCFCB636DAB8CEADB01E504633360A4C17C986615EAFFB8FB141F31AE828829CF3F41895B06C3A5A896812BB8DC599CD90846988A9101CE334CE76AAADED44D97D9D78D5681AC294B45E7F43FBACA6A4CE1A5C68EC3E1D1B5A1F20E8E5A77847C6C18DC023D011E7FA60A734CB37A5330B11648B36FBF49DE737A5A50346C155E58B8D7AA26F4327B8D9FD5F71F8684A220B673F6A07531766D5A4FF176558007B4D280F7A5DFD33571053F8A527B58C79FCF1D55D720B6CD599C072095AF124551410E8CBDFD5DC70ED20C2390BB322B9FB0A1785A9582339FF030E210A331E0EA3E8083EB5796A81A0F399AA489ADFE4A2C0AB9684BC10E32C10A118F9C6EB102DD70997D41FF12D7D038B2E2BBBAA8D13AC0CA8E6A4B9DDDD0F720D620EADE33FECF3E33071D47C5AC7413A059F6B60C56B51C33773E130E0D4E2B1CFBC53AA72A61EEF3E9DC5A9E6F824E15E573949C6ECB58727942666EA817606E5BA57C4A611937F0761373A6D14D38B2117FA1540F03E748E8F3B92F3D7890AE1C1AF39744C29EE17F74D5B11A88123789EC0DF28D3ADDD5DB98BA12D6378E3E0D21156DB04757D113B7DBFD80055F7F4DF3D30F2FDB72E9CB04C3E47A683C5A4A410CEEB7F46E4F84D50DE717FA7C4E88125E26F9C4FF767E5EF88601497A45DC842B3A275E1B48EB1F076C02887FBFB7ADB96C5388B7CE2A3AF123D2B1491F96ECF22D7F8321BE1DC5952F790E0FBFD26DADD637965DD7993C09CDBAED400695EE476102872FAD3148C339CC3B1A986556D7DF58A04C90EBF86FE22DD93E163C80C44A3ECA2793CCCB53AF67BAB798B960618AB5BD015ED237B8C1758635F32B4F8CA4164D06E64065023F7F6D8DBB82D1E6E788B0C1C1F15289AB45F4BCC7A7FDF89650A648C511C9F9C5A7FEAEEC8AAC29D680CFA56E8F7D137466CD755744BA286820673CF28E53AA0D10BEFAB60D27AFB27C7EF2D42F57E61BF6DB6B1E90A8B71D1FB0DFC2F3FC663C3397F0149652A092466A22F7F5D6D81358C9F686090C2B1461A531D9644BD0163D1C02E8236659C0400B87797E571B00BF2AADD0EB0820EBE325AB3BE5A8D01D56F1B9ED875E9A1E99E724F409FDBF2A0F808FA8357494B1DEC414D66F7C1648A10CEF75F5585B28CC7421BB32DAEA7794B3148E32B20349714A4C7A1CE880210740883F789CE58AE42657B924890379D5471A9F94B303E6E890DBFB3A714240DB8C0D5029E58C6F9F474924A0698D48CDEF800965533833FDBE8EB59F6C44B848547BC28E1AF56E052E2B0E7F37B089ABEBE84AC580F91F0FD09439B5776CD2CAB63D33AA1466B42B785D88BC2AC8F954B6D1F292F1C6F689721F803334169756BD09A02A92DF5230D1689D5EF33031F93633BBFA8EB89025570B9C226299BF1CDBAF8EF68710CF6E7802C1AEC889CFA1E93771A27ADCBA3C9B7EFE6CEBBCB035AD6DC845C456ABE6C727DA41E4B74056466DD26EEEA6BC47DE66ACCDF1FFA65090F3830AF44234439F84348F55AC87BBC97CAF17E7D27B49044C048B811B1087D14C600B440D9166D322BC32E701683FF234BEC210699D65251BA6E9D593D24C6A1F4C938067DD19BC5AFBF361531172B649327B2F4CA41C6C2DD6AB56D6704AF787B3AB0B046F6CA69FC1FB262D0568DC5E00408F7CA039FF31267774846C3B8C31F42E549F4C951CA9768E4C65EA6B741E5F649525E53F72747B529BE47FD0431B5179A455A4BF8291E69A566F5C652215C23C52018EF6E5E6BA2E23889195CCB5789F1CCDEF0CC971A3093749ED776731EA5FC978FFEDADE007241B5D8E54BA43469CD11EE0C33B687F18B8696B260E8976E8BA45A565B01A0D93FE3E1A70AAF6EC578B5838D844C10B444632FD597DF84A09039E7420FEE21679550C9A66DB10C8543751799861C62D946302EADCC1933D3114B0D9D6178DBB9E478D864AA3867111470053D536D7735FE529D2E2C498CF5F19205B491EDE0448D9CF6FFAEBC19DD70DBE48F2D6715907358A83A25C552831CC98EED755E5B418BA03E6A1E6595BFE5EC276C008F267D0C58D1BEEF4FD42555F90F8C559B8B060BD927E0F0B8E9676D05542D0E55DC27DFABD22ED98098E352F95DC56A7F019F95C20FDC8D1968488BA4C1E482B6951D31F3B531E4E9965D004AEA7F3CE67E94FD12D4F07EF6E347DC06EBE24229E609200EA0F0A44DA02F1ADCE7F5A9F73515DBCB6A54B25CD3A1989E05FB8ED10C645AC820B0F87DABF38BF09AC2443FC62336ED161FF55B983D5A8555D643E420C565F748C543EB112D7F62325900F1DF44922C9B8F209930D6E44393BB06A995E571EE20D13FE7ECBF42DBB1A9AF6C68E4219B8150AC9C3EDB502C7C1C8942778CD1C57FB41FF099C0EF63D89AD68C7A1AFB26B8B51C14A06137DD7BD87574DEFC425594A22D444AF034A95D25A98CA88B3E2166A62D9B6D05225A5182C066997BEBB9644C8C3C0DDBD9EDE5074896B2FD8A4BCD7102D7C895C2F3063953BD2F34431DA0649C62EAF5F9010B4789B59B5B2447A2B57A36F28C96D0FD951968541A4584A89BD235ADB26332DB72F5EA502D25B0B45EE919A37F73811EA1CFBA5E8D1406DFCB233C0AA4AF91929DB9AE8DF83A154AC7721782867CD0102C4C4045E56A68BBFDE2B396F0749EF974A88D7D961B62B9B0E2CE301DDDB95C0342BC5FDF87538D53247E4216D5BA50C4AB8749240891CFEEBA27933C9552F4803D10F3F8836E405657D25DDDAAF69C13BB8795039625753FB0847E59358718410AD603A36FC2FEA5610C26BF84B23646F60AB787D3A36A9B2C36549B9BE9BA3C9E0005635F565A4AC97E4252C61DDAD790327E0CC368F867531813B2117394096222C23136C690C460B09F384CDA54E438B992A1FBA5B38016D6DC01FC86A162FDCC59C596C658FD743CCF72B4A998ED2E89433B9455D09F2D466E259EF2E51ECF8425C980500DA912D06C0088A3F66266327466990990C451E70017FE8126DF2BB8945D55F11AFA922EB36AACE926BD8F5F095EEF3DB1AD12E1F8B70507FEC8723CDDC20BA36459DD98EF3AC8E75ABF29C83326BB04B3602C0038AC25AF55A8E05F5966EB72C00B939B30D44EEDF1DDA94BBF401BEBB8A49D4C2EE99019942125EDFB2A94CEB247E2A41704FBD304A01B63D50E883D469D5D59C84F60C906263B3F2A6CC52899DB544659A5646ADF32724B93E5B45D706B45CCCAEA0E38E91D023B342263F12C3B694BEBFFFB031D6D6BB6535278E2D21E9B60CB399C85844C47BAF4EDF16B4EB8E084AAFED59E9DBB3052DC7B4970DA07AAB6822ED9880FE68A4D3725E95A496E197A56B9E25FE109B7F4E940EA1AD28A539823CBA9DC2E6677B64A9262FAE474B951FB250A6D02E638F39427F93DD21D3DD6736908041994632F92ECFCC9BEDABF7979E77105A6726EABA5ED79FD4C29F86A5C930EED3AEA4DA779D17B5592F36271D5180778FA8E5B3C44A173FEACE2D2C17435A56025A9E001AABD08B73EE6AF76DA088301570348C0EB1EE3528BC05623D665DCF59B17C55F9C95CE7E37D2357610E2AF8AEC0AE804FD1AAAA586839FD41D4914BB34D2805DEFB1B1741E2337F722C9A57A81BB016BF303076E1BDC56F82A3EE50D433E435924F81E8DBD5BCAD5BE5A42D9B1259B949F24C91AF6209CC0799C965468F2E69362F29262C97755312E4D099E2F4140A1F650E4BB1439275B6E5331F00633CC8E1BF00FBD6DDCFA40262BC73E44D014B87300BB41802E50D3EB98CC9C0520FCC1B36F6F353CC50705003EBE5C5C6B0ABBA6DCBAF3B9585FC40989B9E69A9CE97B117EF3DF597F4DC43BC5A812518E08C7FC6C68BDF0A95A4F237EA93CE882681CF7C8314200BD52A4BB197A4A6D39388D3B0D51350BAD627260F520B2C2C2500CD75B8953EE34921242BC6033E4CE74463DDA87484FFC8FE36523B2BD07FE95D36E7313CC62260C1040AFFADCFA35151B35C18495B2873574E6B3494D4C56622715DD6C939356518E5C65E330523E9DB3A08CB35BB7A791C061367B5FA5B6CBAE764AE46F2AD5A1E9B44501D0650C0A20CF69A8F6A1DD73B3021E4560133CE02C075AF3DB84B5CCBAA8A2BAAE3E4624C759C883243A4E5FF6904AC0FA5A7D8109ED0C9A4272F3F0FACB6718D5FB2C599CE4F599DBE81DBE3D540A4A99A3FF184133C876FE68077663F23E810B953DA16F154F71FB420D2E4327F8D1D869EFD9338CEE76FCE535F3D9A8582731979F4CA7058E489B4CABBE2F39A374415B62C1F5F8E31E006D6ABC736057910A3729AC60360CEE1B2C8D9F773363ED24C0C6998832D2AA521B5271CDB860D4729F7061A1D2AF9901E59AABD01F27D909693AA4AAFA7C32509E95153571E50E5D2B6A05A6E4E139D5B5A12562E6BE814317D05251A9C0E892142F201432A7D07FB389A85017F4BF99E1C416B3BE9FA157D9703D7DE43A5B3D3A3190C3E827417CAA761070C63E7790F8054CBC2A8CB5ECFAB8CBD74A2208974A2425BA2411922DF658CB27533813108DB1DED21A8419480CAC94DA3320A0E826F84268987D6EB437620D356887766733551E13F764F626792D19EFBB9C1A5DE550C906552E7FB9D5AE6CE5E4214B294124F6A1E9688EC72B3A09EB135A6AD579CB0407C5EEBACEF81CDF1F69BAFD3A941CF98563B94FD47B3B1F3FE4A6D118BEF294537E6EB19662FDC8E94D081C2F2A56D68878D180134EA44FCCA5EB7341460B6EFC27E5D12ACB5973643B1693322A5B170DE76962533EF1700DC171A478F1938803B8735A1DE230078C1A8DC319877083AAEC7C0C7CB70951ECEF42A4A67EFFB6A65C4585338A3F0DF11234EFD29617D1FD5C913B1B383D3C4C1C94CCB3568BCF705B97D9C535E217B04A43121737F373B4EFDF08768D68F34D1DB92CC01F32B0450AED0EAA60F72C198F51D1BD6DCD7D5BF3205A3817121F3D3B99CB5B82A904F55EB2E83AD5914BC0ECC61613DE2702BB541C92D8CCFAF99D5C52E3CCA2F11840594A83F3C4BCE01A99D5F09CD446CD6591849A1ED676EFA66373C7F0F7204F537189D9BF639723047C552B31067387535FBF511E344A272393B4C5D066D8C35DC8E43680F2D37B1155DEDE033E446F1A44621E8830D2F362301804DB8FC7F06D0325A43BB68902037C7B2D2170CBAD191B95DE101DD9151FD106684F84BB44A8A259C41E39C6C544FD2CC0725BE1F6E65A3AC872F9A5155A6E427646AB2013AFA59AC793E356178FF7C9F1ED545CF56F4A016E1FD576F2B17F03819138BFA8DB09A7043DA1D8F612DD74224766183ABBE7DAEF9717081010D335C97A58FEAC121EA7678871CC51BE0EA84A55599770732EBB5A4C75472552E4933F29DAD06E09E5C9B20DE36DCC0F40361EC44FBC02E44B7B3158AD00039AA54A2C113C8D2D5BC6FD512165E6A7718B33550D3CEB6B5C0E9A7B5EDA261865707C2A385AA68EC7A69A8821E04DBF2DBF167A6703E140C1FDA7D24A3FDC8216852704E811B552F52345303C714F3794BEF326A8898D2953B6EBC7BED7D22C5A7B1FF5BB49D666F15667515C0CE32608D30006C1C34D729393746E80C99EC9B00946734561916943BEAD2ACA37179AFAD896CAAFADC5894CE999A3836A94AD89F1C517B76D3C66D7A3BABDDEEE611691966A33066F0142EAC15757C74EE4E3DD51DF63934135A48CC825662692FD9EB68A63662D9E08460D1DC643E722065E61570F7734503812BAE60FC6B46D74BAF3B8839E92140AA835967230B6474F8BE0F98116EC760DDE17904EF5C2A8DE7B026D0A2F66CCF9DB16A8E6BD106CC658DA46CF6BFD537D5D146898C918164AF510F7C12F9E53A158D8861ED777D4A970C33BA27D3149B050E910F403DDBB15D47F39519F69F8AF0C7B991DDF3947A27D9FE64E105ECB00B0D99A72766F61920A84F21D86FF2F4629141CF756F2C183036CD634053446748A5625320FF6426A2DAB598A8CC5B5055A4CDD623618C725336F37B5CF12E35F7D28566FC942B74C130541F903A3ACD59E38CDA0F4B30C2897A178A395D82C0DD0C83BB211AA8C62EF52364E0E2A52141C80CAB25E770BCFC5B83A6DB7EBE5CD87E6FBC305B223E2109963C2C87C1E2EA7BA3C5F497B0D6FD288D5995584852C13EF482C5B3DF59CA7035AF2509CF9A29AFBF2B30619C07D0003544B7E688ACC4C432028B76F7141F44B198F76027075117DD85E5F3A2350D833E6276FD6B2B2C50167DFB372A40F6E3EF93BB3987451F33DEB750830F8903F08EE3E9230F8A45073730F9255DB853A008CBDC54F9D5E8FC133B2DD91295395A3099361D21DB8EB5D657F89A3DF380BD0A55B1AD89D539C837C94FB1B273978BFCCCB0199934DA9885234CC92878B8EF784D89CD3A44C0EBE84A75299FA51B5C9D8A427E8C148199E50B276D85A3D447A4D9463DF3B05025FA12AB72D95A1AC0E48696CF23E72DD173247FE5F80308BE191495F4E1FCCFF5F26619A58921C99E7ABA7D1E922A5D18A5305D78EE1D7E4039544613CED75E36895BF85D08A010ECFFDCC0CB362A1D225350E3D3D80C06EFA0CBFBB45D662D861EC68478506B25C9213A501425F0E61B578E2FCF4556EA77F99E182306A765E52D86D1AB821CBB8D046F34B9BD2ED1EC63FB82032E58B6A93308D8F4E66709B89889C89BC0F49F9021CFDAC6A7BE7469A7488C3384B4403C57AB015073CE2A53F750B00267581565346B823796446F8B4070EB1456CBE32A0137F41D1F8B1E78EE1323FF34ABC3392B134FB0D643D55B17F4CDDFCFF8CC1A9CA4E47E1D4D6A3563BCD698951AA98258C3746EB80A31075C44D92CD7E515E95531B250C3F35236BDF5C3B2E89A26B11E0C8E393FDAD738CAED319E28931C96662CFED009279115C20CEE0B0A735C6D057156A747E1163221E232ED3769A0BAEF8FC19DF23CBD507627DA646CFE425F9E73A02DCC0DDB1E98804BFD79FBD33DB2337481A1B607AF136DA136598FF4509B3EB6425D06959AF0A1865C940552A6A0F4F1ECC2288AFAA9C2D03A5F38CA452D7A4C9A2C70DAEAE274C60361ABCF34C86596A793688C1891E1D9FC100FCF24CEB1E11968C1C2482A0BCDFFD9E1991F397F2563E14493494BE5BDAB9FC2736D43DC18CE8B869A9B0065728CC79426BDC2E714A575A0E91D39A856F11B62C08B2808E8768F0BBDB350D9DF861B932E29AD1027FC7B74220C203A953962326618B3F1B0925DA19D489C4C96BA340006ADFC39637E79D8F7487CD7723B523B2A47DF48B4CAB742A140B415E1D5A56750D1513889F97401EAC80EA9A713AD465715D7C25CF8C09C35E76F93080CC57320B794E4200DB1A0E3C9CAC434B3CFE10DACEF93D01D09EEBD4606115C7F5F31EE01FEBE7BBC497749704FB5D3154D1BCBB66F17B6EB72C543F53C0A240B5916556380C8D32F6999D0DC71B276032D8AF5F7DB0EC1EB500C785E32F8D53E5388EAEE766F5B2A7E4192931F577532E37D48EC946286A5549B55E2BBCD534C35AC2DE4DC5DF6FD049711277DEEB96FA0D514AD219F25683838CC44F7816E2D1B0AC6224CFC056DB53C8A9C9EA571419D7E268FE6898890E290100C83AC9DEF6058D97D4A20C51F04F65E6715DBC5A8C5920F879BB355472355BE83F17FBE909E5C57CCBD3217D91DD91B91824C960627C112FC5279557EAFC45426702C139ACE579BB1000B2EEE3DAB8F12BF0666F23B59EC48311BDE946D1D4D9CFC62DC176FAA13450548623D1B0A0573A6CDEE80CCC2A4D6CFBAE68CC64709E35E66671E7C0B0B19CF3B16D8DAAEA0D19035F9381DBC16721F82775E29E2462B0CC1DD81FC295D3BA496FAFEC85BC0BB710057A352D4DF163EF2167A42320E6BE17360DC3199E900E998C0486502226EFCE730000CF0E413519C6152EC061C35C139D66297995E4C6263DBCF18BC4EF86945AF84B5E9F87791A6D068B770EFBDCC55F1B7AA82C5904BD21709A1E3480A62850616C2DEFF80582BDA8830B650D631D33B6CDBFC9F501EAAA96C44A5E1FB213A3B911EBBA572D58FA2D372F0BCD3D43C649DC349DD4B0558800C0DB190D0AFE5770D1147E15B9A76BB4CEA4818FC44274224311758C1FB5E286384292A2E1CD061B07ED812E362BB8E63B3D349EE3F7C7A3F88596B30588DF3ADC2FE0198A3112EC1F503608C68FF45A39138774946676CBA5FEAE0D7116B336CA880E0E305BC7065FAD3A962E0540AB82012E010E1407E4050A60DEBC1D0CEC7443867891EA0D2F263DBF19C249139825FEEFFBD3C28B116DF74EAB8CA9C1249DC60DACAD9218BF7F02CB77DE7D417BF9607CB4AF9C3AF01E03F22A856E8A6542ADE93413BD9A60CF1E8A92C496F5D95137E5DC22BDEEE0C0535048A63718DAE03CB25E6664AB59E2A67CD3AB5BB2C1C39088818EEF7CE9B2AAA5736EE914B9DC994C5FC6E0273D39C3A80BB9BFE74496F511D795EB7AB0DE3AFDA6762176D9902B89186F8C760FC04FAC086AA21D28FF817611C47C6F0FC30DDC61A42E013B942236A244109C3D81E83175B731D8C1798DF6B38528856CDACF8B3A2DAB33B65893C9BA484BD51542C2C01CC73EF1226EF2DFE9DCE9A35B7FF4C60558B3DCDFCE4CB9200B66B4C78D09898821238011CDA0E2E33E69F3DF76F3AE516AFE783FD32F2618EBCA323CC1BF330AC34490BA3F2AAB0D3D1A1EF295F5E77003DAF3E3F9F6B824977A0FBE3A4CE2D71F4928BE1BE2A49F407F3BBBD3F56D68696FA09D4AC88DCC5FFD1E42DFDDCFA610BAEFA4C0D146A3D814CC444C68CB1E8020F356D230B1EEFEB168B7774649FE4D7F257220154C581E78B9F70D87D0797D5456B85C1B563C9766C3B0A9E5377C287B259E59A7B462F6BD1D0E78343F2B26EA641B624CB203CFAAC0B54DEF91881DAD9991FD262470E3674AD05817B53B3415A8F198E534F55B007E23AEE4771840DB5A73790C4081F412DA0CD2E0BE8ECCF833E2407D599F90B5970550B0CB3CB192061832733CFCCB58F177E6D3A1660C815E97D5337FB5EC07B425B67FE3222C18DCE07ADE6E6B2935BA61AE149A2C4A2FCEDB3159B66EFEB01B3BDBE953D9D12C43BDDE2A176B15ED76DFE526A09B91DD296F80BA27B6B401FD98AA37768BD69212A4C0DB9BDF645FB79AAE090E3E61A02FF7ADCE075CE5EC99171608BE83CE55A3C5760192763AB8C57CCA2AF334DCB59F7CCF4A8871CB80614D3DAC524E11605698E2EE14A16D96639913DCD4E19AF65EBC25738D1B265806AD9E462A231BB8EA22D7EC2710E3F20C1198FBC07D3D3BD94D1034A7808B5E533D38B8E4F375235FC44AC473303A77F4C5BF1EE0F464C3A41DD5CD3CF79CD97937A561D026B9A8285F26DCC1C5C3683B82037C60A8D538951404D20FCCEFEEB401E333F6E5B069D76ACB7EDCD1A1444B807727C458CA8F439772751A656CA773D0B5DEC4F47F36FF2F6E4BDB6B1EE1E9D90CCB3724FFE7203FA03719D269A0FEF91298213164433152698180ED79403BCC9109C8F36FC9EBC8A199BC00D2FAF8B9C188A15D101482C13E34DA93224B2EFAB08BC16056B02653F64402D8319AC045C034B1565E4DA18CD2364B56C067D93829B1370EA6F13391027D74BE6625CD16C9E948E318BFC13047EE29C640C99FFC702276681AF7D0333C9D068999088189F2441CBC67BEAFEDB21B5851C701A3456D97D9403250F225DD49DF60E9208853E25BA226A6A5FFA1A4A29051AABFEA016760EA9B2F09324D9F892139101879DA833F140283322F3630579CA10C5011DBDCA7DE92C97650EE5E01E19933D54186411D6DD1B5039FA558BBEF71C2FE083645A065FF18C5B1304A98A7DEA16DBC5688FE7E8DB34C2E205A03B539150F25F6289AD19D51F21392C6570CCA61331FDE0F1BDD1B200B723808253189A0D12E8A34F16F487394DC3410B4F5968B74ED4F16086811BCC0FE2659630B10C4A5E03D4FBF07D7560EAB776DB26B12E3EE7997DF51CEA2C068DBE8BC4C3976CEF7FFFCDC02795C93AF08BBD10357B2B105C2D0D96CA5CB2C726838102A29FA57DB8747F0F7403A4CBFD98390A1A0242ED629F59FB47D4ABBE96B4E4D362D47A833989EB9487E331103C18825686F9ED95085E778E86D30A69AD2F7C038FD1630B5F5BA2AE3A840AE22BA8034AFA33A2D787ACACD2EAC5CAB86341E456052992BC212E83CB64495CE619BE27334F9E42C78590C4A82996B8A6B57D2E4867C78AC99E4022E675866C48E6AC8A5042208007589C1131247D1420EF796A8DB1E8792E50FFCCAED2F905A463AC7A0A71CE7B086666D7234808C0EA6772FFECB376C128DE01FFCEDC3C82DE10D2A09145627E0D26B51721F153AA6F536424FECDA1C7E221044BC0B6C466CC6080AC33B3D6AABA0A04C05788223A7F567E2CD97D9B7AF5085AF06A8EE02F8369A73D4112707CDDDEA3ED9C5AF40A396D967AF17577F6E14C9429E393338BA867D65F6B552E5FC085043040F8162185A8A40556493E5AF3EB4513C50A1CD0E623EC2C510B926A2DBF7B001FDC60E5636CEA17BCB2A266AC3EC95F68C89688389BB4BCE1E30C90C243B26927817BF06E76DA5EB3CE24A845F1A302B9B3D4740FD521645C8944872C98A483D66497DD1E6F233D971893199B5F5A1B7FCF71D3C1B4A320A0BBF97AA82B1EB84FC98BE22680FA533776BECC326461EA7F206C39F83346F1461B68770625BDEA38F1BBC72219F6FECCE5D7D2930034D023B1E6B3D665B6AC0B04A5B062F9C480F8982239060781F6F634703AB3CB4F34005EAAA014D17F8E39589DE218A93171A642CF1053766E619FA2AA1A0419E929164074760EC18B9323EE4C860F879505123D224919C3AF69BFE084F46760C0B8F37F41D90AA2AE88ADA1CA7FA2C73E8F050A163DCECF65300AA5881DA751C7D75928713B29BD5411EE59BE34832708CA951B9CFADFABDC44737CF6B41AB29208AE3C78B173C34766FAB9BC3D5B8AADF9363678B8482400012844B83EE75BC4E3F9DB5D5E797C44BD82125A3DBB371F1CE64AC2978EDC6CFFB9952D1EDA6E3F9040A3BEE8A1046E9518CF6B0E4DCB2DE2BD3F256C5B2207859FFC8DE30F247EBF25A070C46D48AD05E5DE0278627C24ADC1FA7B45A1F86308584BD4658638D0AABA4EA7322CF741B81E5AF01BE3D63902A37D7D844F08E1D3D52939DEEBC4B3DA95FCF8CCC89D462311B6F334C0AEEDFC1564949B0F447CFFB47412B5E84E5D044A1A37F7315CDAC8483406A12CCF90B898501F1866D84F228A2C5C0724F085FF9C1CC85123009FCAE26FC7969BD3900D762D723FA1999B2AECE517C96D812B6A1024F715F8102ED88B694A68CF6E16075E0126D189F1F38AFA8A608D89A8EAB4E07B5C3240A1A721C992AEBED4554D404EE3800D2197508CEA9258963DC08D642C9C2B34C2841E962A61B2EEEF03DDC47B4C10B96EB7F85F01B883A1D5094435E3D15663D619D76082FD8FF38DAA6A7C66E11E47996BECAE886898D3B4BD35A29385C5BE8751DCF74739DEA2ADCCFDB19381D8058179F674492EC6FB47D8F702683D2B2E3054C815610020B4F430A3FE8215E37A33BEC1B276F2254923460D3E87489219955838475249F0BEFF1155C2A9B6FBBE18533B5DD693A7AA305F236DE36DEDFD20E7E5083E98F0BFF80A4A33130A6728C55EBFA48C253FAD16AF430C70E1EA9D74E13666038BF4484C79564156687CEC5F57949472B230E04FF3E5A4DB39C52A146324B664A03707E71DA9F34F808A99C70CEDF7033F10136AF202BEAB902C11837EFACA21CD3AFD0DD2C71FFC9318B70AAF00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/FDIBDL+Geometria-Light cguidfix
/F1.1/FDIBDL+Geometria-Light renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
2 w
0.60000002 i
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
0 375 m
749 375 l
749 0 l
0 0 l
0 375 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 0 375 cm
0 0 m
1498 0 l
1498 750 l
0 750 l
0 0 l
h
S
Q
q
320.70532 252 m
500.70532 252 l
500.70532 212 l
320.70532 212 l
320.70532 252 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 320.70532 252 cm
0 0 m
360 0 l
360 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 364.66666 243.08099 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(!"#$%&"'')[ 26.496000 22.932000 26.784000 27.900000 9.756000 27.900000 22.932000 22.464000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
320.70532 198.5 m
500.70532 198.5 l
500.70532 158.5 l
320.70532 158.5 l
320.70532 198.5 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 320.70532 198.5 cm
0 0 m
360 0 l
360 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 364.66666 189.58099 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
('"\("\)*+!)[ 22.464000 22.932000 21.348000 22.212000 24.948000 20.556000 30.456000 0.000000 ] xS
0.5 0 0 -0.5 378.70532 142.08099 cm
0 34 m
(+',-".+\(\(-/#%*)[ 30.456000 22.464000 8.064000 9.612000 22.932000 23.940000 30.456000 21.348000 19.188000 9.612000 35.028000 26.784000 9.756000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
192.38971 252 m
305.95532 252 l
305.95532 158.5 l
192.38971 158.5 l
192.38971 252 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 192.38971 252 cm
0 0 m
227.13124 0 l
227.13124 187 l
0 187 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 225.92252 217.53438 cm
/F1.1[ 34.343098 0 0 -34.343098 0 0]sf
0 33 m
(.+\(\()[ 22.838159 29.054259 20.365456 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
57.389709 252 m
170.95534 252 l
170.95534 158.5 l
57.389709 158.5 l
57.389709 252 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 57.389709 252 cm
0 0 m
227.13124 0 l
227.13124 187 l
0 187 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 78.922523 217.53438 cm
/F1.1[ 34.343098 0 0 -34.343098 0 0]sf
0 33 m
('"!0"!)[ 21.430092 21.876552 24.520971 25.722979 21.876552 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
583.91064 95.5 m
697.45532 95.5 l
697.45532 55.5 l
583.91064 55.5 l
583.91064 95.5 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 583.91064 95.5 cm
0 0 m
227.08934 0 l
227.08934 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 610.91064 88.081001 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(!"#$1)[ 26.496000 22.932000 26.784000 26.388000 0.000000 ] xS
0.5 0 0 -0.5 723 24 cm
/F1.1[ 24 0 0 -24 0 0]sf
22.392 23 m
(2)s
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
454.16068 95.5 m
567.70532 95.5 l
567.70532 55.5 l
454.16068 55.5 l
454.16068 95.5 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 454.16068 95.5 cm
0 0 m
227.08934 0 l
227.08934 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 481.16068 88.081001 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(*+3"&)[ 20.556000 30.456000 23.076000 22.932000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
320.16068 95.5 m
440.20532 95.5 l
440.20532 55.5 l
320.16068 55.5 l
320.16068 95.5 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 320.16068 95.5 cm
0 0 m
240.08934 0 l
240.08934 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 349.66068 87.581001 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
("0"&*)[ 22.932000 26.964000 22.932000 27.900000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
187.91066 95.5 m
305.45532 95.5 l
305.45532 55.5 l
187.91066 55.5 l
187.91066 95.5 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 187.91066 95.5 cm
0 0 m
235.08934 0 l
235.08934 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 214.91066 88.081001 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
("0"&*')[ 22.932000 26.964000 22.932000 27.900000 22.356000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
56.955334 145.5 m
170.45534 145.5 l
170.45534 105.5 l
56.955334 105.5 l
56.955334 145.5 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 56.955334 145.5 cm
0 0 m
227 0 l
227 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 76.20533 137.08099 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(\)+&&-45)[ 24.588000 30.456000 27.900000 27.900000 9.612000 25.704000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
56.955334 95.5 m
170.45534 95.5 l
170.45534 55.5 l
56.955334 55.5 l
56.955334 95.5 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 56.955334 95.5 cm
0 0 m
227 0 l
227 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 76.20533 87.081001 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(\)+&&-46)[ 24.588000 30.456000 27.900000 27.900000 9.612000 25.704000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
519.66064 252 m
634.20532 252 l
634.20532 212 l
519.66064 212 l
519.66064 252 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 519.66064 252 cm
0 0 m
229.08934 0 l
229.08934 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 545.43298 243.58099 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(&+$"')[ 27.900000 30.456000 27.900000 22.932000 0.000000 ] xS
1 w
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
0.5 0 0 -0.5 243.77637 158.58203 cm
0 0 m
66.835938 110.25781 154.53711 75.070312 231.20508 0 c
S
2 J
0.5 0 0 -0.5 350.75 158 cm
0.5 7.5 m
15.5 0.5 l
S
0.5 0 0 -0.5 354.75 158 cm
0.5 16.5 m
7.5 0.5 l
S
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
33.455334 346.892 m
187.25 346.892 l
187.25 289.892 l
33.455334 289.892 l
33.455334 346.892 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 33.455334 346.892 cm
0 0 m
307.58932 0 l
307.58932 114 l
0 114 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 98.901337 330.97299 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(%+)[ 9.756000 0.000000 ] xS
0.5 0 0 -0.5 228 330.5 cm
0 34 m
(7%+-89:;<=>?@A-;9@@>BC-@99;-?<DAE-9B-!A<E>BADD-FGAGA)[ 30.492000 9.756000 30.456000 9.612000 18.504000 22.212000 32.904000 22.716000 21.240000 15.228000 9.180000 22.716000 10.116000 20.448000 9.612000 22.716000 22.212000 10.116000 10.116000 9.180000 21.780000 22.716000 9.612000 10.116000 22.212000 22.212000 22.716000 9.612000 22.716000 21.240000 18.036000 20.448000 22.752000 9.612000 22.212000 21.780000 9.612000 25.488000 20.448000 21.240000 22.752000 9.180000 21.780000 20.448000 18.036000 18.036000 9.612000 30.456000 21.852000 20.448000 21.852000 0.000000 ] xS
ep
end
