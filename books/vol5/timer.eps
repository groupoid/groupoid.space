%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.6 (Build 17G65) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 750 375
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 750 375
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: AEVSNW+Geometria-Light
%!FontType1-1.0: AEVSNW+Geometria-Light 001.001%%CreationDate: 10/10/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.001) readonly def/FullName (Geometria Light) readonly def/FamilyName (Geometria Light) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -75 def/UnderlineThickness 50 defend readonly def/FontName /AEVSNW+Geometria-Light def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /T putdup 34 /I putdup 35 /M putdup 36 /E putdup 37 /R putdup 38 /S putdup 39 /c putdup 40 /h putdup 41 /e putdup 42 /d putdup 43 /u putdup 44 /l putdup 45 /r putdup 46 /space putdup 47 /a putdup 48 /t putdup 49 /o putdup 50 /s putdup 51 /n putdup 52 /m putdup 53 /i putdup 54 /g putdup 55 /C putdup 56 /p putdup 57 /f putdup 58 /period putdup 59 /N putdup 60 /D putdup 61 /L putdup 62 /F putdup 63 /b putdup 64 /four putdup 65 /w putdup 66 /nine putdup 67 /A putdup 68 /K putdup 69 /one putdup 70 /two putdup 71 /slash putdup 72 /O putdup 73 /numbersign putdup 74 /Y putdup 75 /Q putreadonly def/FontBBox {-412 -220 1438 923} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF1D53D6B91070844A9B74E43083EFDBF34C5770D328A6B574F14FE01D76EF86C53820A66FC19E082B068B33DABAD55F1C291FAFFA23ECB9F8EC0605C0A9E3B85544AA0CCDCC141DB39B406D85EB4F2360D566193F2E4304400A6D429C392CC8F67A0EA0F770FC6BBFBA1FE0DC4B2CCF7B9E36939F6213CBD9A315109B45B3091B384BEA5A47014A2251E509D4D739D949CD8FF6A2D0AAA50CBB2DF70AB1AF2D690BEE8CD1EA67A213BBCB1A9C57AED5B7D838409580D19207BAD2DC663A48E88F7C6E17A0025278F0405846D8AD3917CD695ABD9ECDCFE9388A58E529E9A93F37FBF1227FC2072DA48F2A5F31C39995BADB5A87D269011036574C925530BBE3226885E9D99B3F93478CB75E9321538D721117E0A089412DA8B005FC3AF2202B2A2FD54FF131CBCB943AF1C970F3DC145CD6BFFD9AFDE174D7BD5E7D0E479B0E77B2100C2D5E422B61B283B2A57CA9BF34C2F625C90F35222BA07D238F445A9B58A5854C27A8EDA066F35F20C41022D8F93424D89E8E9901EE6DFEC6CE807EF022E3CB6D16D563BE808DE64EE6407B9D5E5D5FE57D5585AC7F0B830D9F8D6122A2B107C4FBF10ACCEA3806597ABD5FB9B0FF9A2866E6B89283E06449107023782FD7CEC7D7F35B42A0D09B3A8ED2642F006A2C7C9F3101FF7382FA894C4BA1DF6843E0D1B56C6A97A070BE5BE672D65F852A979C0D40DF44F5C1E6A26D5AD434B03AC82FA3616C69D117B1E2275967675DA21D50D273ED980F682273177C404164F941D034EF23B86E62781A610947BB447654EC51FCD2E773ECB9500D63419B82261525DC078648856F7B90929BA453776ECCB2FAF28873AC0918F376A43C9ACEE3275325302C24E28A0D3AD4D86ED5554972695179D55EE1CDCA15400ADE9E7597EAA6AA248FEA0205DA8FA0B80DDB3434FCE1E45C87B10C4039759BF648571B3EAC88F401A62397B71F305F33DCD83B92ED4473F8EADBA526FD009E527F19970BBCC4E877E5419C4455E69C47FA1BE75FC09D8A5047F94B01CC6124D7C9D8B8DC7FE0994D75547CA26014E5DC02A62A721DD845E076E33DBB2181F43631B49D8F52CE2B2B7D58F418E1FA3C2C80FBAFAE2ADB52FAFFDA55283EF33161E8BB3ACBBA792EF4C3E122D4EBBD9DE6E03334C27742E48C0EB23AC6BE63886FABE5F61C2B1516A7BC72E2B3881A69E029E672001F9836F6D16F2A49E887BD21302FFB58F88874A3AB27DC26EC1123DBF9E8464FA5AC612A5865E25405DAE116DFA0886923787BC96B6F19C973B4B6B67CF8382FF52CD579248C06215F22045F015EE66D2FA73DB4841247F023C06D64B8C2A41D634668E5B741FF1073454EF992AB85E28B409971B39B8B3F0AD0A240CC890739DADAACC2F4D3153C183EFD4D1CE515508CAC76EAC281BF61C46D54FE452D43F700EF89E7E3F61069C36341ABA36EAB667C27EFF4CBE60EA3D00A0899FC68F9187ADC720D8AD15C4C2DEE5654E0D246D34515B408A5B580E54B11C6B2B3B6F0F283549C79F5885D6C79986B756E2D5233967C1CD79DF1B497261E4EB90473D74A63303628F4530033AC16AE9ED1731F7F6C24973B1DC5B7F74529AC8D96D665AF24E0301DCF5B8BB3282239C026BDAA56EA0C790564C3A31CE860B46F643D5D7801667DF3720301A4657947B917A9B695DAE33011CD9DB550917B741B931C3E6CE8CCA93F365A0C2F2A4948AEE2B51336A87CDBD7CE7DAB04C443AB3CA48D93A5AED3065158F26FD4D19274FB30243375A36D7342098BAFA285C3F453C415A58446DC087BF763A392B1CAF8677A29E2BB9C793F5692DB647318BA2411F83166A368F6ECCE1DAECE46F4D2321F52C86EBEB2A7EFF72F73A3BDC8CCDE7E61625D98EFB2143837F5F57A061660BB0267083D89051AF8A460A5FC8AC3893712B7D4C0B98808608B318CA523EAA4D60EB93A2A66D2446A17ECAC95CA0419D9896155A26BC02E08256762A052E6DDC48C0D2B9674FB15A8412F7BB5C5351EEFDFF617638AB8F256C12E71C6FFD33034726F0A9ACEF05F055A5EA3DEAB7A271113BA695B53593096C32A6990696898BBB11AD2794D6A8CE270B84CCF26F80D48A9A9CCA90398A939F500D2D45D1F69C9B4A173503547E7AEBD8D1677F77BEDA5033230B44BBD1622C1E42B6BC4E8CF81862456A7757BC62CACDF01B488E134274269D0851D759710304B43604BF5D625DF67FE06F72AD125E23BCE8FD66DB4AC67B59046A616FE407931154C9919530405E119BE8E3D2B065226EE94B09D7D38B5C05E7FAB97105A236B7EBEABDC1C6E3422F15D71D87F253C6CD4A917924A6EB7BAA9F68C330141E50113FA304C60824FB59623A7D7F0CAD08772B1C50B64288F1D5BE930842321D15CAF8D63AC3C6DEFE93509A4E92D54D7023493660263A36BCB1AAC905BD57480E80350D78DDD87E89B60191CD36E6B7A96CF1BC9C27E7D35AC32532C3C55DEAB0BFD5DE3D3C4CBD27694DD8E2E2A66ABC9FD75A71F3D0754DCFCB636DAB8CEADB01E504633360A4C17C986615EAFFB8FB141F31AE828829CF3F41895B06C3A5A896812BB8DC599CD90846988A9101CE334CE76AAADED44D97D9D78D5681AC294B45E7F43FBACA6A4CE1A5C68EC3E1D1B5A1F20E8E5A77847C6C18DC023D011E7FA60A734CB37A5330B11648B36FBF49DE737A5A50346C155E58B8D7AA26F4327B8D9FD5F71F8684A220B673F6A07531766D5A4FF176558007B4D280F7A5DFD33571053F8A527B58C79FCF1D55D720B6CD599C072095AF124551410E8CBDFD5DC70ED20C2390BB322B9FB0A1785A9582339FF030E210A331E0EA3E8083EB5796A81A0F399AA489ADFE4A2C0AB9684BC10E32C10A118F9C6EB102DD70997D41FF12D7D038B2E2BBBAA8D13AC0CA8E6A4B9DDDD0F720D620EADE33FECF3E33071D47C5AC7413A059F6B60C56B51C33773E130E0D4E2B1CFBC53AA72A61EEF3E9DC5A9E6F824E15E573949C6ECB58727942666EA817606E5BA57C4A611937F0761373A6D14D38B2117FA1540F03E748E8F3B92F3D7890AE1C1AF39744C29EE17F74D5B11A88123789EC0DF28D3ADDD5DB98BA12D6378E3E0D21156DB04757D113B7DBFD80055F7F4DF3D30F2FDB72E9CB04C3E47A683C5A4A410CEEB7F46E4F84D50DE717FA7C4E88125E26F9C4FF767E5EF88601497A45DC842B3A275E1B48EB1F076C02887FBFB7ADB96C5388B7CE2A3AF123D2B1491F96ECF22D7F8321BE1DC5952F790E0FBFD26DADD637965DD7993C09CDBAED400695EE476102872FAD3148C339CC3B1A986556D7DF58A04C90EBF86FE22DD93E163C80C44A3ECA2793CCCB53AF67BAB798B960618AB5BD015ED237B8C1758635F32B4F8CA4164D06E64065023F7F6D8DBB82D1E6E788B0C1C1F15289AB45F4BCC7A7FDF89650A648C511C9F9C5A7FEAEEC8AAC29D680CFA56E8F7D137466CD755744BA286820673CF28E53AA0D10BEFAB60D27AFB27C7EF2D42F57E61BF6DB6B1E90A8B71D1FB0DFC2F3FC663C3397F0149652A092466A22F7F5D6D81358C9F686090C2B1461A531D9644BD0163D1C02E8236659C0400B87797E571B00BF2AADD0EB0820EBE325AB3BE5A8D01D56F1B9ED875E9A1E99E724F409FDBF2A0F808FA8357494B1DEC414D66F7C1648A10CEF75F5585B28CC7421BB32DAEA7794B3148E32B20349714A4C7A1CE880210740883F789CE58AE42657B924890379D5471A9F94B303E6E890DBFB3A714240DB8C0D5029E58C6F9F474924A0698D48CDEF800965533833FDBE8EB59F6C44B848547BC28E1AF56E052E2B0E7F37B089ABEBE84AC580F91F0FD09439B5776CD2CAB63D33AA1466B42B785D88BC2AC8F954B6D1F292F1C6F689721F803334169756BD09A02A92DF5230D1689D5EF33031F93633BBFA8EB89025570B9C226299BF1CDBAF8EF68710CF6E7802C1AEC889CFA1E93771A27ADCBA3C9B7EFE6CEBBCB035AD6DC845C456ABE6C727DA41E4B74056466DD26EEEA6BC47DE66ACCDF1FFA65090F3830AF44234439F84348F55AC87BBC97CAF17E7D27B49044C048B811B1087D14C600B440D9166D322BC32E701683FF234BEC210699D65251BA6E9D593D24C6A1F4C938067DD19BC5AFBF361531172B649327B2F4CA41C6C2DD6AB56D6704AF787B3AB0B046F6CA69FC1FB262D0568DC5E00408F7CA039FF31267774846C3B8C31F42E549F4C951CA9768E4C65EA6B741E5F649525E53F72747B529BE47FD0431B5179A455A4BF8291E69A566F5C652215C23C52018EF6E5E6BA2E23889195CCB5789F1CCDEF0CC971A3093749ED776731EA5FC978FFEDADE007241B5D8E54BA43469CD11EE0C33B687F18B8696B260E8976E8BA45A565B01A0D93FE3E1A70AAF6EC578B5838D844C10B444632FD597DF84A09039E7420FEE21679550C9A66DB10C8543751799861C62D946302EADCC1933D3114B0D9D6178DBB9E478D864AA3867111470053D536D7735FE529D2E2C498CF5F19205B491EDE0448D9CF6FFAEBC19DD70DBE48F2D6715907358A83A25C552831CC98EED755E5B418BA03E6A1E6595BFE5EC276C008F267D0C58D1BEEF4FD42555F90F8C559B8B060BD927E0F0B8E9676D05542D0E55DC27DFABD22ED98098E352F95DC56A7F019F95C20FDC8D1968488BA4C1E482B6951D31F3B531E4E9965D004AEA7F3CE67E94FD12D4F07EF6E347DC06EBE24229E609200EA0F0A44DA02F1ADCE7F5A9F73515DBCB6A54B25CD3A1989E05FB8ED10C645AC820B0F87DABF38BF09AC2443FC62336ED161FF55B983D5A8555D643E420C565F748C543EB112D7F62325900F1DF44922C9B8F209930D6E44393BB06A995E571EE20D13FE7ECBF42DBB1A9AF6C68E4219B8150AC9C3EDB502C7C1C8942778CD1C57FB41FF099C0EF63D89AD68C7A1AFB26B8B51C14A06137DD7BD87574DEFC425594A22D444AF034A95D25A98CA88B3E2166A62D9B6D05225A5182C066997BEBB9644C8C3C0DDBD9EDE5074896B2FD8A4BCD7102D7C895C2F3063953BD2F34431DA0649C62EAF5F9010B4789B59B5B2447A2B57A36F28C96D0FD951968541A4584A89BD235ADB26332DB72F5EA502D25B0B45EE919A37F73811EA1CFBA5E8D1406DFCB233C0AA4AF91929DB9AE8DF83A154AC7721782867CD0102C4C4045E56A68BBFDE2B396F0749EF974A88D7D961B62B9B0E2CE301DDDB95C0342BC5FDF87538D53247E4216D5BA50C4AB8749240891CFEEBA27933C9552F4803D10F3F8836E405657D25DDDAAF69C13BB8795039625753FB0847E59358718410AD603A36FC2FEA5610C26BF84B23646F60AB787D3A36A9B2C36549B9BE9BA3C9E0005635F565A4AC97E4252C61DDAD790327E0CC368F867531813B2117394096222C23136C690C460B09F384CDA54E438B992A1FBA5B38016D6DC01FC86A162FDCC59C596C658FD743CCF72B4A998ED2E89433B9455D09F2D466E259EF2E51ECF8425C980500DA912D06C0088A3F66266327466990990C451E70017FE8126DF2BB8945D55F11AFA922EB36AACE926BD8F5F095EEF3DB1AD12E1F8B70507FEC8723CDDC20BA36459DD98EF3AC8E75ABF29C83326BB04B3602C0038AC25AF55A8E05F5966EB72C00B939B30D44EEDF1DDA94BBF401BEBB8A49D4C2EE99019942125EDFB2A94CEB247E2A41704FBD304A01B63D50E883D469D5D59C84F60C906263B3F2A6CC52899DB544659A5646ADF32724B93E5B45D706B45CCCAEA0E38E91D023B342263F12C3B694BEBFFFB031D6D6BB6535278E2D21E9B60CB399C85844C47BAF4EDF16B4EB8E084AAFED59E9DBB3052DC7B4970DA07AAB6822ED9880FE68A4D3725E95A496E197A56B9E25FE109B7F4E940EA1AD28A539823CBA9DC2E6677B64A9262FAE474B951FB250A6D02E638F39427F93DD21D3DD6736908041994632F92ECFCC9BEDABF7979E77105A6726EABA5ED79FD4C29F86A5C930EED3AEA4DA779D17B5592F36271D5180778FA8E5B3C44A173FEACE2D2C17435A56025A9E001AABD08B73EE6AF76DA088301570348C0EB1EE3528BC05623D665DCF59B17C55F9C95CE7E37D2357610E2AF8AEC0AE804FD1AAAA586839FD41D4914BB34D2805DEFB1B1741E2337F722C9A57A81BB016BF303076E1BDC56F82A3EE50D433E435924F81E8DBD5BCAD5BE5A42D9B1259B949F24C91AF6209CC0799C965468F2E69362F29262C97755312E4D099E2F4140A1F650E4BB1439275B6E5331F00633CC8E1BF00FBD6DDCFA40262BC73E44D014B87300BB41802E50D3EB98CC9C0520FCC1B36F6F353CC50705003EBE5C5C6B0ABBA6DCBAF3B9585FC40989B9E69A9CE97B117EF3DF597F4DC43BC5A812518E08C7FC6C68BDF0A95A4F237EA93CE882681CF7C8314200BD52A4BB197A4A6D39388D3B0D51350BAD627260F520B2C2C2500CD75B8953EE34921242BC6033E4CE74463DDA87484FFC8FE36523B2BD07FE95D36E7313CC62260C1040AFFADCFA35151B35C18495B2873574E6B3494D4C56622715DD6C939356518E5C65E330523E9DB3A08CB35BB7A791C061367B5FA5B6CBAE764AE46F2AD5A1E9B44501D0650C0A20CF69A8F6A1DD73B3021E4560133CE02C075AF3DB84B5CCBAA8A2BAAE3E4624C759C883243A4E5FF6904AC0FA5A7D8109ED0C9A4272F3F0FACB6718D5FB2C599CE4F599DBE81DBE3D540A4A99A3FF184133C876FE68077663F23E810B953DA16F154F71FB420D2E4327F8D1D869EFD9338CEE76FCE535F3D9A8582731979F4CA7058E489B4CABBE2F39A374415B62C1F5F8E31E006D6ABC736057910A3729AC60360CEE1B2C8D9F773363ED24C0C6998832D2AA521B5271CDB860D4729F7061A1D2AF9901E59AABD01F27D909693AA4AAFA7C32509E95153571E50E5D2B6A05A6E4E139D5B5A12562E6BE814317D05251A9C0E892142F201432A7D07FB389A85017F4BF99E1C416B3BE9FA157D9703D7DE43A5B3D3A3190C3E827417CAA761070C63E7790F8054CBC2A8CB5ECFAB8CBD74A2208974A2425BA2411922DF658CB27533813108DB1DED21A8419480CAC94DA3320A0E826F84268987D6EB437620D356887766733551E13F764F626792D19EFBB9C1A5DE550C906552E7FB9D5AE6CE5E4214B294124F6A1E9688EC72B3A09EB135A6AD579CB0407C5EEBACEF81CDF1F69BAFD3A941CF98563B94FD47B3B1F3FE4A6D118BEF294537E6EB19662FDC8E94D081C2F2A56D68878D180134EA44FCCA5EB7341460B6EFC27E5D12ACB5973643B1693322A5B170DE76962533EF1700DC171A478F1938803B8735A1DE230078C1A8DC319877083AAEC7C0C7CB70951ECEF42A4A67EFFB6A65C4585338A3F0DF11234EFD29617D1FD5C913B1B383D3C4C1C94CCB3568BCF705B97D9C535E217B04A43121737F373B4EFDF08768D68F34D1DB92CC01F32B0450AED0EAA60F72C198F51D1BD6DCD7D5BF3205A3817121F3D3B99CB5B82A904F55EB2E83AD5914BC0ECC61613DE2702BB541C92D8CCFAF99D5C52E3CCA2F11840594A83F3C4BCE01A99D5F09CD446CD6591849A1ED676EFA66373C7F0F7204F537189D9BF639723047C552B31067387535FBF511E344A272393B4C5D066D8C35DC8E43680F2D37B1155DEDE033E446F1A44621E8830D2F362301804DB8FC7F06D0325A43BB68902037C7B2D2170CBAD191B95DE101DD9151FD106684F84BB44A8A259C41E39C6C544FD2CC0725BE1F6E65A3AC872F9A5155A6E427646AB2013AFA59AC793E356178FF7C9F1ED545CF56F4A016E1FD576F2B17F03819138BFA8DB09A7043DA1D8F612DD74224766183ABBE7DAEF9717081010D335C97A58FEAC121EA7678871CC51BE0EA84A55599770732EBB5A4C75472552E4933F29DAD06E09E5C9B20DE36DCC0F40361EC44FBC02E44B7B3158AD00039AA54A2C113C8D2D5BC6FD512165E6A7718B33550D3CEB6B5C0E9A7B5EDA261865707C2A385AA68EC7A69A8821E04DBF2DBF167A6703E140C1FDA7D24A3FDC8216852704E811B552B1846A60851D2B816B8D12F41DE04158AED8490DDF6ACC8D1B01F8130F18B83D8AE0CDBCC267C525E1595516972E65598A1E511923EBC7674E68620FAEA18ADA83A8913C125C81E12FD5C6E803481AADC56DA2F3180E51F1800FFB0315AAF0AC8BA3A629C907F72DFC2BF5987A1E6357AE86DF55244E36F4EAFCEC2752DF5C5963C82797213B63981100F320DAAA1F5299023D4567E5FDBF0D6E280D61B0B3E834EEE95F32B2769088D4E18CFF7DD7AC3DE3412BBC7A59C98CEB212A9CEF67477061B951E8A53FB810663F0A9C8E7CF7137AEDA888BC9FE36382EB7695D1E6CEB001A1A66FE5A345EA7915F77E601BED695A5E86741B6174A72906CCCA950B29527EEE7C4C9B074A545FCA92AB6F2DF77A78929E1DC1320CC9035463934222320E99A0ABDF10E46CF71C0DA5B561156F57CBF786A9BCCC9A7CA8CF5E3E947637EB76437FCA987F2C4753BE3D01255529FCFB7BE8A5C27AE952FC9554C873BB0C30FA4C49ABCBA18DCDD3C3A36569D93B025557B2B9DBA0DD895F35CAEF5687E476AF10135D8899D07DE4BB32D575BDFB7A26201F1AF253E77C42CDE50214D28D1ECF5BC50F7F56554FDAD396B729768F283B219AAB952154FBD1C73C1F6E6D135E54C54DCD1BE938C4723143E4D046279DEAB89E9472DE7A19926600C5A9352C4C4F4C4472103116843835DC0ACE6580B66E467E2DCE51D12419438C2D541657DC3D8C552BDDDECB3002F07E54470F2322D017EDE1255760ED1B30CAFCF58ECEC1A68E99A7CE080687C17FCDB8D98592F3BC4BE2AA7F0AE18FACFD9D83CEA3AAF5E80BE4ABB603C3170AEA1284DEFE5CF86194A56E68366F6A632ADBB69AB2549EB5D7AFD4153ECD6B816E55DF36F9E1D8ACCBC669C5CD26A2EE1ED4BA3FC66DCCC9A0667EDF406D4361FDDF9C822D3AB5CE85CA0764419D2624398ABB5EFD79300B920583534C8636A3FDECDD5416E203627047C82D384DC6E9CCDF0B26D5E27EF116102EBCE6F65394EC0B80866FEADD5A52C0CB185F7679CC152A233D6412301A9881B595E87C9A13BC5C58C54B372D520A95FFF424911FF6ED48E53083B228F4B1A28689B5C671479D59C328DAD08F09916C3B9F289CE653AF7A22A564E3ED318E98092EB7406778468647A5C6E38D1FA3F7315CAAFBBFFED3D5DED53C65CCBED35E7B82709F70B7CEFD5FC6916AB48BB7EBFE804DCC7B2E2E1A85CF6F4B2F1AC9C6EDB9F8C010C4D4FC42609E6EDC4FF74A9E1B754ED911C8239722A0EB38E623CA3F3079F728279D49A3A1AE20493F1A3DCE8A9372331FABC95B6DD20A9198031493EB4326591833D16766ECD6053228351E8B0AFABB7E8BE486B5E3DFFDB1685871D91EAAECC682CF6DD0CC59C009B91BC2794EBAB03AD319AEB41D38D07D4A028944CABB2802A04B174C1D29103F7DBBBE4C945A72766F61911E7D487F7A6760120FDF314C7D4329A4B0488CA93955222086714D35E73B0DCE15AF43BC09C39D790F440FE3D5B2BAC7E693094C89BEA34435C3BAB83710338ADF95F65297B9D7584E4E34420D1FDC40EE72ADEABAA506BE9C5322AE9C337ECDDEEC43CE87360BF30EF73139A1DA516DE0D065853F1F691C691FD5AB657ACD1BE80C66A48992665ED86EC6CFDA227E035F9C58E2CAB558DF19742451D87487BD0EF2DAA62AF709BB847566EADEA7872414E0962E697057F013763621B5867C8802A373E0D5DEAD11D94ECF34630E192A2A6CF7421F9689BA289087B0B6145C7B15BD80BA2CB5876BCA9F5E782DE8DAC9E8FDADC96D410E64AB6F5977D1D2471B5E48C4923908B4BB3783887587997B9AFBA113BABC34EDBA6CDB6480A8EAB6C3E034FA77EBFBE76DD94B41EB70093103C1CCCF458743676FF664870D62DEA832F3A416F0D333904397FB71EF90148D6A888A9E3A1FA8EBAFD42B74982E9F26BBA7622E6278E5CEE75998BA415243746220DA4DCAD4C524F3126D1F71879C9E9DA1A15ED4BFF4AEEF0FE8FEDE01A7A2D8E98033E9130EA1169F6F1AE2B675CC5C61093DD3761B92D4A6DF06C60A7D743A5F2192EDCFDD801ADA3EBE364A02D7E07B6278E5ECD6D6720BEDD91CB69558534CC63CD5CB713C1B78FAC4FD0684C66EF739F8000F6BECE637C55E988098B7AA22CFA21603567F896872353B5DD3BFAD94E92E5EC5965FE710934AB1CDC4E25CECB5E02DEEABE06C3FCBFFB55389639B0F8A1AB5776B620E389621F323726EFF1EF7ECF913E061D902718002F81463EC5DA4EABBFEBE2BF0966D6030DA389F7C2DA3666AE10B63B634AE706D19E1281A0F50F06A16C279BAA83EE14340EC915F34C5DF6B2CB506F1B1C5E3934E3D1D8CBA2420F9B3A2B2DF88F1199C1C8789FEB60641388B52BF274B26FDF777684225B99D78E51A5E82E813D88BD1B9C0D4F745D57045A76725DA210D958583298FF9541441B5414A4201B3C2F8D44D68AA211215469B17DC8C22EFB756761C2AE892C3FDD52E8EEC00407355903E1054A8138879C981510B153A9792B21780DA894DDBAF37D74ADE5BED2698E34B239CBF8B6D6697463C9AB1188E3B1A03BD3ACC6121BBEB5E123D06C78C8DF7E6D02DE5390C6649DF80845D99112BC717EC3769D3B9EF5CB8BAF516701C95FBA8EBD0E87D9BE5528C644A90B1ACA44045ECC64FC5A53DD7AB412BD0841332F875B465D832CF24BB1E602A57A350E12A3CAC274EF9653009E827CAD9A5DC5C0F259011358BC37CA9EB7EA08C53A2179DAEFFA116A1BCEE9237BF0525154EAB0C08A53AB8D8C33B115AE684F6DF940C7559207DA64F5AA29ECCAD61C3AD26D3F0CE8665C6869800D09585FC7E2222B212DB17DC3D9DDF167406EB0D02BFD599A887435573DDC30B050EA8FCE8009D30DFE314AE1F339F90FD8C9E9621278D7D68DA8707D0CA119FC2FDD231ABD2CE5DA482870AAC3F633B25F203977D3F28C09A44AC6C6DDD2C128C037228EE146A49104AE0CA91C05CC5CE42EF24717CADEA6BDEFD3DFF6891043E5CA87BF7E1C41C5C5298D60908BF4F2DC0ECE8D47C91BCED4A06EEEBC9D9886DBE502CCF8A848A2FE6CD70DA64ED1BA0E8A5B17FF62A61C64AA97664C287B9796CF9BA230954C457BA92739C35BB467810EA34DBE12F3C14CDD1E2AA8AA08A7E75D240A5217211A25277A278DD8E2FE3FAFFA3C2E12569B9D00F06140074F32CBCED9364671B365646AD9ECA781204DB51B7FC63910A689894F3B12694F4AB1B1F3EC42ECCE9D8484129EEBDD08394F0877679A11C35564E452247D1FE338FAF2048BE2C803E6A85CD5921451F288B3C4E7C4461890BDC596F3F38DD397F3C5C8170C78F56C06B67A6135F138415D9FB12AE4B4A4FD08E184FB18C2A862265EBF27944D0B34F96AD97F6FC5424F917CF4C2D06F26E2CC5D263BC9FB3F0A83BA5782558A2B8094DBB08715D07B52D7E9BC921D5E57060BDCBDE3FB7AC2D6D37D8B947E854BF5489FD50D15D2698CEEC5036EBB2534DA70A3B67A7F8DFE55212F094D22E725A92146BA18278F4427F5231D1FC85615680AF5EE9B37A6A3C59C4522B0D9864054D947748C9A62A9194AC33790ED9CF9E715936061073686E239512EF409531F85D4DB9DA93E6F38175353FE9C5731D2A1D70F98599906C951EF97A0EFE480CEBAC5772A3FBDB2FC5BD58A5645E0AD04A78E9AD9F4C3B72230640BE02DD7EA51BEF35E9FEF6B6AA0B493D7D546F954D19E0BB620587321C326E3FB827D7A538C5C5AD9BF574CC34D10064F0ABC2EFF7AB277B35FA74B21776DE473BF19D17D4DAB1E522304EDB90E029F2D822C65325C41721EE18D6F3C60C1618AF4914CF50F7894FC35AEE5FD7A7D16D039D0E98C860D8704E2D41E74455B1CF639C87BEBA10EA23E4D183DD977DA145D2ED4BEA3C3CB6B9BE2C9B04BB75CA5E1B6E0F6782F27B3C5B1D9E4206A747F42E1D5452977794650FDC2CA9B621AFF115E0338BD777658C5EB337D19BC4B33D7E06945564E923D0F0D2911B9B7FB62FCFC1EA5996C0FABEFDC124DA0C730F53982C36D4F85B390C33849E0C811911446A287304E6880ECAB2C704F806F05C3675A019B5764EC97A8A90AD891B50B6EA88F85563117FCFA759A94FD7A4980B8AC923B0255C43D4A342BA27FF7BF67B9CEC57DB2C85D6336A40F616111C27452119B3594FE710C5C9BA79714C75275BB23D120CCB175494F5CE98E4A6B8B68C7A5FB3AA918AF089638F976A9417F66D084EC79363ACC8A5F23C542DF54209F6C2BA421CF34666E42D0D495178309B1B03139B9010CF55743B66191D455AD6534EA385799F06D57534DEA3CDE1728C285B2D3A021EE267AEA37537D3F937A4D9BDAD1FEA945D42E6BCA79C98A56449F82937929C8977359417F995D4D1F3B052B7B6F1FB369766DDB71B4175B8BAD51E022007C808BE45AC26308F1541B554DA3A45F212B29079E135FBEA7F3CD0795A62700141C7D529A9884E34D583E8E07E876A09327CB43105DBD047054AF30E437468ABCB4EB91370EBBA12A6A1C3254E275C6005B59B995C31D6C403367F96DDBAAF7D8C4851E9272687C8E93157AC59382F4F99A81BF80BAF39A0F40FB4FB759CB6DB2ABA3731032FC20833720F39237D7291567F7C9EC694993DECC62417087B42C2F2C7412E79BE7375040B9654679EE7E3C93BC89EE185F0B33C5611FFB7270D06E98E445601192C7511D0BB4A5754D51B52C77AD24E8B1DF3575213ABBAE34673F50E78ADE7EE6507CD41439E710EF4379816E5E8247380C216C22CD82926571FFD26EDA54268F8673D7C16747DB629AF95E1DADB28F5EEE1324E1D96CD571D2CB4F9E5BF2D73DC0B63E7FBD14F0280E341957694DBA3F90E2A3C23088D5AF7FA50558C63519FDF6B017AB3F7C800A014547252CF07AC2C011D59C5F90BF3B4E6C3EE51F8E31BE8D68AF0C51A4EF27C6FBEC66607F4D8F79FEC68FEC707036EC3642A4725D3267109AA04EA799EE290AFF65F3AC63544E6F08D6AD820E1BB6BD09577FD07B2E651EC2FF598484C7DF78D455E9C2AEAF7C46E1446E67E36BBD58FBFAF80708DB512FEF2DA39B189D7D7AAD996BF61D68DB14701260C1D342C94322EEC120CCC4517005B7FEC577B7577D07837E39C670688D96C1BE35C96A2B859325009FAC012CF57A8DD0739CC9D34560D43D0D3A7FBD5732691D49BCAF25187AA5619EB14A43F4E6E4DA1C6037037E1592C2A4F156F8B3BA5B620B2172AFD8ABFBA9D53C42A690F4A106919FA60446B4CE6BD94DD59FA023C0702B3C4A8012D8A9D72B4AAABD70F783240A66A3CF64F5C28864AF320CA929EC921D73F333EE974A05517E7BF45D01DDD17DAF731AFCE1AD8B398568DDB28204D59B5612150DC29DEC534AB9AE53ACA1339E77750477D740BE7DCA2056309C8C46B93D2D2FA6A30B50BAEC7D956F22933690844A57554DDF9405B31D0708AF296C8F83C62B931B0CEAF6CC2340B77C7A1C81DE5643E326F76D33B7C8EBFB0ECA02B93AD552AB79F1946680503F8C86DD639CE8CA76F3A4F44CE2DA8EC52FDD9252999FA1DE83A090686D5E15BF8252C240C0CF6EA5F0655324F35B42C2343E387575E5A442E770B286A7F3BA9FF331911F8C28E8014A70AE3DDEE96A1F845D95E1BBD668A423AB76DBD581FBC289229AE1284E2A1A4F66852787916B04DFF50DC55B5D03550C8BC17B966448C286E986A2A509DCDD864BA0F34A4DBE2FBDBB4E975D19DBC57F3F9422F790E07B2CF92F193DCA28FBEB90AD613D0B3BB5A689D291A0B49AA639E9352B8D3C97CDAF3A7981CDE1899037CA6F71D1B6CAD2442079631049987A8044D53DC5E051576BD2649E5FBD21D1414D665094DB82E50EB23E038C923DE786E0CA6ACC144216871FF759B77F0EA70928670437C40A41F9BBF5CED88BCC23FCDDFAD9ABF223182CEE5CE14CF8E2066E5C66C20FE8CA176BD2245EF393CB842A8985EB26633C38425A0D88A32E9A84DEC5BE9B163181DE446A5B1373747EE3D85D361E72C3863D596F78647163D2BCC82B4DA8AC92C8880FACC6B76D063B557A54A4D31380F2841513DDDC520989EEA9488EAA667E9E69E9F97B8D773628E595A4CDFC1D91BA76FC56CAB6030AF219C8C23AEDB07831944C47E4D93EB7E09911BCED6F5D4A089ABA31144EEF0F5F36A6F4356FFB7A3E67E54011D9DCF8473A17D151E351AA617DD36AB38244A4D5D14D181FAA9798DC4AEE0F4D7821ACC3D69E2C286C2231D686A232A2C30CBA70AE04F9877F3E55C7E6731B5C2A8199B1BEC4323AC7EB1B523895F4D6406814FCAECF45374C5D70F63223E35EEB2D1E71620E323B75B881243F1481F34C164E5CEA455A1368B42BC00379AEAB9655534BC9A8A28D1A2C91F6378D4F95089679B775680A756A4BCAAF1509336E75B114922AC160611C075179E22E4D143B946B17CE01DFB6E0E336FDC303F6D6FCC80BFB6B1520281E59A50E34FBA565D08CAC3C59447924F5723B1810182044D63FEB6D9A6323BB46E11C5FA25094F052F81C577CE004D298741BB0F78D2EA02F1E17C1149A817A9F6C7A223B86CDF494C2AE76648E29E0F18E7F6A810E71DD8A4C4D2210DB19B31E76362C9BEC5717C68585E21113870B2A830A2B8659C5AB678FF7D71D48D69ABF2E6EAA7B407500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/AEVSNW+Geometria-Light cguidfix
/F1.1/AEVSNW+Geometria-Light renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
2 w
0.60000002 i
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
0 375 m
750 375 l
750 0 l
0 0 l
0 375 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 0 375 cm
0 0 m
1500 0 l
1500 750 l
0 750 l
0 0 l
h
S
Q
q
33.5 346.892 m
301 346.892 l
301 289.892 l
33.5 289.892 l
33.5 346.892 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 33.5 346.892 cm
0 0 m
535 0 l
535 114 l
0 114 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 750 375 rc
0.5 0 0 -0.5 123.5 330.97299 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(!"#$%&)[ 22.356000 9.756000 30.492000 22.932000 26.496000 0.000000 ] xS
0.5 0 0 -0.5 361 340.5 cm
0 34 m
(&'\(\)*+,\)-.%\)/'01-2.'/3.'144+35'/0\))[ 22.464000 18.864000 21.780000 20.448000 22.752000 21.852000 10.116000 20.448000 12.528000 9.612000 25.488000 20.448000 21.240000 18.864000 14.868000 22.212000 12.528000 18.036000 9.612000 18.864000 21.240000 21.780000 9.612000 18.504000 22.212000 32.904000 32.904000 21.852000 21.780000 9.180000 18.864000 21.240000 14.868000 0.000000 ] xS
0 79 m
(0\(-1+6\(0."30\)-71-\).0-/3281-0.91-.!54\)-2:)[ 15.228000 21.780000 12.528000 22.212000 21.852000 22.716000 21.780000 15.228000 9.612000 9.756000 21.780000 14.868000 20.448000 12.528000 24.948000 22.212000 12.528000 20.448000 9.612000 15.228000 12.528000 21.240000 21.780000 18.036000 22.716000 22.212000 13.608000 15.228000 9.612000 12.888000 22.212000 12.528000 7.812000 21.456000 9.180000 32.904000 20.448000 12.528000 18.036000 0.000000 ] xS
0.5 0 0 -0.5 46 70.5 cm
0 34 m
(;1<\),\)0\).!54\)-2.+2\).=53\)/-.>5-536.%1+3*.%1?53.19.@.2A/82.10\(\)-A52\).=16;:)[ 27.900000 22.212000 27.900000 20.448000 10.116000 20.268000 14.868000 20.448000 7.812000 21.456000 9.180000 32.904000 20.448000 12.528000 18.036000 9.612000 21.852000 18.036000 20.448000 9.612000 21.348000 9.180000 21.780000 20.448000 21.240000 12.528000 9.612000 22.248000 9.180000 12.528000 9.180000 21.780000 22.716000 9.612000 25.488000 22.212000 21.852000 21.780000 22.752000 9.612000 25.488000 22.212000 22.716000 9.180000 21.780000 9.612000 22.212000 13.536000 9.612000 22.608000 9.612000 17.748000 29.304000 21.240000 22.716000 18.036000 9.612000 21.564000 15.228000 21.780000 20.448000 13.320000 29.304000 9.180000 18.036000 20.448000 9.612000 21.060000 22.212000 22.716000 27.900000 0.000000 ] xS
0.5 0 0 -0.5 723 24 cm
/F1.1[ 24 0 0 -24 0 0]sf
20.688 23 m
(B)s
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
459.5 258.37851 m
569 258.37851 l
569 218.37849 l
459.5 218.37849 l
459.5 258.37851 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 459.5 258.37851 cm
0 0 m
219 0 l
219 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 750 375 rc
0.5 0 0 -0.5 479.25 250.9595 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(!C&D.E:E)[ 18.756000 26.784000 22.464000 23.076000 9.612000 13.104000 6.624000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
591.5 258.37851 m
701 258.37851 l
701 218.37849 l
591.5 218.37849 l
591.5 258.37851 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 591.5 258.37851 cm
0 0 m
219 0 l
219 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 750 375 rc
0.5 0 0 -0.5 611.25 250.9595 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(!C&D.E:F)[ 18.756000 26.784000 22.464000 23.076000 9.612000 13.104000 8.064000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
243 258.37851 m
434 258.37851 l
434 217.87849 l
243 217.87849 l
243 258.37851 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 243 258.37851 cm
0 0 m
382 0 l
382 81 l
0 81 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 750 375 rc
0.5 0 0 -0.5 273 251.4595 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(!C&DG7H%$.IE)[ 18.756000 26.784000 22.464000 23.076000 16.668000 24.588000 30.456000 26.496000 22.932000 9.612000 25.704000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
173 194.37849 m
378 194.37849 l
378 153.87849 l
173 153.87849 l
173 194.37849 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 173 194.37849 cm
0 0 m
410 0 l
410 81 l
0 81 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 750 375 rc
0.5 0 0 -0.5 213.5 185.4595 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(!"#$%G7H%$.IE)[ 22.356000 9.756000 30.492000 22.932000 26.496000 16.668000 24.588000 30.456000 26.496000 22.932000 9.612000 25.704000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
118.5 258.12851 m
225.5 258.12851 l
225.5 218.12849 l
118.5 218.12849 l
118.5 258.12851 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 118.5 258.12851 cm
0 0 m
214 0 l
214 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 750 375 rc
0.5 0 0 -0.5 146 250.91901 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(&J&K)[ 21.924000 23.364000 22.104000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
48.5 194.12849 m
155.5 194.12849 l
155.5 154.12849 l
48.5 154.12849 l
48.5 194.12849 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 48.5 194.12849 cm
0 0 m
214 0 l
214 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 750 375 rc
0.5 0 0 -0.5 76 185.37849 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(&J&K)[ 21.924000 23.364000 22.104000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
268 128.96651 m
400.5 128.96651 l
400.5 88.966499 l
268 88.966499 l
268 128.96651 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 268 128.96651 cm
0 0 m
265 0 l
265 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 750 375 rc
0.5 0 0 -0.5 297 120.4665 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(H3\)&\(10)[ 30.456000 21.780000 20.448000 22.464000 21.780000 21.564000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
418 128.96651 m
550.5 128.96651 l
550.5 88.966499 l
418 88.966499 l
418 128.96651 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 418 128.96651 cm
0 0 m
265 0 l
265 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 750 375 rc
0.5 0 0 -0.5 447 120.4665 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(;1<\),\)0\))[ 27.900000 22.212000 27.900000 20.448000 10.116000 20.268000 14.868000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
568 128.96651 m
700.5 128.96651 l
700.5 88.966499 l
568 88.966499 l
568 128.96651 l
h
W*
0 0 750 375 rc
0.5 0 0 -0.5 568 128.96651 cm
0 0 m
265 0 l
265 80 l
0 80 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 750 375 rc
0.5 0 0 -0.5 601 121.4665 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(;1-4/,)[ 27.900000 22.212000 12.528000 32.904000 21.240000 0.000000 ] xS
1 w
2 J
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
0.5 0 0 -0.5 156 174.5 cm
0.5 1.5 m
33.5 1.5 l
S
0.5 1.5 m
33.5 1.5 l
33.5 1.5 m
22.700001 -1.5 l
22.700001 4.5 l
33.5 1.5 l
h
33.5 1.5 m
S
0.5 0 0 -0.5 433.5 243 cm
0.5 1.5 m
51.5 1.5 l
S
0.5 1.5 m
51.5 1.5 l
51.5 1.5 m
40.700001 -1.5 l
40.700001 4.5 l
51.5 1.5 l
h
51.5 1.5 m
S
0.5 0 0 -0.5 200 217.5 cm
1.5 46.5 m
1.5 0.5 l
S
1.5 46.5 m
1.5 0.5 l
1.5 0.5 m
-1.5 11.3 l
4.5 11.3 l
1.5 0.5 l
h
1.5 0.5 m
S
0.5 0 0 -0.5 225 241 cm
0.5 1.5 m
36.5 1.5 l
S
0.5 1.5 m
36.5 1.5 l
36.5 1.5 m
25.700001 -1.5 l
25.700001 4.5 l
36.5 1.5 l
h
36.5 1.5 m
S
ep
end
