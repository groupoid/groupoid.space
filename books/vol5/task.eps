%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.6 (Build 17G65) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 749 375
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 749 375
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: OXIYQA+Geometria-Light
%!FontType1-1.0: OXIYQA+Geometria-Light 001.001%%CreationDate: 10/10/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.001) readonly def/FullName (Geometria Light) readonly def/FamilyName (Geometria Light) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -75 def/UnderlineThickness 50 defend readonly def/FontName /OXIYQA+Geometria-Light def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /T putdup 34 /A putdup 35 /S putdup 36 /K putdup 37 /zero putdup 38 /emdash putdup 39 /x putdup 40 /F putdup 41 /C putdup 42 /U putdup 43 /R putdup 44 /space putdup 45 /numbersign putdup 46 /one putdup 47 /slash putdup 48 /W putdup 49 /two putdup 50 /three putdup 51 /E putdup 52 /V putdup 53 /D putdup 54 /M putdup 55 /O putdup 56 /a putdup 57 /s putdup 58 /k putdup 59 /u putdup 60 /r putdup 61 /o putdup 62 /n putdup 63 /t putdup 64 /e putdup 65 /nine putdup 66 /N putreadonly def/FontBBox {-412 -220 1438 923} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF1D53D6B91070844A9B74E43083EFDBF34C5770D328A6B574F14FE01D76EF86C53820A66FC19E082B068B33DABAD55F1C291FAFFA23ECB9F8EC0605C0A9E3B85544AA0CCDCC141DB39B406D85EB4F2360D566193F2E4304400A6D429C392CC8F67A0EA0F770FC6BBFBA1FE0DC4B2CCF7B9E36939F6213CBD9A315109B45B3091B384BEA5A47014A2251E509D4D739D949CD8FF6A2D0AAA50CBB2DF70AB1AF2D690BEE8CD1EA67A213BBCB1A9C57AED5B7D838409580D19207BAD2DC663A48E88F7C6E17A0025278F0405846D8AD3917CD695ABD9ECDCFE9388A58E529E9A93F37FBF1227FC2072DA48F2A5F31C39995BADB5A87D269011036574C925530BBE3226885E9D99B3F93478CB75E9321538D721117E0A089412DA8B005FC3AF2202B2A2FD54FF131CBCB943AF1C970F3DC145CD6BFFD9AFDE174D7BD5E7D0E479B0E77B2100C2D5E422B61B283B2A57CA9BF34C2F625C90F35222BA07D238F445A9B58A5854C27A8EDA066F35F20C41022D8F93424D89E8E9901EE6DFEC6CE807EF022E3CB6D16D563BE808DE64EE6407B9D5E5D5FE57D5585AC7F0B830D9F8D6122A2B107C4FBF10ACCEA3806597ABD5FB9B0FF9A2866E6B89283E06449107023782FD7CEC7D7F35B42A0D09B3A8ED2642F006A2C7C9F3101FF7382FA894C4BA1DF6843E0D1B56C6A97A070BE5BE672D65F852A979C0D40DF44F5C1E6A26D5AD434B03AC82FA3616C69D117B1E2275967675DA21D50D273ED980F682273177C404164F941D034EF23B86E62781A610947BB447654EC51FCD2E773ECB9500D63419B82261525DC078648856F7B90929BA453776ECCB2FAF28873AC0918F376A43C9ACEE3275325302C24E28A0D3AD4D86ED5554972695179D55EE1CDCA15400ADE9E7597EAA6AA248FEA0205DA8FA0B80DDB3434FCE1E45C87B10C4039759BF648571B3EAC88F401A62397B71F305F33DCD83B92ED4473F8EADBA526FD009E527F19970BBCC4E877E5419C4455E69C47FA1BE75FC09D8A5047F94B01CC6124D7C9D8B8DC7FE0994D75547CA26014E5DC02A62A721DD845E076E33DBB2181F43631B49D8F52CE2B2B7D58F418E1FA3C2C80FBAFAE2ADB52FAFFDA55283EF33161E8BB3ACBBA792EF4C3E122D4EBBD9DE6E03334C27742E48C0EB23AC6BE63886FABE5F61C2B1516A7BC72E2B3881A69E029E672001F9836F6D16F2A49E887BD21302FFB58F88874A3AB27DC26EC1123DBF9E8464FA5AC612A5865E25405DAE116DFA0886923787BC96B6F19C973B4B6B67CF8382FF52CD579248C06215F22045F015EE66D2FA73DB4841247F023C06D64B8C2A41D634668E5B741FF1073454EF992AB85E28B409971B39B8B3F0AD0A240CC890739DADAACC2F4D3153C183EFD4D1CE515508CAC76EAC281BF61C46D54FE452D43F700EF89E7E3F61069C36341ABA36EAB667C27EFF4CBE60EA3D00A0899FC68F9187ADC720D8AD15C4C2DEE5654E0D246D34515B408A5B580E54B11C6B2B3B6F0F283549C79F5885D6C79986B756E2D5233967C1CD79DF1B497261E4EB90473D74A63303628F4530033AC16AE9ED1731F7F6C24973B1DC5B7F74529AC8D96D665AF24E0301DCF5B8BB3282239C026BDAA56EA0C790564C3A31CE860B46F643D5D7801667DF3720301A4657947B917A9B695DAE33011CD9DB550917B741B931C3E6CE8CCA93F365A0C2F2A4948AEE2B51336A87CDBD7CE7DAB04C443AB3CA48D93A5AED3065158F26FD4D19274FB30243375A36D7342098BAFA285C3F453C415A58446DC087BF763A392B1CAF8677A29E2BB9C793F5692DB647318BA2411F83166A368F6ECCE1DAECE46F4D2321F52C86EBEB2A7EFF72F73A3BDC8CCDE7E61625D98EFB2143837F5F57A061660BB0267083D89051AF8A460A5FC8AC3893712B7D4C0B98808608B318CA523EAA4D60EB93A2A66D2446A17ECAC95CA0419D9896155A26BC02E08256762A052E6DDC48C0D2B9674FB15A8412F7BB5C5351EEFDFF617638AB8F256C12E71C6FFD33034726F0A9ACEF05F055A5EA3DEAB7A271113BA695B53593096C32A6990696898BBB11AD2794D6A8CE270B84CCF26F80D48A9A9CCA90398A939F500D2D45D1F69C9B4A173503547E7AEBD8D1677F77BEDA5033230B44BBD1622C1E42B6BC4E8CF81862456A7757BC62CACDF01B488E134274269D0851D759710304B43604BF5D625DF67FE06F72AD125E23BCE8FD66DB4AC67B59046A616FE407931154C9919530405E119BE8E3D2B065226EE94B09D7D38B5C05E7FAB97105A236B7EBEABDC1C6E3422F15D71D87F253C6CD4A917924A6EB7BAA9F68C330141E50113FA304C60824FB59623A7D7F0CAD08772B1C50B64288F1D5BE930842321D15CAF8D63AC3C6DEFE93509A4E92D54D7023493660263A36BCB1AAC905BD57480E80350D78DDD87E89B60191CD36E6B7A96CF1BC9C27E7D35AC32532C3C55DEAB0BFD5DE3D3C4CBD27694DD8E2E2A66ABC9FD75A71F3D0754DCFCB636DAB8CEADB01E504633360A4C17C986615EAFFB8FB141F31AE828829CF3F41895B06C3A5A896812BB8DC599CD90846988A9101CE334CE76AAADED44D97D9D78D5681AC294B45E7F43FBACA6A4CE1A5C68EC3E1D1B5A1F20E8E5A77847C6C18DC023D011E7FA60A734CB37A5330B11648B36FBF49DE737A5A50346C155E58B8D7AA26F4327B8D9FD5F71F8684A220B673F6A07531766D5A4FF176558007B4D280F7A5DFD33571053F8A527B58C79FCF1D55D720B6CD599C072095AF124551410E8CBDFD5DC70ED20C2390BB322B9FB0A1785A9582339FF030E210A331E0EA3E8083EB5796A81A0F399AA489ADFE4A2C0AB9684BC10E32C10A118F9C6EB102DD70997D41FF12D7D038B2E2BBBAA8D13AC0CA8E6A4B9DDDD0F720D620EADE33FECF3E33071D47C5AC7413A059F6B60C56B51C33773E130E0D4E2B1CFBC53AA72A61EEF3E9DC5A9E6F824E15E573949C6ECB58727942666EA817606E5BA57C4A611937F0761373A6D14D38B2117FA1540F03E748E8F3B92F3D7890AE1C1AF39744C29EE17F74D5B11A88123789EC0DF28D3ADDD5DB98BA12D6378E3E0D21156DB04757D113B7DBFD80055F7F4DF3D30F2FDB72E9CB04C3E47A683C5A4A410CEEB7F46E4F84D50DE717FA7C4E88125E26F9C4FF767E5EF88601497A45DC842B3A275E1B48EB1F076C02887FBFB7ADB96C5388B7CE2A3AF123D2B1491F96ECF22D7F8321BE1DC5952F790E0FBFD26DADD637965DD7993C09CDBAED400695EE476102872FAD3148C339CC3B1A986556D7DF58A04C90EBF86FE22DD93E163C80C44A3ECA2793CCCB53AF67BAB798B960618AB5BD015ED237B8C1758635F32B4F8CA4164D06E64065023F7F6D8DBB82D1E6E788B0C1C1F15289AB45F4BCC7A7FDF89650A648C511C9F9C5A7FEAEEC8AAC29D680CFA56E8F7D137466CD755744BA286820673CF28E53AA0D10BEFAB60D27AFB27C7EF2D42F57E61BF6DB6B1E90A8B71D1FB0DFC2F3FC663C3397F0149652A092466A22F7F5D6D81358C9F686090C2B1461A531D9644BD0163D1C02E8236659C0400B87797E571B00BF2AADD0EB0820EBE325AB3BE5A8D01D56F1B9ED875E9A1E99E724F409FDBF2A0F808FA8357494B1DEC414D66F7C1648A10CEF75F5585B28CC7421BB32DAEA7794B3148E32B20349714A4C7A1CE880210740883F789CE58AE42657B924890379D5471A9F94B303E6E890DBFB3A714240DB8C0D5029E58C6F9F474924A0698D48CDEF800965533833FDBE8EB59F6C44B848547BC28E1AF56E052E2B0E7F37B089ABEBE84AC580F91F0FD09439B5776CD2CAB63D33AA1466B42B785D88BC2AC8F954B6D1F292F1C6F689721F803334169756BD09A02A92DF5230D1689D5EF33031F93633BBFA8EB89025570B9C226299BF1CDBAF8EF68710CF6E7802C1AEC889CFA1E93771A27ADCBA3C9B7EFE6CEBBCB035AD6DC845C456ABE6C727DA41E4B74056466DD26EEEA6BC47DE66ACCDF1FFA65090F3830AF44234439F84348F55AC87BBC97CAF17E7D27B49044C048B811B1087D14C600B440D9166D322BC32E701683FF234BEC210699D65251BA6E9D593D24C6A1F4C938067DD19BC5AFBF361531172B649327B2F4CA41C6C2DD6AB56D6704AF787B3AB0B046F6CA69FC1FB262D0568DC5E00408F7CA039FF31267774846C3B8C31F42E549F4C951CA9768E4C65EA6B741E5F649525E53F72747B529BE47FD0431B5179A455A4BF8291E69A566F5C652215C23C52018EF6E5E6BA2E23889195CCB5789F1CCDEF0CC971A3093749ED776731EA5FC978FFEDADE007241B5D8E54BA43469CD11EE0C33B687F18B8696B260E8976E8BA45A565B01A0D93FE3E1A70AAF6EC578B5838D844C10B444632FD597DF84A09039E7420FEE21679550C9A66DB10C8543751799861C62D946302EADCC1933D3114B0D9D6178DBB9E478D864AA3867111470053D536D7735FE529D2E2C498CF5F19205B491EDE0448D9CF6FFAEBC19DD70DBE48F2D6715907358A83A25C552831CC98EED755E5B418BA03E6A1E6595BFE5EC276C008F267D0C58D1BEEF4FD42555F90F8C559B8B060BD927E0F0B8E9676D05542D0E55DC27DFABD22ED98098E352F95DC56A7F019F95C20FDC8D1968488BA4C1E482B6951D31F3B531E4E9965D004AEA7F3CE67E94FD12D4F07EF6E347DC06EBE24229E609200EA0F0A44DA02F1ADCE7F5A9F73515DBCB6A54B25CD3A1989E05FB8ED10C645AC820B0F87DABF38BF09AC2443FC62336ED161FF55B983D5A8555D643E420C565F748C543EB112D7F62325900F1DF44922C9B8F209930D6E44393BB06A995E571EE20D13FE7ECBF42DBB1A9AF6C68E4219B8150AC9C3EDB502C7C1C8942778CD1C57FB41FF099C0EF63D89AD68C7A1AFB26B8B51C14A06137DD7BD87574DEFC425594A22D444AF034A95D25A98CA88B3E2166A62D9B6D05225A5182C066997BEBB9644C8C3C0DDBD9EDE5074896B2FD8A4BCD7102D7C895C2F3063953BD2F34431DA0649C62EAF5F9010B4789B59B5B2447A2B57A36F28C96D0FD951968541A4584A89BD235ADB26332DB72F5EA502D25B0B45EE919A37F73811EA1CFBA5E8D1406DFCB233C0AA4AF91929DB9AE8DF83A154AC7721782867CD0102C4C4045E56A68BBFDE2B396F0749EF974A88D7D961B62B9B0E2CE301DDDB95C0342BC5FDF87538D53247E4216D5BA50C4AB8749240891CFEEBA27933C9552F4803D10F3F8836E405657D25DDDAAF69C13BB8795039625753FB0847E59358718410AD603A36FC2FEA5610C26BF84B23646F60AB787D3A36A9B2C36549B9BE9BA3C9E0005635F565A4AC97E4252C61DDAD790327E0CC368F867531813B2117394096222C23136C690C460B09F384CDA54E438B992A1FBA5B38016D6DC01FC86A162FDCC59C596C658FD743CCF72B4A998ED2E89433B9455D09F2D466E259EF2E51ECF8425C980500DA912D06C0088A3F66266327466990990C451E70017FE8126DF2BB8945D55F11AFA922EB36AACE926BD8F5F095EEF3DB1AD12E1F8B70507FEC8723CDDC20BA36459DD98EF3AC8E75ABF29C83326BB04B3602C0038AC25AF55A8E05F5966EB72C00B939B30D44EEDF1DDA94BBF401BEBB8A49D4C2EE99019942125EDFB2A94CEB247E2A41704FBD304A01B63D50E883D469D5D59C84F60C906263B3F2A6CC52899DB544659A5646ADF32724B93E5B45D706B45CCCAEA0E38E91D023B342263F12C3B694BEBFFFB031D6D6BB6535278E2D21E9B60CB399C85844C47BAF4EDF16B4EB8E084AAFED59E9DBB3052DC7B4970DA07AAB6822ED9880FE68A4D3725E95A496E197A56B9E25FE109B7F4E940EA1AD28A539823CBA9DC2E6677B64A9262FAE474B951FB250A6D02E638F39427F93DD21D3DD6736908041994632F92ECFCC9BEDABF7979E77105A6726EABA5ED79FD4C29F86A5C930EED3AEA4DA779D17B5592F36271D5180778FA8E5B3C44A173FEACE2D2C17435A56025A9E001AABD08B73EE6AF76DA088301570348C0EB1EE3528BC05623D665DCF59B17C55F9C95CE7E37D2357610E2AF8AEC0AE804FD1AAAA586839FD41D4914BB34D2805DEFB1B1741E2337F722C9A57A81BB016BF303076E1BDC56F82A3EE50D433E435924F81E8DBD5BCAD5BE5A42D9B1259B949F24C91AF6209CC0799C965468F2E69362F29262C97755312E4D099E2F4140A1F650E4BB1439275B6E5331F00633CC8E1BF00FBD6DDCFA40262BC73E44D014B87300BB41802E50D3EB98CC9C0520FCC1B36F6F353CC50705003EBE5C5C6B0ABBA6DCBAF3B9585FC40989B9E69A9CE97B117EF3DF597F4DC43BC5A812518E08C7FC6C68BDF0A95A4F237EA93CE882681CF7C8314200BD52A4BB197A4A6D39388D3B0D51350BAD627260F520B2C2C2500CD75B8953EE34921242BC6033E4CE74463DDA87484FFC8FE36523B2BD07FE95D36E7313CC62260C1040AFFADCFA35151B35C18495B2873574E6B3494D4C56622715DD6C939356518E5C65E330523E9DB3A08CB35BB7A791C061367B5FA5B6CBAE764AE46F2AD5A1E9B44501D0650C0A20CF69A8F6A1DD73B3021E4560133CE02C075AF3DB84B5CCBAA8A2BAAE3E4624C759C883243A4E5FF6904AC0FA5A7D8109ED0C9A4272F3F0FACB6718D5FB2C599CE4F599DBE81DBE3D540A4A99A3FF184133C876FE68077663F23E810B953DA16F154F71FB420D2E4327F8D1D869EFD9338CEE76FCE535F3D9A8582731979F4CA7058E489B4CABBE2F39A374415B62C1F5F8E31E006D6ABC736057910A3729AC60360CEE1B2C8D9F773363ED24C0C6998832D2AA521B5271CDB860D4729F7061A1D2AF9901E59AABD01F27D909693AA4AAFA7C32509E95153571E50E5D2B6A05A6E4E139D5B5A12562E6BE814317D05251A9C0E892142F201432A7D07FB389A85017F4BF99E1C416B3BE9FA157D9703D7DE43A5B3D3A3190C3E827417CAA761070C63E7790F8054CBC2A8CB5ECFAB8CBD74A2208974A2425BA2411922DF658CB27533813108DB1DED21A8419480CAC94DA3320A0E826F84268987D6EB437620D356887766733551E13F764F626792D19EFBB9C1A5DE550C906552E7FB9D5AE6CE5E4214B294124F6A1E9688EC72B3A09EB135A6AD579CB0407C5EEBACEF81CDF1F69BAFD3A941CF98563B94FD47B3B1F3FE4A6D118BEF294537E6EB19662FDC8E94D081C2F2A56D68878D180134EA44FCCA5EB7341460B6EFC27E5D12ACB5973643B1693322A5B170DE76962533EF1700DC171A478F1938803B8735A1DE230078C1A8DC319877083AAEC7C0C7CB70951ECEF42A4A67EFFB6A65C4585338A3F0DF11234EFD29617D1FD5C913B1B383D3C4C1C94CCB3568BCF705B97D9C535E217B04A43121737F373B4EFDF08768D68F34D1DB92CC01F32B0450AED0EAA60F72C198F51D1BD6DCD7D5BF3205A3817121F3D3B99CB5B82A904F55EB2E83AD5914BC0ECC61613DE2702BB541C92D8CCFAF99D5C52E3CCA2F11840594A83F3C4BCE01A99D5F09CD446CD6591849A1ED676EFA66373C7F0F7204F537189D9BF639723047C552B31067387535FBF511E344A272393B4C5D066D8C35DC8E43680F2D37B1155DEDE033E446F1A44621E8830D2F362301804DB8FC7F06D0325A43BB68902037C7B2D2170CBAD191B95DE101DD9151FD106684F84BB44A8A259C41E39C6C544FD2CC0725BE1F6E65A3AC872F9A5155A6E427646AB2013AFA59AC793E356178FF7C9F1ED545CF56F4A016E1FD576F2B17F03819138BFA8DB09A7043DA1D8F612DD74224766183ABBE7DAEF9717081010D335C97A58FEAC121EA7678871CC51BE0EA84A55599770732EBB5A4C75472552E4933F29DAD06E09E5C9B20DE36DCC0F40361EC44FBC02E44B7B3158AD00039AA54A2C113C8D2D5BC6FD512165E6A7718B33550D3CEB6B5C0E9A7B5EDA261865707C2A385AA68EC7A69A8821E04DBF2DBF167A6703E140C1FDA7D24A3FDC8216852704E811B5285DB96A3B1C8F0F5191C5205A3AC24FDAE3D8F3DACB8F2B7B6F792CDDE8DD5AB6A65104F3604EAF7F6D05C00E0566AA759D5C491B4D49F3FC041809A4D8AB634DAC8746F23903E146030ADCA4C332F4B4705543F38D4F6120313BE070984FD3CC3F08A4C680F34718851271EADE6355EFC3BB06E3B48C204251B5460C3A93BE7B4B5097C426CDA23E07B4CAF5356A4BADEE875977ECA0C69ADF4A555FD8B0DFB5743844A656DA115C08C3BDB87BC6AD3E9A5BF3E0D2A4E7DA19C2E89EF1A6995ACD4F7858D3064B6409CFBE4DAAE053D96B4F7A3767C3E0CE284870356129FF88B4EACDBD1A024D44B57D9F6C92EBFC774E8AC109FB56E17A76AB15041BEA42DF25C5DEF44A11B84725BF9A6DC51A60D08268412FFC2DB97405C21AF9FB97DE828747E8B076270A281B304C4A3DE60F217DE9859565066E98A3B280D1A63B163F5309C168F82672DE9242D920E57C4DB0C0B9A9419417D1DE23D881F67A9A85DAD07204704D54549286451B35125DC4BF0194FF5A6D18AB87C1207D1BDBE5C516914A1C44664020EC406E60C7C43865049C3FBEA9B3D945CB97E7EBF3F132071AC3FA4B2E0A8BE0DF636E835DE47F3BFEF139C9E5E13200660FD9AD4523FC2C3A81D6D004DA861B85B66960D33FB863EA91694ABE315FCEE9A3EED7E86937EDEE320F586143B757D39AC5CF0C3E0017F63A6602E70960E5C39DC0D1C3A4069383C55C6AA62780A83B108A003217DBE2BD4629A5B00F7A6DCBC64F80015524A4F6A052F0084E2F117EFA958622C1B605E66AC0123E1E11AA2DC43E40AA82367387418F6944AC4F2E35E89C6C5CF474268390BB50A8F5D525A1E6A4A40B5536AF8F921F1BADB2F1A8B4A3DD7CA22037FBBE5D24D73634D222C2A8A4524B060243B117D2DD61ECEE7B4815CAE9576A2913EA417D9F29ACCF84CA7EB451D33B6807FDF417686E090AB294FE4E961C1F756CC7DB7BEB59B53904BD5FCFEBB626F23EC2E5A036D15FCB92C561E93CC94DF06BF164121070738838BE7E8700DAC8D5F6FC972B5D71CDD524EA9F20C28110FB6CD58DD5FF1C9386D491F3F71BD670926F0853664CD069089479C3836F97D06DF2E32547D06721AB68556417585657AB5AA194EEA3E1D1D046428F0B08C37527B67B35A4608947D8F965F97922BA450F6CED7975332413BCC3549A0A9F5E6E1B9AED5AD624215BDA66AC3F8A65BEE471DDB495027386100D49B68C61DB42FE2ACF9148B1B99F98D82F5806F611063CFF292928C65E0C9C61645FBD48342BD2FD606CAAFEC089A9C16F054EC48C0D0A7C9C3224ED9F49A3D4363E858579B57FAD1646460E71CA228EA79BDA7716B61E7DF4748B39BBE76D3A98001567C6D7AC3C7DEDF77274275D5AE04E2B8B91FD92A3EA62E50022BA52368A113E28D297761239B1A3268657628618A683CE8B9803002FA218ED43A78EA3A36131B07B0BAFE83DA219F7243864CCFAB9984FA309D546691AF8ED76061C86E19AE3AE7539503042717A8575C99FF8927D61E6CA9AC6796546585940BC51EF412A0B25C083D6AF51B160893F66E5254258E7771659EB6D386B2525A2527FEC9C0244A83170C5CBDCC545722EEB4601E4760CE457FD0ACA159E96C1FE951FD498D473FF1E124894CCE70AB9D21FF382F7B61ADCEB03D068EA50779C642F23530181FB6A0ED3E699F6179AA2A870188E769154864BEA44F4370AE03E854394DAE991BAB6E8626E7E9F37664BB2B96C80B46E430351709E238391B906DFB136E56C1459DC038DE19B299C3C38F70887E914E34A6EE8DC9F19E63B6F88A8C67F863423C3F372669CC5886DED63E55D35129D76814A6478C7E14C8434A3BB29A5246645E3542A63C44FF7AF77678A524E8083C0049D7402A8BAA91324EBA9FA930CD19A99928E40C87705C1928CBC8CB5FD519103CECC2730187BCFCCBE10C50A8E4D0F1622193F8ABB23156B467A1A1A5D110D494F4CEFB091208DBBD0EE4E70C499487BED76568044EE7D308856792A9041DFA5DDE3E066394A72928E7E4CD6527943BEE61B6A448F67720285BBC410BF7A19129417A11E5537444D4E013B283129DCCAC5846A50F749D634ED2812CA70AD28AC58FE5592F750C8065CA45E951AB9B20DA5D6E432A690BF0D521932FC8A081B526FADC704C629A31F0C1FD0A74752E31798D2E8E02E2E954E71353F396BB39BC6254EC609E155C303CD69ABCBCA828FBEE898769E26EF63FE3796DAEA5C025DC8CD232B82985B93CF668A9E0BE27583914A5A254B13FE28094D3E172B074633519FD71E2F45796D543E87335570FA826C70942446031F8F713D7D1EA01FFD6D7C0B4E518319680B109A7927528B325D754051B26D7530F65CA090F2ACBE47EEF7C7D4751A0E01F36EF7B020C04A3A795A35B1852100EAC2A0A75F4DB8EBA91C152ED2A309B663094AA384BA37649F02578515EC78E18B0C5C2408066263D3E7B24E934D51D7D9890A09A249AA8CD0749493D75578ED751EDEE8ECB1F9B60D61A92924AB061A88BA2AEE29A6687C7B2B67BB453E5371F0FF591B6E739C9CD14792A0FDE06B241C3F5B78B42C1BB8CE5F3A677F442157BD8700DA23325955F0E2D004507E4A68E3D61053250B30E07291CEEF4AA9B8DE596E0C88FF6F0EBFAC579A4EF57FFF617B889B60AA19183F9D194E7A1A5ECD1587720064BA90BBD5380AB7617C908FA495F453363DAC8CB2F158167C6BA509BEDB43E9BE2428BF0D653AF27FBB07BB5F2E2A230FA20BA1C995DE9C4F425BDD014D4E86BAB814E8D850CD365208656181AB9AA0A7687ACD799456125D7CE5DCD63237748366C3716CC8CE0E1DEC3C52B3EEE07FD3BEBEFF03973E87ADA5BE089F6BC95F014DDB528BB1FED4110E178BF1116485573077C95920E996110396E54F84EE3656AD1EA9999340F1AE9B1FA4FFFDC96679898C611734AADEEFB478579F9F9251EFDAA84432FDC6D2D05A4BC12C9C26E8F7EEF27F54F194136E7AA49FA8BB9304B547C9FEF85FE5A0A8FCD8B5C8053932DA0D2BB5F012C551716C68262A4E96C7B8813A2152A1BB938B934ACCC04F378C964656BC477332636AD0C79DC627230998DC637E92BC15A93CCE63A0FE19A61ADFF6DE412CA2AE3686F7D7AFA7FE6A5102C79D51FF8B1C1CAA51F0E2465BD5B026CDC382D0361CE69F51B2A4FAB4CAE0A2FB2353DA0C9FAF3B9854DF0ACB67DF2B52D96A2A176013E7BB0CE230044F11E6F0DB28800D43F1EE197F086CC588A7971242778B424ADB5FCFA936DFAF1A4CC42D2FC748492446F3147BC4DFC9811C057B352CD7FB13C96AE077AE393AE073792D574B5A931AAF2F6ED350B57EC132417783934E333F661058AD6D4BE96868091BA67F588207A600949B60B123D109BBE06F6AF737456D1B9392C9F180BFB8D66CA8CE79C324A2E9A95C9F8DA146058D5182A53F57EF65125EFAE793F888EF7F9BF691C54191DF0A17160CA1AF042B8FCAAA9611CB8EF61E2A8F28978B5757D165C30CF61A38B17EF02BA3741ADF086AED18D866D5679DB1535BAFD7DA053FB6D4BD51343305FB4487B86E1D652BABAEB6B6E5C1EDB20622297CFAC981A5012810A31DF9C24F0DED633F65D4681D4612BB9FA4280ADA213EB07FF547292157B2A441967BC71BDC576DA2173E5AB4FAFEAE84316F50E86D7BEB74E364C2B89E30AAB7C2E3351388FF283B51C70E0606A055C67868974A943018F6B499275404976BE5D6EFA040562A2ADA0FA5B35E1E2A2A2B07B3B7EE2F76487E6F107EC45CD040E5C66F8706F9335EEF829C297F5E284816D111EA1C0439EF5223CCBC91B6B4AC7FCA094F3249940693BF3A1F2C93318D551F4E94074F48DEA750EB1DB09BDF9CFEC60CB8B14E1D1D9C42C1759F7CAC9B629A6688680F1EB99CE039622F1C542062C631C0289B7243BA3B2972A7A56E39BFF74DE82A4256E60E45829A03A6DE74E0CB546B3DADE620D6033A76DBC833C5D81D04B62F64928C67B1CB1ED766E99DF2050FD851B9E143D67DFB322117ED8980FC01B9A3D1B9631077153EFEB781A0CE52D3105CD576EA7C8533BA725190C769DAF0833020CA5B9F0F2A05FA93E9A9F6FC15311392790E190FD06AC6011728B61B0EE0EDAD843BC17449808F8EBF96B20ADBDE63DCD7EADC535CE6466F8BC8FCEC0A0EE94BB5DF2A1B17C2611EF324815D0224A806592F350EA1F223A238F56EF4DA1AF19FB92BAEFE0484776E3F19A865C43B28AC4883038471C0106DED8EE779CE5BFB704DF0AC097995B47F909A6A7922A1CF58BC2EC253A612A7ACEC6B899FDEDB47C2EBC43F29468D2A97840E71F768923E52DB1F0532EA0818525EAB0AC304887FA698001D5EE5803EB93BF39390CA9A2EEDBA24FC07B89EF93F9FE638A08622ECA24677B3A5528295A62EE56A21D2486D4BFAFB85E061E938CD4604C954842D06967AC14671D7C552496C73DE1DAB0C19545EE9A0E64E821C93063694F83419CE6FD4547E6B4530E300FF5A6C63FCE776527228B15439A01B97AB81116532AD67AEFE0F52B5D0844D8C7B852628BA1CD667C51AE49DB02FFF4C0A8A7DCB9549DD277F7555782DEFA916A8F84FB841955F97875434D8E17FE62BD6AD70CEB6D7A5484431E444E46A0C878388A58B51333EA61D047A202E550718B54F0456A373AA102AEBC404865770D505D8FA021C5D98ABE05DDFE30B43B5F84392AAE36A8177C90C41FA4A5AF7A016DBC44B305BC8C4D8080C0861E87D5E4C466C0AEAB4658F61635F3DD8B9AB9EA5C2FCDCCC72E25EDCDB0801D83ABD86C5B7460B638306323992A878727AF35C02A2E20AAC9284E86A8CD9AC55483CBE237FA891BBB92A0ED11A61AC066A0593DA6A50A3F7053FA0560F68379732DB9EE51AB21C56DE194BBC646E7FB92281E7B096DB0C49B4B066E114CE718FEF2998EF9C6C5B7B299DDBD9AE305F380131927D8CE85498BEA94FFE01EB92767C03A83D185C38D0DC1F2A1A4FED5E2E8BB00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/OXIYQA+Geometria-Light cguidfix
/F1.1/OXIYQA+Geometria-Light renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
2 w
0.60000002 i
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
0 375 m
749 375 l
749 0 l
0 0 l
0 375 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 0 375 cm
0 0 m
1498 0 l
1498 750 l
0 750 l
0 0 l
h
S
Q
q
40.389709 258 m
193.45534 258 l
193.45534 211.25 l
40.389709 211.25 l
40.389709 258 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 40.389709 258 cm
0 0 m
306.13126 0 l
306.13126 93.5 l
0 93.5 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 91.172523 247.25 cm
/F1.1[ 34.343098 0 0 -34.343098 0 0]sf
0 33 m
(!"#$)[ 17.892753 25.551264 21.430092 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
430.45532 258 m
708.95532 258 l
708.95532 211.25 l
430.45532 211.25 l
430.45532 258 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 430.45532 258 cm
0 0 m
557 0 l
557 93.5 l
0 93.5 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 600.17255 246.90938 cm
/F1.1[ 34.343098 0 0 -34.343098 0 0]sf
0 33 m
(%&%'\(\(\(\()[ 24.246226 31.046159 24.246226 18.613958 21.224033 21.224033 21.224033 0.000000 ] xS
0.5 0 0 -0.5 309.45532 246.25 cm
0 33 m
(\)*+,-.,+/0)[ 23.799766 25.654293 25.276519 9.169607 24.520971 12.500887 9.169607 25.276519 17.205891 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
430.95532 203 m
708.95532 203 l
708.95532 156.25 l
430.95532 156.25 l
430.95532 203 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 430.95532 203 cm
0 0 m
556 0 l
556 93.5 l
0 93.5 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 497.09674 191.90938 cm
/F1.1[ 34.343098 0 0 -34.343098 0 0]sf
0 33 m
(%'\(\(\(\(&%'\(\(\(\(%%%%)[ 24.246226 18.613958 21.224033 21.224033 21.224033 19.850310 31.046159 24.246226 18.613958 21.224033 21.224033 21.224033 21.224033 24.246226 24.246226 24.246226 0.000000 ] xS
0.5 0 0 -0.5 328.45532 190.90938 cm
0 33 m
(\)*+,-1,+)[ 23.799766 25.654293 25.276519 9.169607 24.520971 19.644251 9.169607 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
432.45532 148 m
708.95532 148 l
708.95532 101.25 l
432.45532 101.25 l
432.45532 148 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 432.45532 148 cm
0 0 m
553 0 l
553 93.5 l
0 93.5 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 453.45532 136.90939 cm
/F1.1[ 34.342999 0 0 -34.342999 0 0]sf
0 33 m
(%'\(\(\(\(%%%%)[ 24.246158 18.613906 21.223974 21.223974 21.223974 21.223974 24.246158 24.246158 24.246158 0.000000 ] xS
/F1.1[ 34.343098 0 0 -34.343098 0 0]sf
224.74059 33 m
(&%'\(\(\(\(\(\(\(\()[ 31.046159 24.246226 18.613958 21.224033 21.224033 21.224033 21.224033 21.224033 21.224033 21.224033 0.000000 ] xS
0.5 0 0 -0.5 331.95532 135.90938 cm
0 33 m
(\)*+,-2,0)[ 23.799766 25.654293 25.276519 9.169607 24.520971 19.472536 9.169607 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
40.389709 202.5 m
193.45534 202.5 l
193.45534 155.75 l
40.389709 155.75 l
40.389709 202.5 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 40.389709 202.5 cm
0 0 m
306.13126 0 l
306.13126 93.5 l
0 93.5 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 71.172523 191.75 cm
/F1.1[ 34.343098 0 0 -34.343098 0 0]sf
0 33 m
(#!"!3,43\))[ 20.743230 17.892753 22.116954 21.327063 21.876552 9.169607 25.722979 21.189690 0.000000 ] xS
0.5 0 0 -0.5 216.17252 191.75 cm
0 33 m
(5"!")[ 24.898745 22.116954 17.892753 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
40.389709 147 m
193.45534 147 l
193.45534 100.25 l
40.389709 100.25 l
40.389709 147 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 40.389709 147 cm
0 0 m
306.13126 0 l
306.13126 93.5 l
0 93.5 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 98.172523 136.25 cm
/F1.1[ 34.343098 0 0 -34.343098 0 0]sf
0 33 m
(\(#6)[ 21.224033 21.430092 0.000000 ] xS
0.5 0 0 -0.5 216.17252 136.75 cm
0 33 m
(\)753)[ 23.456335 29.054259 26.615900 0.000000 ] xS
0.5 0 0 -0.5 130 315.5 cm
/F1.1[ 48 0 0 -48 0 0]sf
0 46 m
(!89:9)[ 24.480000 28.320000 24.048000 24.912000 0.000000 ] xS
0.5 0 0 -0.5 425.5 315.5 cm
0 46 m
(\);<9=<9/\)=;>?@<9)[ 33.264000 29.136000 16.704000 24.048000 29.616000 16.704000 24.048000 22.224000 33.264000 29.616000 29.136000 29.040000 19.824000 27.264000 16.704000 0.000000 ] xS
Q
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
432.45532 92 m
708.95532 92 l
708.95532 45.25 l
432.45532 45.25 l
432.45532 92 l
h
W*
0 0 749 375 rc
0.5 0 0 -0.5 432.45532 92 cm
0 0 m
553 0 l
553 93.5 l
0 93.5 l
0 0 l
h
S
Q
/Cs2 SC
0 sc
q
0 0 749 375 rc
0.5 0 0 -0.5 531.95532 79.909386 cm
/F1.1[ 34.343098 0 0 -34.343098 0 0]sf
0 33 m
(%%.1%%A%A.1%A%)[ 24.246226 24.246226 12.500887 19.644251 24.246226 24.246226 21.910895 24.246226 21.910895 12.500887 19.644251 24.246226 21.910895 0.000000 ] xS
0.5 0 0 -0.5 357.31393 80.909386 cm
0 33 m
(\)B!,-.)[ 23.799766 26.615900 19.609908 9.169607 24.520971 0.000000 ] xS
0.5 0 0 -0.5 723 24 cm
/F1.1[ 24 0 0 -24 0 0]sf
10.32 23 m
(.%)[ 8.736000 0.000000 ] xS
ep
end
