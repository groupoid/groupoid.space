%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.6 (Build 17G65) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 320 128
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 320 128
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: MSEBUS+Geometria-Light
%!FontType1-1.0: MSEBUS+Geometria-Light 001.001%%CreationDate: 10/11/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.001) readonly def/FullName (Geometria Light) readonly def/FamilyName (Geometria Light) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -75 def/UnderlineThickness 50 defend readonly def/FontName /MSEBUS+Geometria-Light def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /P putdup 34 /r putdup 35 /o putdup 36 /c putdup 37 /s putdup 38 /C putdup 39 /S putdup 40 /O putdup 41 /E putdup 42 /space putdup 43 /H putdup 44 /T putdup 45 /four putdup 46 /A putdup 47 /p putdup 48 /l putdup 49 /i putdup 50 /a putdup 51 /t putdup 52 /n putdup 53 /L putdup 54 /b putdup 55 /y putdup 56 /five putdup 57 /three putdup 58 /one putdup 59 /two putreadonly def/FontBBox {-412 -220 1438 923} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF1D53D6B91070844A9B74E43083EFDBF34C5770D328A6B574F14FE01D76EF86C53820A66FC19E082B068B33DABAD55F1C291FAFFA23ECB9F8EC0605C0A9E3B85544AA0CCDCC141DB39B406D85EB4F2360D566193F2E4304400A6D429C392CC8F67A0EA0F770FC6BBFBA1FE0DC4B2CCF7B9E36939F6213CBD9A315109B45B3091B384BEA5A47014A2251E509D4D739D949CD8FF6A2D0AAA50CBB2DF70AB1AF2D690BEE8CD1EA67A213BBCB1A9C57AED5B7D838409580D19207BAD2DC663A48E88F7C6E17A0025278F0405846D8AD3917CD695ABD9ECDCFE9388A58E529E9A93F37FBF1227FC2072DA48F2A5F31C39995BADB5A87D269011036574C925530BBE3226885E9D99B3F93478CB75E9321538D721117E0A089412DA8B005FC3AF2202B2A2FD54FF131CBCB943AF1C970F3DC145CD6BFFD9AFDE174D7BD5E7D0E479B0E77B2100C2D5E422B61B283B2A57CA9BF34C2F625C90F35222BA07D238F445A9B58A5854C27A8EDA066F35F20C41022D8F93424D89E8E9901EE6DFEC6CE807EF022E3CB6D16D563BE808DE64EE6407B9D5E5D5FE57D5585AC7F0B830D9F8D6122A2B107C4FBF10ACCEA3806597ABD5FB9B0FF9A2866E6B89283E06449107023782FD7CEC7D7F35B42A0D09B3A8ED2642F006A2C7C9F3101FF7382FA894C4BA1DF6843E0D1B56C6A97A070BE5BE672D65F852A979C0D40DF44F5C1E6A26D5AD434B03AC82FA3616C69D117B1E2275967675DA21D50D273ED980F682273177C404164F941D034EF23B86E62781A610947BB447654EC51FCD2E773ECB9500D63419B82261525DC078648856F7B90929BA453776ECCB2FAF28873AC0918F376A43C9ACEE3275325302C24E28A0D3AD4D86ED5554972695179D55EE1CDCA15400ADE9E7597EAA6AA248FEA0205DA8FA0B80DDB3434FCE1E45C87B10C4039759BF648571B3EAC88F401A62397B71F305F33DCD83B92ED4473F8EADBA526FD009E527F19970BBCC4E877E5419C4455E69C47FA1BE75FC09D8A5047F94B01CC6124D7C9D8B8DC7FE0994D75547CA26014E5DC02A62A721DD845E076E33DBB2181F43631B49D8F52CE2B2B7D58F418E1FA3C2C80FBAFAE2ADB52FAFFDA55283EF33161E8BB3ACBBA792EF4C3E122D4EBBD9DE6E03334C27742E48C0EB23AC6BE63886FABE5F61C2B1516A7BC72E2B3881A69E029E672001F9836F6D16F2A49E887BD21302FFB58F88874A3AB27DC26EC1123DBF9E8464FA5AC612A5865E25405DAE116DFA0886923787BC96B6F19C973B4B6B67CF8382FF52CD579248C06215F22045F015EE66D2FA73DB4841247F023C06D64B8C2A41D634668E5B741FF1073454EF992AB85E28B409971B39B8B3F0AD0A240CC890739DADAACC2F4D3153C183EFD4D1CE515508CAC76EAC281BF61C46D54FE452D43F700EF89E7E3F61069C36341ABA36EAB667C27EFF4CBE60EA3D00A0899FC68F9187ADC720D8AD15C4C2DEE5654E0D246D34515B408A5B580E54B11C6B2B3B6F0F283549C79F5885D6C79986B756E2D5233967C1CD79DF1B497261E4EB90473D74A63303628F4530033AC16AE9ED1731F7F6C24973B1DC5B7F74529AC8D96D665AF24E0301DCF5B8BB3282239C026BDAA56EA0C790564C3A31CE860B46F643D5D7801667DF3720301A4657947B917A9B695DAE33011CD9DB550917B741B931C3E6CE8CCA93F365A0C2F2A4948AEE2B51336A87CDBD7CE7DAB04C443AB3CA48D93A5AED3065158F26FD4D19274FB30243375A36D7342098BAFA285C3F453C415A58446DC087BF763A392B1CAF8677A29E2BB9C793F5692DB647318BA2411F83166A368F6ECCE1DAECE46F4D2321F52C86EBEB2A7EFF72F73A3BDC8CCDE7E61625D98EFB2143837F5F57A061660BB0267083D89051AF8A460A5FC8AC3893712B7D4C0B98808608B318CA523EAA4D60EB93A2A66D2446A17ECAC95CA0419D9896155A26BC02E08256762A052E6DDC48C0D2B9674FB15A8412F7BB5C5351EEFDFF617638AB8F256C12E71C6FFD33034726F0A9ACEF05F055A5EA3DEAB7A271113BA695B53593096C32A6990696898BBB11AD2794D6A8CE270B84CCF26F80D48A9A9CCA90398A939F500D2D45D1F69C9B4A173503547E7AEBD8D1677F77BEDA5033230B44BBD1622C1E42B6BC4E8CF81862456A7757BC62CACDF01B488E134274269D0851D759710304B43604BF5D625DF67FE06F72AD125E23BCE8FD66DB4AC67B59046A616FE407931154C9919530405E119BE8E3D2B065226EE94B09D7D38B5C05E7FAB97105A236B7EBEABDC1C6E3422F15D71D87F253C6CD4A917924A6EB7BAA9F68C330141E50113FA304C60824FB59623A7D7F0CAD08772B1C50B64288F1D5BE930842321D15CAF8D63AC3C6DEFE93509A4E92D54D7023493660263A36BCB1AAC905BD57480E80350D78DDD87E89B60191CD36E6B7A96CF1BC9C27E7D35AC32532C3C55DEAB0BFD5DE3D3C4CBD27694DD8E2E2A66ABC9FD75A71F3D0754DCFCB636DAB8CEADB01E504633360A4C17C986615EAFFB8FB141F31AE828829CF3F41895B06C3A5A896812BB8DC599CD90846988A9101CE334CE76AAADED44D97D9D78D5681AC294B45E7F43FBACA6A4CE1A5C68EC3E1D1B5A1F20E8E5A77847C6C18DC023D011E7FA60A734CB37A5330B11648B36FBF49DE737A5A50346C155E58B8D7AA26F4327B8D9FD5F71F8684A220B673F6A07531766D5A4FF176558007B4D280F7A5DFD33571053F8A527B58C79FCF1D55D720B6CD599C072095AF124551410E8CBDFD5DC70ED20C2390BB322B9FB0A1785A9582339FF030E210A331E0EA3E8083EB5796A81A0F399AA489ADFE4A2C0AB9684BC10E32C10A118F9C6EB102DD70997D41FF12D7D038B2E2BBBAA8D13AC0CA8E6A4B9DDDD0F720D620EADE33FECF3E33071D47C5AC7413A059F6B60C56B51C33773E130E0D4E2B1CFBC53AA72A61EEF3E9DC5A9E6F824E15E573949C6ECB58727942666EA817606E5BA57C4A611937F0761373A6D14D38B2117FA1540F03E748E8F3B92F3D7890AE1C1AF39744C29EE17F74D5B11A88123789EC0DF28D3ADDD5DB98BA12D6378E3E0D21156DB04757D113B7DBFD80055F7F4DF3D30F2FDB72E9CB04C3E47A683C5A4A410CEEB7F46E4F84D50DE717FA7C4E88125E26F9C4FF767E5EF88601497A45DC842B3A275E1B48EB1F076C02887FBFB7ADB96C5388B7CE2A3AF123D2B1491F96ECF22D7F8321BE1DC5952F790E0FBFD26DADD637965DD7993C09CDBAED400695EE476102872FAD3148C339CC3B1A986556D7DF58A04C90EBF86FE22DD93E163C80C44A3ECA2793CCCB53AF67BAB798B960618AB5BD015ED237B8C1758635F32B4F8CA4164D06E64065023F7F6D8DBB82D1E6E788B0C1C1F15289AB45F4BCC7A7FDF89650A648C511C9F9C5A7FEAEEC8AAC29D680CFA56E8F7D137466CD755744BA286820673CF28E53AA0D10BEFAB60D27AFB27C7EF2D42F57E61BF6DB6B1E90A8B71D1FB0DFC2F3FC663C3397F0149652A092466A22F7F5D6D81358C9F686090C2B1461A531D9644BD0163D1C02E8236659C0400B87797E571B00BF2AADD0EB0820EBE325AB3BE5A8D01D56F1B9ED875E9A1E99E724F409FDBF2A0F808FA8357494B1DEC414D66F7C1648A10CEF75F5585B28CC7421BB32DAEA7794B3148E32B20349714A4C7A1CE880210740883F789CE58AE42657B924890379D5471A9F94B303E6E890DBFB3A714240DB8C0D5029E58C6F9F474924A0698D48CDEF800965533833FDBE8EB59F6C44B848547BC28E1AF56E052E2B0E7F37B089ABEBE84AC580F91F0FD09439B5776CD2CAB63D33AA1466B42B785D88BC2AC8F954B6D1F292F1C6F689721F803334169756BD09A02A92DF5230D1689D5EF33031F93633BBFA8EB89025570B9C226299BF1CDBAF8EF68710CF6E7802C1AEC889CFA1E93771A27ADCBA3C9B7EFE6CEBBCB035AD6DC845C456ABE6C727DA41E4B74056466DD26EEEA6BC47DE66ACCDF1FFA65090F3830AF44234439F84348F55AC87BBC97CAF17E7D27B49044C048B811B1087D14C600B440D9166D322BC32E701683FF234BEC210699D65251BA6E9D593D24C6A1F4C938067DD19BC5AFBF361531172B649327B2F4CA41C6C2DD6AB56D6704AF787B3AB0B046F6CA69FC1FB262D0568DC5E00408F7CA039FF31267774846C3B8C31F42E549F4C951CA9768E4C65EA6B741E5F649525E53F72747B529BE47FD0431B5179A455A4BF8291E69A566F5C652215C23C52018EF6E5E6BA2E23889195CCB5789F1CCDEF0CC971A3093749ED776731EA5FC978FFEDADE007241B5D8E54BA43469CD11EE0C33B687F18B8696B260E8976E8BA45A565B01A0D93FE3E1A70AAF6EC578B5838D844C10B444632FD597DF84A09039E7420FEE21679550C9A66DB10C8543751799861C62D946302EADCC1933D3114B0D9D6178DBB9E478D864AA3867111470053D536D7735FE529D2E2C498CF5F19205B491EDE0448D9CF6FFAEBC19DD70DBE48F2D6715907358A83A25C552831CC98EED755E5B418BA03E6A1E6595BFE5EC276C008F267D0C58D1BEEF4FD42555F90F8C559B8B060BD927E0F0B8E9676D05542D0E55DC27DFABD22ED98098E352F95DC56A7F019F95C20FDC8D1968488BA4C1E482B6951D31F3B531E4E9965D004AEA7F3CE67E94FD12D4F07EF6E347DC06EBE24229E609200EA0F0A44DA02F1ADCE7F5A9F73515DBCB6A54B25CD3A1989E05FB8ED10C645AC820B0F87DABF38BF09AC2443FC62336ED161FF55B983D5A8555D643E420C565F748C543EB112D7F62325900F1DF44922C9B8F209930D6E44393BB06A995E571EE20D13FE7ECBF42DBB1A9AF6C68E4219B8150AC9C3EDB502C7C1C8942778CD1C57FB41FF099C0EF63D89AD68C7A1AFB26B8B51C14A06137DD7BD87574DEFC425594A22D444AF034A95D25A98CA88B3E2166A62D9B6D05225A5182C066997BEBB9644C8C3C0DDBD9EDE5074896B2FD8A4BCD7102D7C895C2F3063953BD2F34431DA0649C62EAF5F9010B4789B59B5B2447A2B57A36F28C96D0FD951968541A4584A89BD235ADB26332DB72F5EA502D25B0B45EE919A37F73811EA1CFBA5E8D1406DFCB233C0AA4AF91929DB9AE8DF83A154AC7721782867CD0102C4C4045E56A68BBFDE2B396F0749EF974A88D7D961B62B9B0E2CE301DDDB95C0342BC5FDF87538D53247E4216D5BA50C4AB8749240891CFEEBA27933C9552F4803D10F3F8836E405657D25DDDAAF69C13BB8795039625753FB0847E59358718410AD603A36FC2FEA5610C26BF84B23646F60AB787D3A36A9B2C36549B9BE9BA3C9E0005635F565A4AC97E4252C61DDAD790327E0CC368F867531813B2117394096222C23136C690C460B09F384CDA54E438B992A1FBA5B38016D6DC01FC86A162FDCC59C596C658FD743CCF72B4A998ED2E89433B9455D09F2D466E259EF2E51ECF8425C980500DA912D06C0088A3F66266327466990990C451E70017FE8126DF2BB8945D55F11AFA922EB36AACE926BD8F5F095EEF3DB1AD12E1F8B70507FEC8723CDDC20BA36459DD98EF3AC8E75ABF29C83326BB04B3602C0038AC25AF55A8E05F5966EB72C00B939B30D44EEDF1DDA94BBF401BEBB8A49D4C2EE99019942125EDFB2A94CEB247E2A41704FBD304A01B63D50E883D469D5D59C84F60C906263B3F2A6CC52899DB544659A5646ADF32724B93E5B45D706B45CCCAEA0E38E91D023B342263F12C3B694BEBFFFB031D6D6BB6535278E2D21E9B60CB399C85844C47BAF4EDF16B4EB8E084AAFED59E9DBB3052DC7B4970DA07AAB6822ED9880FE68A4D3725E95A496E197A56B9E25FE109B7F4E940EA1AD28A539823CBA9DC2E6677B64A9262FAE474B951FB250A6D02E638F39427F93DD21D3DD6736908041994632F92ECFCC9BEDABF7979E77105A6726EABA5ED79FD4C29F86A5C930EED3AEA4DA779D17B5592F36271D5180778FA8E5B3C44A173FEACE2D2C17435A56025A9E001AABD08B73EE6AF76DA088301570348C0EB1EE3528BC05623D665DCF59B17C55F9C95CE7E37D2357610E2AF8AEC0AE804FD1AAAA586839FD41D4914BB34D2805DEFB1B1741E2337F722C9A57A81BB016BF303076E1BDC56F82A3EE50D433E435924F81E8DBD5BCAD5BE5A42D9B1259B949F24C91AF6209CC0799C965468F2E69362F29262C97755312E4D099E2F4140A1F650E4BB1439275B6E5331F00633CC8E1BF00FBD6DDCFA40262BC73E44D014B87300BB41802E50D3EB98CC9C0520FCC1B36F6F353CC50705003EBE5C5C6B0ABBA6DCBAF3B9585FC40989B9E69A9CE97B117EF3DF597F4DC43BC5A812518E08C7FC6C68BDF0A95A4F237EA93CE882681CF7C8314200BD52A4BB197A4A6D39388D3B0D51350BAD627260F520B2C2C2500CD75B8953EE34921242BC6033E4CE74463DDA87484FFC8FE36523B2BD07FE95D36E7313CC62260C1040AFFADCFA35151B35C18495B2873574E6B3494D4C56622715DD6C939356518E5C65E330523E9DB3A08CB35BB7A791C061367B5FA5B6CBAE764AE46F2AD5A1E9B44501D0650C0A20CF69A8F6A1DD73B3021E4560133CE02C075AF3DB84B5CCBAA8A2BAAE3E4624C759C883243A4E5FF6904AC0FA5A7D8109ED0C9A4272F3F0FACB6718D5FB2C599CE4F599DBE81DBE3D540A4A99A3FF184133C876FE68077663F23E810B953DA16F154F71FB420D2E4327F8D1D869EFD9338CEE76FCE535F3D9A8582731979F4CA7058E489B4CABBE2F39A374415B62C1F5F8E31E006D6ABC736057910A3729AC60360CEE1B2C8D9F773363ED24C0C6998832D2AA521B5271CDB860D4729F7061A1D2AF9901E59AABD01F27D909693AA4AAFA7C32509E95153571E50E5D2B6A05A6E4E139D5B5A12562E6BE814317D05251A9C0E892142F201432A7D07FB389A85017F4BF99E1C416B3BE9FA157D9703D7DE43A5B3D3A3190C3E827417CAA761070C63E7790F8054CBC2A8CB5ECFAB8CBD74A2208974A2425BA2411922DF658CB27533813108DB1DED21A8419480CAC94DA3320A0E826F84268987D6EB437620D356887766733551E13F764F626792D19EFBB9C1A5DE550C906552E7FB9D5AE6CE5E4214B294124F6A1E9688EC72B3A09EB135A6AD579CB0407C5EEBACEF81CDF1F69BAFD3A941CF98563B94FD47B3B1F3FE4A6D118BEF294537E6EB19662FDC8E94D081C2F2A56D68878D180134EA44FCCA5EB7341460B6EFC27E5D12ACB5973643B1693322A5B170DE76962533EF1700DC171A478F1938803B8735A1DE230078C1A8DC319877083AAEC7C0C7CB70951ECEF42A4A67EFFB6A65C4585338A3F0DF11234EFD29617D1FD5C913B1B383D3C4C1C94CCB3568BCF705B97D9C535E217B04A43121737F373B4EFDF08768D68F34D1DB92CC01F32B0450AED0EAA60F72C198F51D1BD6DCD7D5BF3205A3817121F3D3B99CB5B82A904F55EB2E83AD5914BC0ECC61613DE2702BB541C92D8CCFAF99D5C52E3CCA2F11840594A83F3C4BCE01A99D5F09CD446CD6591849A1ED676EFA66373C7F0F7204F537189D9BF639723047C552B31067387535FBF511E344A272393B4C5D066D8C35DC8E43680F2D37B1155DEDE033E446F1A44621E8830D2F362301804DB8FC7F06D0325A43BB68902037C7B2D2170CBAD191B95DE101DD9151FD106684F84BB44A8A259C41E39C6C544FD2CC0725BE1F6E65A3AC872F9A5155A6E427646AB2013AFA59AC793E356178FF7C9F1ED545CF56F4A016E1FD576F2B17F03819138BFA8DB09A7043DA1D8F612DD74224766183ABBE7DAEF9717081010D335C97A58FEAC121EA7678871CC51BE0EA84A55599770732EBB5A4C75472552E4933F29DAD06E09E5C9B20DE36DCC0F40361EC44FBC02E44B7B3158AD00039AA54A2C113C8D2D5BC6FD512165E6A7718B33550D3CEB6B5C0E9A7B5EDA261865707C2A385AA68EC7A69A8821E04DBF2DBF167A6703E140C1FDA7D24A3FDC8216852704E811B53BB019C196E31E3ADF7D0CD4C760D945DFE2F52590C58307FAE5A3DF0FEE5F90D5AA9E8E230251A0B19C528DB855617E1BAFED95D7B58BFF4AABBE7F7B5A9683D6CF5E4FBCCAF934F624621D8CE33AE1F7FA543F7808FB972A066D362FF626BC718DC462D815814A33F1FE968DF2E7CCFA5944F949B86ADD9BB9EF893F9A58C7083C85889AF92BAB2639C315400901D7A4E96CC6DEA0F7E3AF44340DD136BD27A78E48619BB87AC6E71310318BE5C679BAFBF24DEB9ACBF8C73CF2ECF06C6820A2DF4CE5612EB6C6796AF1BA0D53763E0A73FDCB3160883104E873401F726B3D963B4CE158B1DDAEE1CCA299C15B944705A6E6C3E4443919BE1FA278AD38DC0423A00EE5275ECD3793F305C05BF0AB87095B050340A3CEE29D0B7DD4623D7ADD4754B54C0EAA4E236EA41F96B638246EE008BCEAE955E510310C651178D2007721FE7BA48990A77F628B77A4F11BDBC2D0EE04DA3A357B2E02D395E67622036E6FF969E2E09B0497E613982000A893247E459593F8BE077A5E313A70834F21F7E43BBC6612B83FC85EEBB8E884EA77E11AD29D41264A039D4B802603C86C040F08D2D07E4B009E1FBC6873FC25992FBDE5B3097E134903A753FA090C3D657A425D288D11EC11627E169D83622394258A9C3C0B1DC61A604EF6F2091C67535BF032F9F45BDA3BA8768DDE778337122FB3D357DC7846017D117CD1C47958DA4BAAEA936C1866C323E1421D092E4B7326437DF2771C2C9FA76000E80668E9D5CB38DAC0BB86C36E463625EB13A7D5DDD54A25C23D4BEB1645753931E1361782926044E31B940982B45C57844A2DBB42ECACF9280F9225208A17C329BDAAB32242279D3357038F536CEC54BFE24FFDBAD9D2757C7E14E863DD7ADBE755435E7E4188D6D5BB3EB4242A7627172242FBCE8CC1786BCA959A2B94578996C5EFBF5704E53D13124887AE7CA2E89F1E47679CDD6488007CC211769D5BBB1057244F058645DA3D7DCD47191024F918C575A162D0B8EBD6EA894AF15E2665A5EDDAB85B41AB99607E3676346CF5C7C834CD694AE9BD9FFBCC088FDAFEE8D86DF1CA5221F0521401B96FB290595C072E48ED2003273A2B21C1A6EA3E8FE1BA2BE8F4D3CA5C82CBB12282F1E9E66AD9E7C3CBC25AB0A40CEA47F566B46141FFC4C1B960DDE705C38D9942FEDF01489797819488BF6EC6947111BEFFD426C31DAC2BCD52251A70266B88CE21E2C8CC1556C341C47892667B3A25A767EEA91ABC552054B5886CD91CECB9B9CD444500CFAECA194A2C059D428C14C844A68A2A208457642BB2722A5E6359D2A211C6851AF2133309583FCA930C25B6C0A7DEA26A5B76B26386EF97A311FC83BADF063A7ADF0ABB95EDB6B78175094D245519BFBD7DA608B8D67E1CE5062DA978663984B2C832507600888FFC4352CB1EAAF118AD9E3B117842B24F2A638C2D8A1864F6FE4D027729008C09B299E54B0F19C1F34CDEB00C86DEDE6FBDDAB751175860272E246DD7409B59C05D544ADBF4AEBF1D651BD88966F1852CA52BF52BF861B0B2115326F53F5067BCF82187F3B45931955CB6414033DA20511073C0C5A1842B8386C21B36BB26AC8AA1C013BD81E8064223511BF99A812D8D73F610F788F500B61CEEFEAF68C14C3B3E83AAE857DF42D96F4D5959388EE0D765C4843EED557A12B64B4CD3D0AABEC284049D0F9F9C71B704E04936E43F87CF0A68B6F0FE4F3B2C4DCDD9D91DD0950B17E68F790AB56C1720A0386977F7B236E4BB406C50CD5777E7EBFC052FAD509AEA0CCD60E541C58357048544840D634CA200BAC25C5DE5D9BBD528F0BDECF830457D1C2E6D4037CA55AD92D0C99BE45CB46A82EE74A1D6250D3EAD1FF7E186F52522E5A12DDEAF9E22E17E860A5399E2AB8F07B758B38990E769DB74F8940AB75691D05B3482D7AF9031DEF51B959C1EE439F8CD12B0B52416B79DA384B066B22FE41825ABD849980EB3A68E1EE6F77EC98C544099142762026F74324E008C495452655C7A3D0D193EEB58C351666C3BD7E2BF0ABADA85094248616891B6C91A9B7E517B5C23EACF9ED221C64614423BBB2A31E1BED65B003BD4D945AEFB847991B8E704A57AC977AA8766A73BE64433CA4B96CE97F889DCC69AC3A0B458869DF36A4347FBF545E55840672438441163EA52617F833C805C15BECD68E680D30ECA982D7F7272EAE2D26464FCA423AA54E5824DDF56ACFEB0344FF2EFC9CFBDA5F264B7C36CAAB91C3C97F54118E046DFC0B5CB224274889AAC207071E737D050D010A6B5364150EA1B29FE672F4C1DFB45DA8A88EB4F68BA8B76F2B694E8D5E128ADCA64D48F96486A550B26E4CC857EE86A77B0DBF18C3F056603E450EE0FF3B10DC4460E2B649AB4F0E7DEFB06F97C3535DFF7644FABD24446EB9B85CCD8DE0B03630C678A1A3CB4AFD78C5641C1351C8DE96D23C8F46247904A9EAD375F3D07010FF76BC63CEB83722A75EA2B79C7F709E8893FD84C83D1D45B64DA003931C2F549F5518756692160C7591613701960CFB87A1BFA5A9108481152A359E4CEB853164EB79F274005ABE38E19DFABEC997803A4CD45533ED805CB5DCBE8526C8A9917F9EF4BC1145F30E4910A247F75EA79860C1C2C5C6B29B9EC8073604E1158D36A460D01359C85C7FEF5229A826A60B34A378CF938D3ED64B5543E5FB9D020F624F7EFF3C302C81AC0F450CDAD0BF8685720D1163C1E11DEB68BB8B73A8DC6D6006953361DA79FF00A34BE6385EE4A6A9A848F706E68C0A7EED12630636D54D4B2E831D73C481FD58A0AB92B3CB36AF6FCD2247173AA6447579757787EA74D59EC04D4311A97A892D9568CFCC1F9C826DD1B4D5A1F69A4FB45DEB44754607FC3D7B10D496F3A97E80785ED5A2C07E633728B907CD1B32CDA1C1AE6C6D2AFBBCEBDA876A4C6594B67C37E43675761C7CFCD0F0E16D0E431C51AC875260C358D7016EF8496EEA7B8BE9BFCCD5853FF2868A2E97C78A25C5717BF3A3C5665413860C844B0000C69C70D54F193C3BE860E98DFEB41FBE4B5B6C7346841CFDF90DC4A68DC3D77589964DD266DEC41BDF2704F94B581D1C9FAFF862376357CC5E03C3273FD45A6332C1DF51D84E49FF969AABD34532CD6F562E12AD5E5EB2C31BA3728A75113D5269693F0B5F499FD83E9568A45A8FE72839AC6664ADB604BD77B97CA5E76187BC4A57BDE9E259CDD3BC069DF7F69214396E389435A04B436AFF2C5F76A4516EFEFCF0E0B622A3F69F958B4664BB7E4EA238FFF65711CEAA3D67D0E06A2502A42D445E7C81763B6366859B6B9E9B7A10005D37DFB1F62997DB6E2CFC6241EF72763FBB42BB7138E8567515B79557A62398C9DBBBAC73EDBEBDAF4288A49CA23BA885516A27564F138C091BE7136B718664A831F22D53FE1D96EF6E40ED3A71AC66D86E37DDA3C458CC7D1DFF59CF362D56BC214B2561EEC75182B5E20BE895932ACA3D67BB2275D8AA11B3D623A3E2628BFCD68DCD07B7AFA32D650EF2F1DF82EF6FD2BA6EEBCECF94C5F23EF63FCA6B0CD8CD4AC810D566D30875BAFE835905360D0BFE38F554BE48D9C438606AD1D7E70755F4B7C8CC42544EFC7E3F01C634501888B7E8A9FF2870180CBF9939C0CF2B66C5A06861AF42D346E314A9C6EC1724DBCF6E42D0EB50920326AD362385DC25D6B935B5A66AF295DC086A004F1CC6235D0D9DB30DCD37EEF228EF812266DFE17CE735C2303C3B689710FDE04EEDA1E4E2A65925DC06AF7CF6F77B93CFE1FBD1136D0D3EB61E974132CC775A79BD25FADDAAB3A0098B7B51D75E0E001B93589D432DFECCDE2B0EB2FC79A9143BA7774EC9E34A68755BF784C98A2D0B47A1E68B15C0F5E971D4D93151AD5E93C0336D2CD329A92C604F5C593878C04C0C62EB260CAB004F504FF7333BF34CA89E7B3FA82E95405D856397C84332A851F2BAD40BB5BE967F296D77ADB0770D145A4CCBC4D6EB9B55E48ED0CB31F6B45A0E14E2B466780AF343062976A27F65306FBBC87114A45A9B5E2DF9B1BBB0D9C0FEE22348577FD3C332AB2D3F97572B7F0CDD1B003F27A2BEEF5D3ED5586C16ED573C702FD60AE582872C9AFE8A21AB66221E1B0EEDF4B9DD2C6CB179470182B96CFA1E5432F9342CE3AECA297DC538A28E11D920140E5E315C8E489EE6784C673886572E8BD39001BBE1B585806C65459E2A7FBEE653F617836B00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/MSEBUS+Geometria-Light cguidfix
/F1.1/MSEBUS+Geometria-Light renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0 0 0 sc
0.60000002 i
q
0 0 320 128 rc
0.5 0 0 -0.5 234 108 cm
/F1.1[ 24 0 0 -24 0 0]sf
0 23 m
(!"#$%)[ 15.960000 8.352000 14.808000 12.576000 0.000000 ] xS
Q
2 w
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
q
222.5 114.5 m
278 114.5 l
278 86 l
222.5 86 l
222.5 114.5 l
h
W*
0 0 320 128 rc
0.5 0 0 -0.5 222.5 114.5 cm
0 0 m
111 0 l
111 57 l
0 57 l
0 0 l
h
S
Q
/Cs1 SC
0 0 0 sc
q
0 0 320 128 rc
0.5 0 0 -0.5 238.5 37.5 cm
/F1.1[ 24 0 0 -24 0 0]sf
0 23 m
(&!')[ 16.632000 15.960000 0.000000 ] xS
Q
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
q
222.5 44 m
278 44 l
278 15.5 l
222.5 15.5 l
222.5 44 l
h
W*
0 0 320 128 rc
0.5 0 0 -0.5 222.5 44 cm
0 0 m
111 0 l
111 57 l
0 57 l
0 0 l
h
S
Q
/Cs1 SC
0 0 0 sc
q
0 0 320 128 rc
0.5 0 0 -0.5 289.5 116.5 cm
/F1.1[ 24 0 0 -24 0 0]sf
0 23 m
(\(\))[ 20.304000 0.000000 ] xS
0.5 0 0 -0.5 85.5 109 cm
0 23 m
(*+,')[ 6.408000 18.240000 14.904000 0.000000 ] xS
Q
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
q
73.5 115 m
129 115 l
129 86.5 l
73.5 86.5 l
73.5 115 l
h
W*
0 0 320 128 rc
0.5 0 0 -0.5 73.5 115 cm
0 0 m
111 0 l
111 57 l
0 57 l
0 0 l
h
S
Q
/Cs1 SC
0 0 0 sc
q
0 0 320 128 rc
0.5 0 0 -0.5 159.5 108.5 cm
/F1.1[ 24 0 0 -24 0 0]sf
0 23 m
(!,')[ 15.960000 14.904000 0.000000 ] xS
Q
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
q
143.5 114.5 m
199 114.5 l
199 86 l
143.5 86 l
143.5 114.5 l
h
W*
0 0 320 128 rc
0.5 0 0 -0.5 143.5 114.5 cm
0 0 m
111 0 l
111 57 l
0 57 l
0 0 l
h
S
Q
1 w
2 J
q
0 0 320 128 rc
0 0.5 0.5 0 166.75 81.204659 cm
0 0 m
9.4950981 9 l
S
0 0.5 0.5 0 171 80.65686 cm
0.36519608 8.5 m
11.321078 0.5 l
S
0.12096095 0.48514786 0.48514786 -0.12096095 85.820946 82.80101 cm
0 0 m
9.4950981 9 l
S
0.12096095 0.48514786 0.48514786 -0.12096095 89.81218 81.241318 cm
0.36519608 8.5 m
11.321078 0.5 l
S
0 0.5 0.5 0 97.25 82.204659 cm
0 0 m
9.4950981 9 l
S
0 0.5 0.5 0 101.5 81.65686 cm
0.36519608 8.5 m
11.321078 0.5 l
S
0.5 0 0 -0.5 101 87.5 cm
1.5 87.5 m
1.5 0.5 l
S
0.5 0 0 -0.5 190.47427 86.319427 cm
0.0045744837 0.0021292511 m
-0.49542552 -0.49787074 40.073677 87.310722 81.95575 0.0021292511 c
S
0 -0.5 -0.5 0 255.25 48.795341 cm
0 0 m
9.4950981 9 l
S
0 -0.5 -0.5 0 251 49.343136 cm
0.36519608 8.5 m
11.321078 0.5 l
S
0 0.5 0.5 0 225.39746 82.186279 cm
0 0 m
8.3129883 11.877441 l
S
0 0.5 0.5 0 230.91406 78.552002 cm
0.39599609 1 m
15.548828 1 l
S
Q
4 w
0 J
q
210.5 128 m
319.52573 128 l
319.52573 0.5 l
210.5 0.5 l
210.5 128 l
h
W*
0 0 320 128 rc
0.5 0 0 -0.5 210.5 128 cm
0 0 m
218.05145 0 l
218.05145 255 l
0 255 l
0 0 l
h
S
Q
1 w
2 J
q
0 0 320 128 rc
0.5 0 0 -0.5 110.58789 87.208984 cm
120.86719 4.9414062 m
110.59766 101.72266 8.5859375 29.183594 0 0 c
S
0.5 0 0 -0.5 182 10 cm
-0.5 -0.5 m
1 1 l
S
Q
1 1 1 sc
q
210 54.5 m
216.35127 54.5 221.5 59.648724 221.5 66 c
221.5 72.351273 216.35127 77.5 210 77.5 c
203.64873 77.5 198.5 72.351273 198.5 66 c
198.5 59.648724 203.64873 54.5 210 54.5 c
h
W*
0 0 320 128 rc
196 80 m
224 80 l
224 52 l
196 52 l
h
f
Q
0 J
0.59200001 0.59200001 0.59200001 sc
q
0 0 320 128 rc
0.5 0 0 -0.5 198.5 77.5 cm
23 46 m
35.702549 46 46 35.702549 46 23 c
46 10.297451 35.702549 0 23 0 c
10.297451 0 0 10.297451 0 23 c
0 35.702549 10.297451 46 23 46 c
h
S
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 206 73 cm
/F1.1[ 24 0 0 -24 0 0]sf
0 23 m
(-)s
0.5 0 0 -0.5 88.5 38 cm
0 23 m
(.//01$231#4%)[ 17.856000 15.144000 15.144000 6.744000 6.120000 12.576000 14.160000 10.152000 6.120000 14.808000 14.520000 0.000000 ] xS
Q
2 w
q
73.5 44 m
175 44 l
175 15.5 l
73.5 15.5 l
73.5 44 l
h
W*
0 0 320 128 rc
0.5 0 0 -0.5 73.5 44 cm
0 0 m
203 0 l
203 57 l
0 57 l
0 0 l
h
S
Q
/Cs1 SC
0 0 0 sc
q
0 0 320 128 rc
0.5 0 0 -0.5 12.5 110 cm
/F1.1[ 24 0 0 -24 0 0]sf
0 23 m
(516"2"7)[ 14.232000 6.120000 15.144000 8.352000 14.160000 8.352000 0.000000 ] xS
Q
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
q
0 115.5 m
63 115.5 l
63 87 l
0 87 l
0 115.5 l
h
W*
0 0 320 128 rc
0.5 0 0 -0.5 0 115.5 cm
0 0 m
126 0 l
126 57 l
0 57 l
0 0 l
h
S
Q
1 w
2 J
q
0 0 320 128 rc
0.5 0 0 -0.5 250.25 85.75 cm
1 0 m
1 84 l
S
Q
1 1 1 sc
q
251 54.5 m
257.35129 54.5 262.5 59.648724 262.5 66 c
262.5 72.351273 257.35129 77.5 251 77.5 c
244.64873 77.5 239.5 72.351273 239.5 66 c
239.5 59.648724 244.64873 54.5 251 54.5 c
h
W*
0 0 320 128 rc
237 80 m
265 80 l
265 52 l
237 52 l
h
f
Q
0 J
0.59200001 0.59200001 0.59200001 sc
q
0 0 320 128 rc
0.5 0 0 -0.5 239.5 77.5 cm
23 46 m
35.702549 46 46 35.702549 46 23 c
46 10.297451 35.702549 0 23 0 c
10.297451 0 0 10.297451 0 23 c
0 35.702549 10.297451 46 23 46 c
h
S
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 247 73 cm
/F1.1[ 24 0 0 -24 0 0]sf
0 23 m
(8)s
Q
1 1 1 sc
q
133.5 55.011192 m
139.85127 55.011192 145 60.159916 145 66.511192 c
145 72.862465 139.85127 78.011192 133.5 78.011192 c
127.14873 78.011192 122 72.862465 122 66.511192 c
122 60.159916 127.14873 55.011192 133.5 55.011192 c
h
W*
0 0 320 128 rc
119.5 80.511192 m
147.5 80.511192 l
147.5 52.511192 l
119.5 52.511192 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 320 128 rc
0.5 0 0 -0.5 122 78.011192 cm
23 46 m
35.702549 46 46 35.702549 46 23 c
46 10.297451 35.702549 0 23 0 c
10.297451 0 0 10.297451 0 23 c
0 35.702549 10.297451 46 23 46 c
h
S
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 130.5 74.011192 cm
/F1.1[ 24 0 0 -24 0 0]sf
0 23 m
(9)s
2 J
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
0.5 0 0 -0.5 30.587891 87.208984 cm
121.49414 0 m
101.38086 91.095703 8.5859375 29.183594 0 0 c
S
Q
1 1 1 sc
q
53.5 55.011192 m
59.851276 55.011192 65 60.159916 65 66.511192 c
65 72.862465 59.851276 78.011192 53.5 78.011192 c
47.148724 78.011192 42 72.862465 42 66.511192 c
42 60.159916 47.148724 55.011192 53.5 55.011192 c
h
W*
0 0 320 128 rc
39.5 80.511192 m
67.5 80.511192 l
67.5 52.511192 l
39.5 52.511192 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 320 128 rc
0.5 0 0 -0.5 42 78.011192 cm
23 46 m
35.702549 46 46 35.702549 46 23 c
46 10.297451 35.702549 0 23 0 c
10.297451 0 0 10.297451 0 23 c
0 35.702549 10.297451 46 23 46 c
h
S
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 51 73.511192 cm
/F1.1[ 24 0 0 -24 0 0]sf
0 23 m
(:)s
Q
1 1 1 sc
q
101.5 55.011192 m
107.85127 55.011192 113 60.159916 113 66.511192 c
113 72.862465 107.85127 78.011192 101.5 78.011192 c
95.148727 78.011192 90 72.862465 90 66.511192 c
90 60.159916 95.148727 55.011192 101.5 55.011192 c
h
W*
0 0 320 128 rc
87.5 80.511192 m
115.5 80.511192 l
115.5 52.511192 l
87.5 52.511192 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 320 128 rc
0.5 0 0 -0.5 90 78.011192 cm
23 46 m
35.702549 46 46 35.702549 46 23 c
46 10.297451 35.702549 0 23 0 c
10.297451 0 0 10.297451 0 23 c
0 35.702549 10.297451 46 23 46 c
h
S
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 98 74.011192 cm
/F1.1[ 24 0 0 -24 0 0]sf
0 23 m
(;)s
ep
end
