extends ../../layout.pug

block title
    title IOI

block content
    +header('../../groupoid.svg', 'Effect Type System', 'I/O and Infinite I/O')
    article.main
        .exe
            section
                h1 I/O Monads
        section
            p Recursive Free Monads.

            h2#io IO
            p Finite I/O
            code.
                data IO (A: Type): Type :=
                     (getLine: (String → IO) → IO)
                     (putLine: String → IO → IO)
                     (pure: A → IO)

            p Example:
            code.
                record Main: Type :=
                (main: IO.replicateM 100
                       (IO.>>= IO.data () IO.getLine IO.putLine))

        .exe
            section
                h1 Infinity I/O Monads
        section
            p Corecursive CoFree CoMonad

            h2#ioi IOI
            p Infinite I/O
            code.
                data IOI.F (A,State: Type): Type :=
                     (getLine: (String → State) → IO)
                     (putLine: String → State → IO)
                     (pure: A → IO)

                data IOI (A,State: Type) :=
                     (intro: State -> (State -> IOI.F A State) -> IOI)

            p Example:
            code.
                record Main: Type :=
                (main: λ (r: Type) ->
                    IOI.MkIO r (Maybe IOI.data) (Maybe.Nothing IOI.data)
                                ( λ (m: Maybe IOI.data) ->
                                    Maybe.maybe IOI.data m
                                    (IOI.F r (Maybe IOI.data))
                                    ( λ (str: IOI.data) ->
                                        IOI.putLine r (Maybe IOI.data)
                                        str (Maybe.Nothing IOI.data))
                                    (IOI.getLine r (Maybe IOI.data)
                                                (Maybe.Just IOI.data))))


        .om
