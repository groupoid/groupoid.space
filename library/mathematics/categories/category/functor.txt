{- Control Structures. Functor Instances:
   - Identity;
   - Id;
   - Compose;
   - Higher Order Compose.
   Copyright (c) Groupoid Infinity, 2014-2018. -}

module functor where
import proto
import path
import pi
import control

functor_id: FUNCTOR = ((\(A:U)->A,apply),(id,compose,tt)) where
  id: (A: U) -> (a: A) -> Path A a a = refl
  compose (A B C: U) (f: B->C) (g: A->B) (x: A):
     Path C (f(g(x))) (f(g(x))) = refl C (o A B C f g x)

functor_const (A: U): FUNCTOR = ((const A,fmap),(id,compose,tt)) where
  fmap (B C: U) (_: B -> C): A -> A = idfun A
  id (_ : U): (x : A) -> Path A x x = refl A
  compose (X B C: U) (f: B->C) (g: X->B): (x: A) -> Path A x x = refl A

functor_fun (T: U): FUNCTOR = ((\(B:U)->T->B,fmap),(id,compose,tt)) where
  fmap (A B: U) (map: A -> B): (T -> A) -> (T -> B) = o T A B map
  id (A: U): (x: T->A) -> Path (T->A) x x = refl (T->A)
  compose (A B C: U) (f: B->C) (g: A->B) (x: T->A):
     Path (T->C) (\(y: T) -> f (g (x y)))
                 (\(y: T) -> f (g (x y)))
   = refl (T->C) (\(y: T) -> f (g (x y)))

functor_comptype (f g: FUNCTOR): FUNCTOR = ((O F G,fmap),(id,compose,tt)) where
  F: U -> U = f.1.1
  G: U -> U = g.1.1
  T: U -> U = O F G
  functorIdFunExt (x: FUNCTOR) (A: U): Path (x.1.1 A -> x.1.1 A) (x.1.2 A A (idfun A)) (idfun (x.1.1 A))
    = funext (x.1.1 A) (x.1.1 A) (x.1.2 A A (idfun A)) (idfun (x.1.1 A)) (x.2.1 A)
  functorComposeFunExt (x: FUNCTOR) (A B C: U) (fx: B -> C) (gy: A -> B):
    Path (x.1.1 A -> x.1.1 C) (x.1.2 A C (o A B C fx gy))
                              (o (x.1.1 A) (x.1.1 B) (x.1.1 C) (x.1.2 B C fx) (x.1.2 A B gy))
    = funext (x.1.1 A) (x.1.1 C) (x.1.2 A C (o A B C fx gy))
             ((o (x.1.1 A) (x.1.1 B) (x.1.1 C) (x.1.2 B C fx) (x.1.2 A B gy))) (x.2.2.1 A B C fx gy)
  lemma1 (A B: U) (g: A -> B) (x y: A) (z: B) (pxy: Path A x y) (pgyz: Path B (g y) z): Path B (g x) z
       = substInv A (\(X: A) -> Path B (g X) z) x y pxy pgyz
  fmapF: (A B: U) -> (A -> B) -> F A -> F B = f.1.2
  fmapG: (A B: U) -> (A -> B) -> G A -> G B = g.1.2
  idF: (A: U) -> (x: F A) -> Path (F A) (fmapF A A (idfun A) x) x = f.2.1
  idG: (A: U) -> (x: G A) -> Path (G A) (fmapG A A (idfun A) x) x = g.2.1
  fmap (A B: U) (arg: A -> B): F (G A) -> F (G B) = fmapF (G A) (G B) (fmapG A B arg)
  id (A: U) (x: F (G A)) : Path (F (G A)) (fmapF (G A) (G A) (fmapG A A (idfun A)) x) x
    = lemma1 (G A -> G A) (F (G A)) lemma1g (fmapG A A (idfun A)) (idfun (G A)) x (functorIdFunExt g A) (idF (G A) x)
    where lemma1g (y: G A -> G A): F (G A) = fmapF (G A) (G A) y x
  compose (A B C: U) (ff: B -> C) (gg: A -> B) (x: T A):
    Path (F (G C)) (fmapF (G A) (G C) (fmapG A C ((\(y : A) -> ff (gg y)))) x)
                   (fmapF (G B) (G C) (fmapG B C ff) (fmapF (G A) (G B) (fmapG A B gg) x))
    = substInv (G A -> G C) P AAA BBB compGinst compFinst where
       fff : G B -> G C = fmapG B C ff
       ggg : G A -> G B = fmapG A B gg
       AAA:  G A -> G C = fmapG A C (o A B C ff gg)
       BBB:  G A -> G C = o (G A) (G B) (G C) fff ggg
       P (aaa: G A -> G C): U = Path (F (G C))
         (fmapF (G A) (G C) aaa x)
         (fmapF (G B) (G C) fff (fmapF (G A) (G B) ggg x))
       compFinst: P BBB = f.2.2.1 (G A) (G B) (G C) fff ggg x
       compGinst : Path (G A -> G C) AAA BBB = functorComposeFunExt g A B C ff gg
