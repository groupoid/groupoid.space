{- Stream Theory:
   Copyright (c) Groupoid Infinity, 2014-2018. -}

module stream_theory where
import stream
import iso

eta (A: U): (xs: stream A) -> Path (stream A) (cons (head A xs) (tail A xs)) xs
  = split cons x xs -> <i> cons x xs

data Bisimilar (A: U) (xs ys: stream A)
   = consB (h: Path A (head A xs) (head A ys))
           (t: Bisimilar A (tail A xs) (tail A ys))

bisimilarityToPath2
  (rec : (A : U) (xs : stream A) (ys : stream A) -> Bisimilar A xs ys -> Path (stream A) xs ys)
  (A : U) (x : A) (xs : stream A) (y : A) (ys : stream A) :
  Bisimilar A (cons x xs) (cons y ys) ->
  Path (stream A) (cons x xs) (cons y ys) =
  split consB h t -> <i> cons (h @ i) ((rec A xs ys t) @ i)

bisimilarityToPath1
  (rec : (A : U) (xs : stream A) (ys : stream A) -> Bisimilar A xs ys -> Path (stream A) xs ys)
  (A : U) (x : A) (xs : stream A) :
  (ys : stream A) -> Bisimilar A (cons x xs) ys ->
  Path (stream A) (cons x xs) ys =
  split cons y ys -> bisimilarityToPath2 rec A x xs y ys

bisimilarityToPath
  (A : U) :
  (xs : stream A) (ys : stream A) ->
  Bisimilar A xs ys -> Path (stream A) xs ys =
  split cons x xs -> bisimilarityToPath1 bisimilarityToPath A x xs

-- Equality implies bisimilarity.

PathToBisimilarity1
  (rec: (A: U) (xs ys: stream A) (eq: Path (stream A) xs ys) -> Bisimilar A xs ys)
  (A: U) (x: A) (xs: stream A): (ys: stream A) (eq: Path (stream A) (cons x xs) ys) ->
  Bisimilar A (cons x xs) ys = split
    cons y ys -> \(eq : Path (stream A) (cons x xs) (cons y ys)) ->
                 consB (<i> head A (eq @ i))
                       (rec A xs ys (<i> tail A (eq @ i)))

PathToBisimilarity (A: U): (xs ys: stream A) (eq: Path (stream A) xs ys) -> Bisimilar A xs ys
  = split cons x xs -> PathToBisimilarity1 PathToBisimilarity A x xs

-- Round-tripping lemmas.
bisimilarityToBisimilarity2
  (rec: (A: U) (xs ys: stream A) (b: Bisimilar A xs ys) ->
         Path (Bisimilar A xs ys)
              (PathToBisimilarity A xs ys (bisimilarityToPath A xs ys b)) b)
  (A: U) (x: A) (xs: stream A) (y: A) (ys : stream A) :
  (b: Bisimilar A (cons x xs) (cons y ys)) ->
  Path (Bisimilar A (cons x xs) (cons y ys))
     (PathToBisimilarity A (cons x xs) (cons y ys)
        (bisimilarityToPath A (cons x xs) (cons y ys) b))
     b = split consB h t -> <i> consB h ((rec A xs ys t) @ i)

bisimilarityToBisimilarity1
  (rec: (A: U) (xs ys: stream A) (b: Bisimilar A xs ys) ->
         Path (Bisimilar A xs ys)
            (PathToBisimilarity A xs ys (bisimilarityToPath A xs ys b)) b)
  (A: U) (x: A) (xs: stream A): (ys: stream A) (b: Bisimilar A (cons x xs) ys) ->
  Path (Bisimilar A (cons x xs) ys)
     (PathToBisimilarity A (cons x xs) ys
        (bisimilarityToPath A (cons x xs) ys b))
     b = split cons y ys -> bisimilarityToBisimilarity2 rec A x xs y ys

bisimilarityToBisimilarity (A: U)
  : (xs ys: stream A) (b: Bisimilar A xs ys) ->
    Path (Bisimilar A xs ys)
         (PathToBisimilarity A xs ys (bisimilarityToPath A xs ys b))
         b = split cons x xs -> bisimilarityToBisimilarity1 bisimilarityToBisimilarity A x xs

idToId2 (rec: (A: U) (xs ys: stream A) (eq: Path (stream A) xs ys) ->
        Path (Path (stream A) xs ys)
             (bisimilarityToPath A xs ys (PathToBisimilarity A xs ys eq)) eq)
        (A: U) (x: A) (xs: stream A) (y: A) (ys: stream A)
        (eq: Path (stream A) (cons x xs) (cons y ys))
      : Path (Path (stream A) (cons x xs) (cons y ys))
             (bisimilarityToPath A (cons x xs) (cons y ys) (PathToBisimilarity A (cons x xs) (cons y ys) eq))
             eq = undefined

-- <i j> comp (stream A)
--            (cons (head A (eq @ j)) (((rec A xs ys (<k> tail A (eq @ k))) @ i) @ j))
--          [ (i = 1) -> <k> (eta A (eq @ j)) @ k ]

idToId1 (rec: (A: U) (xs ys: stream A)
              (eq: Path (stream A) xs ys) ->
                   Path (Path (stream A) xs ys)
                        (bisimilarityToPath A xs ys (PathToBisimilarity A xs ys eq)) eq)
        (A: U) (x: A) (xs: stream A)
      : (ys: stream A) (eq: Path (stream A) (cons x xs) ys) ->
        Path (Path (stream A) (cons x xs) ys)
             (bisimilarityToPath A (cons x xs) ys (PathToBisimilarity A (cons x xs) ys eq))
             eq = split cons y ys -> idToId2 rec A x xs y ys

idToId  (A: U) : (xs ys: stream A) (eq: Path (stream A) xs ys) ->
   Path (Path (stream A) xs ys)
        (bisimilarityToPath A xs ys (PathToBisimilarity A xs ys eq))
        eq = split cons x xs -> idToId1 idToId A x xs

-- Bisimilarity is equal to equality.
bisimilarityIsPath
  (A: U) (xs ys: stream A) :
  Path U (Bisimilar A xs ys) (Path (stream A) xs ys) =
  isoPath (Bisimilar A xs ys)
        (Path (stream A) xs ys)
        (bisimilarityToPath A xs ys)
        (PathToBisimilarity A xs ys)
        (idToId A xs ys)
        (bisimilarityToBisimilarity A xs ys)
