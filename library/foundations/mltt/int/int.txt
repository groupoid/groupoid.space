{- Integers:
   - Z=N+N, Z=Z.
   Copyright (c) Groupoid Infinity, 2014-2018 -}

module int where
import nat_theory
import hedberg

Z : U = either nat nat

{- +2 = inr (succ (succ zero))
   +1 = inr (succ zero)
    0 = inr zero
   -1 = inl zero
   -2 = inl (succ zero) -}

zeroZ : Z = inr zero

sucZ : Z -> Z = split
  inl u -> auxsucZ u where
    auxsucZ : nat -> Z = split
      zero  -> inr zero
      succ n -> inl n
  inr v -> inr (succ v)

predZ : Z -> Z = split
  inl u -> inl (succ u)
  inr v -> auxpredZ v where
    auxpredZ : nat -> Z = split
      zero  -> inl zero
      succ n -> inr n

sucpredZ : (x : Z) -> Path Z (sucZ (predZ x)) x = split
  inl u -> refl Z (inl u)
  inr v -> lem v where
    lem : (u : nat) -> Path Z (sucZ (predZ (inr u))) (inr u) = split
      zero  -> refl Z (inr zero)
      succ n -> refl Z (inr (succ n))

predsucZ : (x : Z) -> Path Z (predZ (sucZ x)) x = split
  inl u -> lem u where
    lem : (u : nat) -> Path Z (predZ (sucZ (inl u))) (inl u) = split
      zero  -> refl Z (inl zero)
      succ n -> refl Z (inl (succ n))
  inr v -> refl Z (inr v)

-- Non-trivial Equality Z=Z
sucPathZ : Path U Z Z = isoPath Z Z sucZ predZ sucpredZ predsucZ

-- We can transport along the proof forward and backwards:
testOneZ : Z = transport sucPathZ zeroZ
testNOneZ : Z = transport (<i> sucPathZ @ - i) zeroZ

-----------

inlNotinr (A B:U) (a:A) (b:B) (h: Path (either A B) (inl a) (inr b)) : empty =
 subst (either A B) T (inl a) (inr b) h tt
 where
  T : either A B -> U = split
       inl _ -> unit
       inr _ -> empty

inrNotinl (A B:U) (a:A) (b:B) (h : Path (either A B) (inr b) (inl a)) : empty =
 subst (either A B) T (inr b) (inl a) h tt
 where
  T : either A B -> U = split
       inl _ -> empty
       inr _ -> unit

injInl (A B :U) (x0 x1:A) (h : Path (either A B) (inl x0) (inl x1)) : Path A x0 x1 =
 subst (either A B) T (inl x0) (inl x1) h (refl A x0)
 where
   T : either A B -> U = split
         inl x -> Path A x0 x
         inr _ -> empty

injInr (A B :U) (x0 x1:B) (h: Path (either A B) (inr x0) (inr x1)) : Path B x0 x1 =
 subst (either A B) T (inr x0) (inr x1) h (refl B x0)
 where
   T : either A B -> U = split
         inl _ -> empty
         inr x -> Path B x0 x

-- If A and B are discrete then "A either B" is discrete
orDisc (A B : U) (dA : discrete A) (dB : discrete B) :
  (z z1 : either A B) -> dec (Path (either A B) z z1) = split
  inl a -> rem1
    where rem1 : (z1:either A B) -> dec (Path (either A B) (inl a) z1) = split
            inl a1 -> rem (dA a a1)
               where rem : dec (Path A a a1) -> dec (Path (either A B) (inl a) (inl a1)) = split
                            inl p -> inl (<i> inl (p @ i))
                            inr h -> inr (\ (p:Path (either A B) (inl a) (inl a1)) -> h (injInl A B a a1 p))
            inr b -> inr (inlNotinr A B a b)
  inr b -> rem1
   where rem1 : (z1:either A B) -> dec (Path (either A B) (inr b) z1) = split
            inl a -> inr (inrNotinl A B a b)
            inr b1 -> rem (dB b b1)
               where rem : dec (Path B b b1) -> dec (Path (either A B) (inr b) (inr b1)) = split
                            inl p -> inl (<i> inr (p @ i))
                            inr h -> inr (\ (p:Path (either A B) (inr b) (inr b1)) -> h (injInr A B b b1 p))


ZSet : isSet Z = hedberg Z (orDisc nat nat natDec natDec)
