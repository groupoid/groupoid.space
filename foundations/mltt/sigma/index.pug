extends ../../../layout.pug

block title
    title SIGMA
    script(src='//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML')
    script.
     window.MathJax = { jax: ["input/TeX", "input/MathML", "input/AsciiMath", "output/CommonHTML", "output/NativeMML"],
                             TeX: { extensions: ["AMSmath.js", "AMSsymbols.js", "autoload-all.js"] },
                             extensions: ["tex2jax.js", "asciimath2jax.js", "mml2jax.js", "MathMenu.js", "MathZoom.js"],
                             "HTML-CSS": { imageFont: null },
                             AuthorInit: function() {
                                 MathJax.Hub.Register.StartupHook("TeX AMSmath Ready", function() {
                                     var TEX = MathJax.InputJax.TeX;
                                     TEX.Definitions.Add({
                                         macros: {
                                           llparenthesis: ['Macro', '\\mathopen{\u2987}'],
                                           rrparenthesis: ['Macro', '\\mathclose{\u2988}'],
                                           llbracket:     ['Macro', '\\mathopen{\u27E6}'],
                                           rrbracket:     ['Macro', '\\mathclose{\u27E7}'],
                                         }
                                     });
                                 });
                             },
                             tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']],
                                        processEscapes: true }
                         };

block content
    article.main
        .om
            section
                h1 sigma
        aside <a href="..">Base Library</a>
            time Published: 16 OCT 2017
        .om
            section
                p.
                    <a href="https://raw.githubusercontent.com/groupoid/cubical/master/src/sigma.ctt">Sigma package</a>
                    contains basic theorems about sigma types. Sigma type is built in MLTT core.
                code.
                    Sigma (A : U) (B : A -> U) : U
                        = (x : A) * B x
                p.
                    Sigma is a dependent product type, the generalization of products.
                p.
                    Sigma type is a total space of fibration. Element of total
                    space is formed as a pair of basepoint and fibration.

            section
                h1 Definition
                p.
                    <b>Definition</b> (Dependent Sum). The dependent sum
                    along the morphism $f: A \rightarrow B$ in category $C$ is the left
                    adjoint $\Sigma_f : C_{/A} \rightarrow C_{/B}$ of the base change functor.

                h2 Introduction
                code.
                    dpair (A: U)
                          (B: A -> U)
                          (a: A)
                          (b: B a): Sigma A B
                        = (a,b)
                br

                h1 Elimination

                h2 Pair accessors
                code.
                    pr1 (A: U) (B: A -> U)
                        (x: Sigma A B): A = x.1

                    pr2 (A: U) (B: A -> U)
                        (x: Sigma A B): B (pr1 A B x) = x.2
                p.
                    If you want to access deep sigma a series of <mark>.2</mark>
                    accessors should be applied followed by <mark>.1</mark>.

                h2 Induction Principle
                p.
                    Dependent Elimination Principle states that
                    if predicate holds for two projections
                    then predicate holds for total space.
                code.
                    sigInd (A: U) (B: A -> U)
                           (C: Sigma A B -> U)
                           (g: (a: A) (b: B a) -> C (a, b))
                           (p: Sigma A B): C p
                         = g p.1 p.2
                br
                h1 Computation

                h2 Beta
                code.
                    Beta1 (A: U) (B: A -> U)
                          (a:A) (b: B a)
                        : Equ A a (pr1 A B (a,b))
                        = refl A a

                    Beta2 (A: U) (B: A -> U)
                          (a: A) (b: B a)
                        : Equ (B a) b (pr2 A B (a,b))
                        = reflect (B a)
                h2 Eta
                code.
                    Eta12 (A: U) (B: A -> U) (p: Sigma A B)
                        : Equ (Sigma A B) p (pr1 A B p,pr2 A B p)
                        = refl (Sigma A B) p
                br

                h1 Theorems
                p.
                    <b>Theorem</b> (Axiom of Choice). If for all $x : A$ there is $y : B$
                    such that $R(x,y)$, then there is a function $f : A \rightarrow B$ such
                    that for all $x : A$ there is a witness of $R(x,f(x))$.
                code.
                    ac   (A B: U) (R: A -> B -> U):
                         (p: (x:A)->(y:B)*(R x y)) -> (f:A->B)*((x:A)->R(x)(f x))
                      = \(g: (x:A)->(y:B)*(R x y)) -> (\(i:A)->(g i).1,\(j:A)->(g j).2)
                p.
                    <b>Theorem</b> (Total). If fiber over base implies another fiber
                    over the same base then we can construct total space of section
                    over that base with another fiber.
                code.
                    total (A:U) (B C: A -> U)
                          (f: (x:A) -> B x -> C x) (w: Sigma A B)
                        : Sigma A C = (w.1,f (w.1) (w.2))
                p.
                    <b>Theorem</b> (Path Between Sigmas). Path between
                    two sigmas $t,u: \Sigma(A,B)$ could be decomposed to
                    sigma of two paths $p:t_1=_{A}u_1)$ and $(t_2=_{B(p@i)}u_2)$.
                code.
                    pathSig (A:U) (B : A -> U)
                            (t u : Sigma A B) :
                            Path U
                                 (Path (Sigma A B) t u)
                                 ( (p : Path A t.1 u.1)
                                 * PathP (&lt;i&gt; B (p @ i))
                                         t.2
                                         u.2)
                p.
                    <b>Theorem</b> (Propositions). If codomain $B: A \rightarrow U$
                    of dependent the function $f: (x:A) \rightarrow B(x)$
                    is a mere proposition and for two sigmas $t,u: \Sigma(A,B)$ there is
                    a path $Path_A(t_1,u_1)$ then the path between second components $Path_{B(p@i)}(t_2,u_2)$
                    is a mere proposition too. Same if codomain is set.
                code.
                    corSigProp (A:U) (B:A-> U)
                        (pB: (x:A) -> isProp (B x))
                        (t u: Sigma A B) (p:Path A t.1 u.1):
                        isProp (PathP (&lt;i&gt;B (p@i)) t.2 u.2)

                    corSigSet (A:U) (B:A-> U)
                        (sB: (x:A) -> isSet (B x))
                        (t u: Sigma A B) (p: Path A t.1 u.1):
                        isProp (PathP (&lt;i&gt;B (p@i)) t.2 u.2)
                p.
                    <b>Theorem</b> (Contractability). If first and second component of sigma
                    are contractible then the total space of sigma is contractible.
                code.
                    sigmaIsContr (A: U) (B: A -> U) (u: isContr A)
                                 (q: (x: A) -> isContr (B x))
                               : isContr (Sigma A B)
