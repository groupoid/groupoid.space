extends ../../../layout.pug

block title
    title LIST

block content
    article.main.list
        section
            h1 List
            aside <a href="..">Base Library</a>
                time Published: 13 OCT 2017
            p.
                <a href="https://raw.githubusercontent.com/groupoid/cubical/master/src/list.ctt">List package</a>
                contains inductive data type definition representing finite parametrized homogenous lists,
                its generic functions, theorems and examples of usage.
            code.
                data list (A: U) = nil | cons (a: A) (as: list A)

                listCase (A C:U) (a b: C): list A -> C
                listRec (A C:U) (z: C) (s: A->list A->C->C): (n:list A) -> C
                listElim (A: U) (C:list A->U) (z: C nil) (s: (x:A)(xs:list A)->C(cons x xs)): (n:list A) -> C(n)
                listInd (A: U) (C:list A->U) (z: C nil) (s: (x:A)(xs:list A)->C(xs)->C(cons x xs)): (n:list A) -> C(n)

            h2 nil
            p <mark>nil</mark> construction is terminal element of list data type.
            pre.
                > let a: list nat = nil in a
            pre.
                EVAL: nil

            h2 cons
            p <mark>cons</mark> is basic list constructor.
            pre.
                > let a: list nat = cons zero nil in a
            pre.
                EVAL: cons zero nil

        section
            h1 Generics

            h2 length (A: U): list A → nat
            p Returns length of a list.
            pre.
                > length nat nil
            pre.
                EVAL: zero

            h2 head (A: U): list A → maybe A
            p Returns just a first element of a list, if any. If none returns nothing.
            pre.
                > head nat nil
            pre.
                EVAL: nothing

            h2 tail (A: U): list A → maybe (list A)
            p Returns just a second field of head cons, if any. If none returns nothing.
            pre.
                > let a:maybe (list nat) = tail nat (cons n1 (cons n2 nil)) in a
            pre.
                EVAL: just (cons (suc (suc zero)) nil)

            h2 append (A: U): list A → list A → list A
            p Concatenates two lists into a new list.
            pre.
                > let a: list nat = append nat nil nil in a
            pre.
                EVAL: nil

            h2 reverse (A: U): list A → list A
            p Reverse a list.
            code.
               data S = O | P | C
               opc: list S = cons O (cons P (cons C nil))
            pre.
                > reverse S opc
            pre.
                EVAL: cons C (cons P (cons O nil))

            h2 map (A B: U) (f: A → B) : list A → list B
            p Maps each element of a list to a new list.
            pre.
                > let a: list nat = map nat nat (\(x: nat) -> pred x) (cons n3 nil) in a
            pre.
                EVAL: cons (suc (suc zero)) nil

            h2 filter (A: U) (p: A → bool) : list A → list A

            p Filters a list with a predicate function.
            code.
                f: nat -> bool = split
                    zero -> true
                    suc -> false
            pre.
                > filter nat f (cons zero (cons n1 (cons n2 (cons n3 (cons zero nil)))))
            pre.
                EVAL: cons zero (cons zero nil)

            h2 uncons (A: U): list A -> maybe ((a: A) * (list A))

            p Splits a list onto a head and a tail and returns a sigma pair.
            pre.
                > uncons nat (cons one (cons zero nil))
            pre.
                EVAL: just ((suc zero,cons zero nil))

            h2 foldl (A B: U) (f: B → A → B) (Z: B): list A → B
            p Folds a list by accumulating a value from the left.
            pre.
                > let a: nat = foldl nat nat (\(x: nat) (y: nat) -> add x y) one (cons zero nil) in a
            pre.
                EVAL: suc zero
            h2 foldr (A B: U) (f: A → B → B) (Z: B): list A → B
            p Folds a list by accumulating a value from the right.
            pre.
                > let b: nat = foldr nat nat (\(x: nat) (y: nat) -> add x y) one (cons zero nil) in b
            pre.
                EVAL: suc zero
