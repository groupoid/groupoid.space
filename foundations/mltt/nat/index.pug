extends ../../../layout.pug

block title
    title NAT

block content
    article.main.list
        .om
            section
                h1 Nat
                aside <a href="..">Base Library</a>
                    time Published: 13 OCT 2017
                p.
                    <a href="https://raw.githubusercontent.com/groupoid/cubical/master/src/nat.ctt">Nat package</a>
                    contains inductive data type definition representing
                    Peano arithmetic.
                code.
                    data nat
                       = zero
                       | suc (a: nat)

                h2 zero
                p <mark>zero</mark> construction represent lowest nat number.
                pre.
                    > let a: nat = zero in a
                pre.
                    EVAL: zero

                h2 suc
                p <mark>suc</mark> constructor defines next nat number.
                pre.
                    > let a: nat = suc zero in a
                pre.
                    EVAL: suc zero

            section
                h1 Generics

                h2 pred: nat -> nat
                p Returns a nat predecessor.
                pre.
                    > pred (suc zero)
                pre.
                    EVAL: zero

                h2 add (m: nat) : nat -> nat
                p Returns an addendum.

            section
                h1 Instances
                h2
                code.
                    equalNat : nat -> nat -> bool
                    nat_instance : eq = (nat, equalNat)

            section
                h1 Theorems
                h2
                code.
                    add_zero : (n : nat) -> Path nat (add zero n) n
                    add_suc (a:nat) : (n : nat) -> Path nat (add (suc a) n) (suc (add a n))
                    add_comm (a : nat) : (n : nat) -> Path nat (add a n) (add n a)
                    assocAdd (a b:nat) : (c:nat) -> Path nat (add a (add b c)) (add (add a b) c)
                    sucInj (n m : nat) (p : Path nat (suc n) (suc m)) : Path nat n m
                    add_comm3 (a b c : nat) : Path nat (add a (add b c)) (add c (add b a))
                    caseNat (A : U) (a0 aS : A) : nat -> A
                    caseDNat (P:nat -> U) (a0 :P zero) (aS : (n:nat) -> P (suc n))
                    natDec : (n m:nat) -> dec (Path nat n m)
                    natSet : isSet nat

