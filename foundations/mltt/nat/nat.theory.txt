{- Nat Theory:
   Copyright (c) Groupoid Infinity, 2014-2018. -}

module nat_theory where
import path
import prop
import pi
import iso
import nat
import eq
import hedberg

add_zero : (n : nat) -> Path nat (add zero n) n = split
  zero  -> <i> zero
  succ n -> <i> succ (add_zero n @ i)

add_succ (a:nat) : (n : nat) -> Path nat (add (succ a) n) (succ (add a n)) = split
  zero  ->  <i> succ a
  succ m -> <i> succ (add_succ a m @ i)

add_comm (a : nat) : (n : nat) -> Path nat (add a n) (add n a) = split
  zero  -> <i> add_zero a @ -i
  succ m -> <i> comp (<_> nat) (succ (add_comm a m @ i))
                    [ (i = 0) -> <j> succ (add a m)
                    , (i = 1) -> <j> add_succ m a @ -j ]

assocAdd (a b:nat) : (c:nat) -> Path nat (add a (add b c)) (add (add a b) c) = split
 zero -> <i>add a b
 succ c1 -> <i>succ (assocAdd a b c1@i)

add' : nat -> nat -> nat = split
  zero -> \(x : nat) -> x
  succ n -> \(x : nat) -> succ (add' n x)

sucInj (n m : nat) (p : Path nat (succ n) (succ m)) : Path nat n m =
 <i> pred (p @ i)

addZero : (a : nat) -> Path nat (add zero a) a = split
  zero -> <i> zero
  succ a' -> <i> succ (addZero a' @ i)

add_comm3 (a b c : nat) : Path nat (add a (add b c)) (add c (add b a)) =
  let rem : Path nat (add a (add b c)) (add a (add c b)) = <i> add a (add_comm b c @ i)
      rem1 : Path nat (add a (add c b)) (add (add c b) a) = add_comm a (add c b)
      rem2 : Path nat (add (add c b) a) (add c (add b a)) = <i> assocAdd c b a @ -i
  in <i> comp (<_> nat) (rem1 @ i) [ (i = 0) -> <j> rem @ -j, (i = 1) -> rem2 ]

natcancelr (a b : nat) : (x : nat) -> Path nat (add a x) (add b x) -> Path nat a b = split
  zero -> \(h : Path nat a b) -> h
  succ x' -> \(h : Path nat (succ (add a x')) (succ (add b x'))) ->
    natcancelr a b x' (sucInj (add a x') (add b x') h)

idnat : nat -> nat = split
  zero -> zero
  succ n -> succ (idnat n)

test : Path (nat -> nat) idnat (idfun nat) = piext nat (\(_ : nat) -> nat) idnat (idfun nat) rem
  where rem : (n : nat) -> Path nat (idnat n) n = split
    zero -> refl nat zero
    succ n -> mapOnPath nat nat (\(x : nat) -> succ x) (idnat n) n (rem n)

znots (n : nat) : neg (Path nat zero (succ n)) =
 \ (h:Path nat zero (succ n)) -> subst nat (natCase U nat empty) zero (succ n) h zero

snotz (n : nat) : neg (Path nat (succ n) zero) =
 \ (h:Path nat (succ n) zero) -> znots n (inv nat (succ n) zero h)

natDec : (n m:nat) -> dec (Path nat n m) = split
 zero -> natElim (\ (m:nat) -> dec (Path nat zero m)) (inl (refl nat zero)) (\ (m:nat) -> inr (znots m))
 succ n -> natElim (\ (m:nat) -> dec (Path nat (succ n) m)) (inr (snotz n))
   (\ (m:nat) -> decEqCong (Path nat n m) (Path nat (succ n) (succ m)) (\ (p:Path nat n m) -> <i> succ (p @ i))
                 (sucInj n m) (natDec n m))

natSet : isSet nat = hedberg nat natDec

eq_nat  : eq_ = (nat, natEq)
eq_nat_ : eq nat = natEq

mutual
  even : nat -> bool = split
    zero -> true
    succ n -> odd n

  odd : nat -> bool = split
    zero -> false
    succ n -> even n

mutual
  evenodd : (n : nat) -> Path bool (even n) (odd (succ n)) = split
    zero -> <i> true
    succ x -> <i> (oddeven x) @ i
  oddeven : (n :nat) -> Path bool (odd n) (even (succ n)) = split
    zero -> <i> false
    succ x -> <i> (evenodd x) @ i

-- examples 1.9.1 and 1.9.2
double_via_rec_nat : nat -> nat = natRec nat zero (\(_:nat) (y:nat) -> succ (succ y))
add_via_rec_nat : nat -> nat -> nat = natRec (nat->nat) (\(x:nat)->x) (\(_:nat) (add_:nat->nat) (m:nat) -> succ(add_ m))

-- exercise 1.9: Define the type family Fin : N → U mentioned at the end of §1.3, and the dependent
-- function fmax : ∏(n:N) Fin(n + 1) mentioned in §1.4.

fmax: (n:nat) -> Fin (succ n) = split { zero -> fz zero ; succ n -> fs (succ n) (fmax n) }

-- exercise 1.10: Show that the Ackermann function ack : N → N → N is definable using only rec_nat
-- satisfying the following equations:
--   ack(0, n) ≡ succ(n),
--   ack(succ(m), 0) ≡ ack(m, 1),
--   ack(succ(m),succ(n)) ≡ ack(m, ack(succ(m), n)).

ack : nat -> nat -> nat =
  natRec (nat->nat) (\(n:nat) -> succ n)
                    (\(m:nat) (_:nat->nat) (n:nat) -> natRec nat (ack m one)
                    (\(p:nat) (_:nat) -> ack m (ack (succ m) p)) n)

-- As a lead-in to exercice 1.8, part three (prove that nat is a semi-ring)
-- lets prove that double x = add x x

double : nat -> nat = split
  zero -> zero
  succ n -> succ (succ (double n))

double_n_is_add_n_n : (n:nat) -> Path nat (double n) (add n n) = split
  zero -> <i> zero
  succ x -> composition nat (succ (succ (double x)))
                            (succ (succ (add x x)))
                            (succ (add  (succ x) x))
                             (<j> (succ (succ (double_n_is_add_n_n x @ j))))
                             (<k>  succ (add_succ x x @ -k))

-- Same result, but with cryptic comp application obtained by expanding composition
-- Note the empty third argument to comp
double_n_is_add_n_n_via_cryptic_comp : (n:nat) -> Path nat (double n) (add n n) = split
  zero -> <i> zero
  succ x -> comp (<i> Path nat (succ (succ (double x))) (succ (add_succ x x @ -i)))
                 (<j> (succ (succ (double_n_is_add_n_n x @ j)))) []

-- Same result, but with more typical comp application
double_n_is_add_n_n_via_comp : (n:nat) -> Path nat (double n) (add n n) = split
  zero -> <i> zero
  succ x -> <i> comp (<_> nat) (succ (succ (double_n_is_add_n_n x @ i)))
                [ (i=0) -> <j> (succ (succ (double x)))   -- 2+(double x) => 2+(add x x)
                , (i=1) -> <j> (succ (add_succ x x @ -j)) -- 2+(add x x)  => 1+(add (x+1) x)
                ]
