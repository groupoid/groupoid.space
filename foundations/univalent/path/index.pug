doctype html
html
    head
        meta(charset='utf-8')
        meta(http-equiv='x-ua-compatible' content='ie=edge')
        meta(name='viewport'        content='width=device-width, initial-scale=1')
        meta(name='author'          content='Namdak Tonpa')
        meta(name='twitter:site'    content='@5HT')
        meta(name='twitter:creator' content='@5HT')
        meta(property='og:title'       content='PATH')
        meta(property='og:description' content='Path')
        meta(property='og:type'        content='website')
        meta(property='fb:app_id'      content='118554188236439')
        meta(property='og:url'         content='https://groupoid.space/foundations/univalent/path/')
        link(rel='stylesheet' href='https://groupoid.space/main.css')
        block title
            title PATH
            script(src='https://groupoid.space/styles/mathjax.js?config=TeX-AMS_HTML')
            script.
              window.MathJax = { jax: ["input/TeX", "input/MathML", "input/AsciiMath", "output/CommonHTML", "output/NativeMML"],
                             TeX: { extensions: ["AMSmath.js", "AMSsymbols.js", "autoload-all.js"] },
                             extensions: ["tex2jax.js", "asciimath2jax.js", "mml2jax.js", "MathMenu.js", "MathZoom.js"],
                             "HTML-CSS": { imageFont: null },
                             AuthorInit: function() {
                                 MathJax.Hub.Register.StartupHook("TeX AMSmath Ready", function() {
                                     var TEX = MathJax.InputJax.TeX;
                                     TEX.Definitions.Add({
                                         macros: {
                                           llparenthesis: ['Macro', '\\mathopen{\u2987}'],
                                           rrparenthesis: ['Macro', '\\mathclose{\u2988}'],
                                           llbracket:     ['Macro', '\\mathopen{\u27E6}'],
                                           rrbracket:     ['Macro', '\\mathclose{\u27E7}'],
                                         }
                                     });
                                 });
                             },
                             tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']],
                                        processEscapes: true }
                         };
    body.content
        block content
        block vars


block content
    article.main
        .om
            section
                h1 PATH
                span.
                    $$\def\mapright#1{\xrightarrow{{#1}}}
                      \def\mapleft#1{\xleftarrow{{#1}}}
                      \def\mapup#1{\Big\uparrow\rlap{\raise2pt{\scriptstyle{#1}}}}
                      \def\mapupl#1{\Big\uparrow\llap{\raise2pt{\scriptstyle{#1}}}}
                      \def\mapdown#1{\Big\downarrow\rlap{\raise2pt{\scriptstyle{#1}}}}
                      \def\mapdownl#1{\Big\downarrow\llap{\raise2pt{\scriptstyle{#1}}}}
                      \def\mapdiagl#1{\vcenter{\searrow}\rlap{\raise2pt{\scriptstyle{#1}}}}
                      \def\mapdiagr#1{\vcenter{\swarrow}\rlap{\raise2pt{\scriptstyle{#1}}}}
                    $$
        aside
            time Published: 25 JUL 2018
        .om
            section
                p.
                    The Path identity type defines a Path space with elements and values.
                    Elements of that space are functions
                    from interval $[0,1]$ to values of that path space.
                    This ctt file reflects <a href="https://arxiv.org/pdf/1611.02108.pdf">CCHM</a><sup>2</sup> cubicaltt model with connections.
                    There is a <a href="https://arxiv.org/pdf/1712.04864.pdf">PO</a><sup>3</sup>
                    paper about CCHM axiomatic in a topos.
                h.
                    <div><sup>1</sup> &mdash; Bezem, Coquand, Huber (2014)<br>
                    <sup>2</sup> &mdash; Cohen, Coquand, Huber, MoÌˆrtberg (2015)<br>
                    <sup>3</sup> &mdash; Pitts, Orton (2016)<br>
                    </div>

            section
                h2 Constructors
                code.
                    refl (A: U) (a: A) : Path A a a
                p.
                    Returns a reflexivity path space for a given value of the type.
                    The inhabitant of that path space is the lambda on the homotopy
                    interval $[0,1]$ that returns a constant value a. Written in
                    syntax as $&lt;i&gt;a$.

                h2 Eliminators
                code.
                    app1 (A: U) (a b: A) (p: Path A a b): A = p @ 0
                    app2 (A: U) (a b: A) (p: Path A a b): A = p @ 1

                p.
                    Connections allow you to build a square
                    with only one element of path: i) $\\(i,j:I) \rightarrow p\ @\ min(i,j)$;
                    ii) $\\(i,j:I)\rightarrow p\ @\ max(i,j)$.
                figure.
                    $$
                    \begin{array}{ccc}
                        b & \mapright{\\(i:I) \rightarrow b} & b \\
                        \mapupl{p} &  & \mapup{\\(i:I)\rightarrow b} \\
                        a & \mapright{p} & b \\
                    \end{array}
                    $$
                    $$
                    \begin{array}{ccc}
                        a & \mapright{p} & b \\
                        \mapupl{\\(i:I)\rightarrow a} &  & \mapup{p} \\
                        a & \mapright{\\(i:I)\rightarrow a} & a \\
                    \end{array}
                    $$
                code.
                    connection1 (A: U) (a b: A) (p: Path A a b)
                      : PathP (&lt;x&gt; Path A (p@x) b) p (&lt;i&gt; b)
                      = &lt;y x&gt; p @ (x \/ y)

                    connection2 (A: U) (a b: A) (p: Path A a b)
                      : PathP (&lt;x&gt; Path A a (p@x)) (&lt;i&gt; a) p
                      = &lt;x y&gt; p @ (x /\ y)
                br.

                h2 Congruence
                code.
                    ap  (A B: U) (f: A -> B)
                        (a b: A) (p: Path A a b)
                      : Path B (f a) (f b)

                    apd (A: U) (a x:A) (B:A->U) (f: A->B a)
                        (b: B a) (p: Path A a x)
                      : Path (B a) (f a) (f x)

                p.
                    Maps a given path space between values of one type
                    to path space of another type using an encode function between types.
                    Implemented as a lambda defined on $[0,1]$ that returns
                    application of encode function to path application of
                    the given path to lamda argument <mark>&lt;i&gt f (p @ i)</mark>
                    in both cases.

                h2 Transport
                code.
                    trans (A B: U) (p: Path U A B) (a: A) : B
                p.
                    Transports a value of the left type to the value of the right type
                    by a given path element of the path space between left and right types.
                    Defined as path composition with $[]$ of a over a path p
                    <mark>comp p a []</mark>.

                h2 Substitution
                code.
                    subst (A: U) (P: A -> U)
                          (a b: A) (p: Path A a b)
                          (u: P a) : P b
                p.
                    Acts like transport of mapOnPath value, representing the
                    dependent function transport or substitution.

                h2 Composition
                figure.
                    $$
                    \begin{array}{ccc}
                        a & \mapright{comp} & c \\
                        \mapupl{\\(i:I) \rightarrow a} & & \mapup{q} \\
                        a & \mapright{p\ @\ i} & b \\
                    \end{array}
                    $$

                code.
                    composition (A: U) (a b c: A)
                                (p: Path A a b) (q: Path A b c): Path A a c
                p.
                    Composition operation allows building a new path from two given paths
                    in a connected point. The proofterm is
                    <mark>comp (&lt;i&gt;Path A a (q @ i)) p []</mark>.

                h2 Contractability of Singleton
                code.
                    singl (A: U) (a: A) : U = (x: A) * Path A a x

                    contrSingl (A: U) (a b: A) (p: Path A a b)
                             : Path (singl A a) (a,refl A a) (b,p)
                p.
                    Proof that singleton is contractible space. Implemented as
                    <mark>&lt;i&gt; (p @ i,<j> p @ i/\j)</mark>.

                h1 Eliminators

                h2 J by Paulin-Mohring
                code.
                    J (A: U)
                      (a b: A)
                      (P: singl A a -> U)
                      (u: P (a,refl A a))
                      (p: Path A a b) : P (b,p)
                p.
                    J is formulated in a form of Paulin-Mohring and implemented using
                    two facts that singletons are contractible and dependent function
                    transport.

                h2 Dependent Eliminator (HoTT)
                code.
                    J (A: U)
                      (a: A)
                      (C: (x: A) -> Path A a x -> U)
                      (d: C a (refl A a))
                      (x: A)
                      (p: Path A a x) : C x p
                p.
                    J from HoTT book.

                h2 Diagonal Version
                code.
                    D (A: U) : U = (x y: A) -> Path A x y -> U

                    J (A: U)
                      (x: A)
                      (C: D A)
                      (d: C x x (refl A x))
                      (y: A)
                      (p: Path A x y) : C x y p
                p.

                h2 Computation
                code.
                    trans_comp (A: U) (a: A)
                             : Path A a (trans A A (<_> A) a)

                    subst_comp (A: U) (P: A -> U) (a: A) (e: P a)
                             : Path (P a) e (subst A P a a (refl A a) e)

                    J_comp     (A: U) (a: A) (C: (x: A) -> Path A a x -> U)
                               (d: C a (refl A a))
                             : Path (C a (refl A a)) d (J A a C d a (refl A a))
                p.
                    Note that in HoTT there is no Eta rule, otherwise
                    Path between element would requested to be unique applying
                    UIP at any Path level which is prohibited. UIP in HoTT
                    is defined only as instance of n-groupoid, the PROP type.

    include ../../../footer.pug
